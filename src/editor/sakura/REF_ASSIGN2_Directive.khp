&Abs:{ p1 } /// 引数を一つとりその絶対値を返す。\n\n書式：\n\n&Abs:{ p1 }\n\n引数：\n\n    p1引数：絶対値を取得したいjava.lang.Number系オブジェクト。(Stringは不可)\n\n返値：\n\n    p1引数と同じ型の絶対値を表すNumber系オブジェクトを返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのNumberの絶対値を取得してサービスセッションキーBにセットする。\n\nB	&Abs:{ @A }\n\n
&Add:{ s1 }{ s2 } /// 引数を二つとりその和を返す。\n\n書式：\n\n&Add:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：加算値のNumber\n    s2引数：加算値のNumberもしくは文字列（数値を表すもののみ）\n\n返値：\n\n    最初の引数と２番目の引数の足し算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A,BサービスセッションキーのNumberを加算して,サービスセッションキーCにセットする。\n\nC	&Add:{ @A } {@ B }\n\n
&AddAllItem:{ list1 }{ list2 } /// ターゲットリストにアイテムリストをすべて追加して返す。\n\n書式：\n\n&AddAllItem:{ list1 }{ list2 }\n\n引数：\n\n    list1引数：Collection,配列,Portfoilo\n    list2引数：list1に追加する内容を格納したCollection,配列,Portfoilo\n\n返値：\n\n    list1引数のリストにlist2引数のリストの内容をすべて追加して返す。\n    list1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの内容に,Bサービスセッションキーのリストの内容を追加して,サービスセッションキーCにセットする。\n\nC	&AddAllItem:{ @A } {@ B }\n\n
&AddDay:{ date }{ IncValue } ///     日付を引数の日数分加えて返す。\n\n    書式：\n\n    &AddDay:{ date }{ IncValue }\n\n    引数：\n\n        date引数：元になる日付を表すDate\n        IncValue引数：加算する日数を表すNumber,String\n\n    返値：\n\n        date引数のDateオブジェクトにIncValue引数の日数を加えて返す。\n        IncValue引数の値がないときは＋１日、マイナスの時は減算になる\n        date引数がnullの場合は、nullを返す。\n\n    例：Aサービスセッションキーのリストの日付に,Bサービスセッションキーの値を加えて,サービスセッションキーCにセットする。\n\n    C	&AddDay:{ @A } {@ B }\n\n\n\n
&AddItem:{ list1 }{ s1 } /// \nターゲットリストにアイテムを追加して返す。\n\n書式：\n\n&AddItem:{ list1 }{ s1 }\n\n引数：\n\n    list1引数：アイテムを追加する対象のCollection\n    s1引数：ターゲットリストに追加するObject\n\n返値：\n\n    list1引数のリストにs1引数のObjectを追加して返す。\n    list1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの内容に,Bサービスセッションキーの内容を追加して,サービスセッションキーCにセットする。\n\nC	&AddItem:{ @A } {@ B }\n\n
&AddMonth:{ p1 }{ IncValue } /// 日付を引数の月数分加えて返す。\n\n書式：\n\n&AddMonth:{ p1 }{ IncValue }\n\n引数：\n\n    p1引数：元になる日付を表すDateもしくはYearMonth\n    IncValue引数：加算する日数を表すNumber,String\n\n返値：\n\n    p1引数がDateでもYearMonthでもIncValue引数の月数を加えて返す。\n    IncValue引数の値がないときは＋一ヶ月、マイナスの時は減算になる。日にちは変更しない。\n    date引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの日付に,Bサービスセッションキーの値（月数）を加えて,サービスセッションキーCにセットする。\n\nC	&AddMonth:{ @A } {@ B }\n\n
&AddPortfolio:{ port1 }{ list2 } /// Portfolioにアイテムを追加して返す。\n\n書式：\n\n&AddPortfolio:{ port1 }{ list2 }\n\n引数：\n\n    port1引数：対象のPortfoilo\n    list2引数：port1に追加する内容を格納したPortfoilo,Observable,collection\n\n返値：\n\n    port1引数のPortfolioにlist2引数の値をすべて追加して返す。\n    port1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのPortfolioの内容に,Bサービスセッションキーのリストの内容を追加して,サービスセッションキーCにセットする。\n\nC	&AddPortfolio:{ @A } {@ B }\n\n
&AddYear:{ date }{ IncValue } /// 日付を引数の年数分加えて返す。\n\n書式：\n\n&AddYear:{ date }{ IncValue }\n\n引数：\n\n    date引数：操作対象の日付を表すDate,YearMonth,Year\n    IncValue引数：加算する年数を表すNumber,String\n\n返値：\n\n    date引数のDateにIncValue引数の年数を加えて返す。\n    IncValue引数の値がないときは＋一年、マイナスの時は減算になる。月日にちは変更しない。\n    date引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの日付に,Bサービスセッションキーの値（年数）を加えて,サービスセッションキーCにセットする。\n\nC	&AddYear:{ @A } {@ B }\n\n
&ApplyFilter:{ models }{ filter } /// \nModel集合に対して、filterを適用した結果を返す。\n\n書式：\n\n&ApplyFilter:{ models }{ filter }\n\n引数：\n\n    models引数：filterを適用する対象のモデル集合(List, Set, Array,、Portfolio等)\n    filter引数：モデル集合に対して適用するフィルタ条件式(文字列による式、もしくはあらかじめ&CreateFilterで生成されたfilterオブジェクト)\n\n返値：\n\n    modelsがListの場合、filterで抽出したList\n    modelsがArrayの場合、元のArrayの型と同じ型の抽出結果の配列\n    modelsがPortfolioの場合、元のPortfolioに対してfilterを追加した新規Portfolio\n    modelsがnullの場合は、値はnullになる。\n    filterがnullの場合は、それぞれの型に応じたmodelsのコピーが生成される。\n\n例：@SearchResultListに対して、フィルタを文字列で与えて適用した結果を取得する\n\n絞込結果　　"&ApplyFilter:{@SearchResultList}{Name like %Prescription%}"\n\n
&ApplySessionFilter:{ SessionFilter } /// SessionFilter式を評価した真偽値(Boolean.TRUEまたはBoolean.FALSE)を返す\n\n書式：\n\n&ApplySessionFilter:{ SessionFilter }\n\n引数：\n\n    SessionFilter引数：評価したいSession条件式(文字列による式、もしくはあらかじめ&CreateSessionFilterで生成されたfilterオブジェクト)\n\n返値：\n\n    SessionFilter式を評価した真偽値(Boolean.TRUEまたはBoolean.FALSE)\n    SessionFilterがnullの場合は、nullを返す。\n\n例：@SearchResultListの件数が１以上であるかを判定した結果を取得する\n\n判定結果　　"&ApplySessionFilter:{'&Size:{@SearchResultList} > 1}"\n\n
&AsBytes:{ string }{ encoding } /// \n引数を指定の文字セットでバイトシーケンスに変換してjava.lang.Byte配列として返す。\n\n書式：\n\n&AsBytes:{ string }{ encoding }\n\n引数：\n\n    string引数：バイトシーケンスに変換する対象のString\n    encoding引数：バイトシーケンスに変換する際の文字セット名。省略可。\n\n返値：\n\n    string引数をencodingでバイトシーケンスに変換した結果をjava.lang.Byte配列として返す。\n    string引数がnullのときはnullを返す。\n    string引数が0サイズ文字列の場合はnullを返す。\n    encoding引数がnullのときは、実行プラットフォームのデフォルトエンコーディングが適用される。\n    encoding引数が不正の場合はエラーを返す。\n\n例：AサービスセッションキーのStringの内容をWindows-31JでバイトシーケンスにしてCセッションキーで格納する\n\nC	&AsBytes:{ @A }{ Windows-31J }\n\n
&AsDate:{ p1 } /// \n引数を一つとりそれを日付(java.util.Date)に変換して返す。\n\n書式：\n\n&AsDate:{ p1 }\n\n引数：\n\n    p1引数：Dateに変換する対象のDate、YearMonth、Year、Number、String\n\n返値：\n\n    p1引数がDateのときは、そのまま返す。\n    p1引数がYearMonthのときは、値をYearMonthが表す月の１日として返す。\n    p1引数がNumberのときは、値を時刻値（標準時からの指定されたミリ秒数）を返す。\n    p1引数がStringのときは、Java日付変換'yyyy/MM/dd:HH:mm:ss'で変換されて返す。\n    但し、時刻、分、秒は省略できる。\n\n例：AサービスセッションキーのDateの内容サービスセッションキーCにセットする。\n\nC	&AsDate:{ @A }\n\n例：Aサービスセッションキーの文字列の内容サービスセッションキーCにセットする。\n\nC	&AsDate:{ 2006/10/10 }\n\n
&AsDateWithFormat:{ format }{ toDateValue }{ locale } /// 引数をフォーマットの形式で日付(java.util.Date)に変換して返す。\n\n書式：\n\n&AsDateWithFormat:{ format }{ toDateValue }{ locale }\n\n引数：\n\n    format引数：toDateValue引数で渡される日付文字列のフォーマット\n    toDateValue引数：Dateに変換する日付文字列\n    locale引数：日付文字列のロケール指定。省略可。ただし、"ja_JP_JP"の文字列を指定した場合は、new Locale("ja_JP_JP")ではなく、new Locale("ja","JP","JP")を生成する。この場合、和暦での表示フォーマットになる\n\n返値：\n\n    format引数のフォーマット形式とlocale引数のロケールでtoDateValue引数の文字列をDateに変換して返す。\n    locale引数が省略された場合は実行環境のデフォルトロケールが適用される。"ja_JP_JP"が指定された場合は、new Locale("ja","JP","JP")を適用する。\n    変換フォーマットはSimpleDateFormatの書式に従う。また、format引数がNULLの場合はデフォルトのformat:"yyyyMMdd:HH:mm:ss"に従う\n\n例："yyyy/MM/dd:hh:mm:ss"のフォーマットで,Bサービスセッションキーの文字列をDateに変換して,サービスセッションキーCにセットする。\n\nC	&AsDateWithFormat:{yyyy/MM/dd:hh:mm:ss}{@B}\n\n例：ロケールをUSに指定して変換する\n\nC	&AsDateWithFormat:{yyyy/MM/dd:hh:mm:ss}{@B}{US}\n\n
&AsDecimal:{ p1 } { scale } { round } /// 引数を一つとりそれをjava.math.BigDecimalに変換して返す。\n\n書式：\n\n&AsDecimal:{ p1 } { scale } { round }\n\n引数：\n\n    p1引数：BigDecimalに変換したいNumberオブジェクトまたは数値文字列\n    scale引数：変換時の精度を表すNumberまたは数値文字列\n    round引数：変換時の丸め処理を表す文字列\n    scale,roundは省略可能である。但し、scaleを省略した時はroundも省略する必要がある。\n\n返値：\n\n    p1引数の内容をBigDecimalに変換して返す。\n    scale引数が指定されなかったときは、scale値0で変換する。\n    roundを指定しなかった場合は四捨五入(ROUND_HALF_UP)が選択される。\n    round引数は以下の文字列を有効とする。\n        切上げ時、"切り上げ","切上","UP","ROUND_UP","up","round_up"\n        切捨て時、"切捨て", "切捨""DOWN", "ROUND_DOWN","down", "round_down"\n        正の無限大に近づくように丸める時、"CEILING", "ROUND_CEILING","ceiling","round_ceiling"\n        負の無限大に近づくように丸める時、"FLOOR","ROUND_FLOOR","floor","round_floor"\n        四捨五入の時、"四捨五入","HALF_UP","ROUND_HALF_UP", "half_up", "round_half_up"\n        五捨六入の時、"五捨六入", "HALF_DOWN", "ROUND_HALF_DOWN","half_down","round_half_down"\n        「もっとも近い数字」 に丸める時、"HALF_EVEN", "ROUND_HALF_EVEN", "half_even", "round_half_even"\n        丸めが必要でないとき、"UNNECESSARY", "ROUND_UNNECESSARY", "unnecessary","round_unnecessary"\n    p1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのBigDecimalの内容サービスセッションキーCにセットする。\n\nC	&AsDecimal:{ @A }\n\n例：Aサービスセッションキーの値の内容をスケール１、切上げでサービスセッションキーCにセットする。\n\nC	&AsDecimal:{ @A } { 1 } { UP }\n\n
&AsInteger:{ p1 } /// 引数を一つとりそれをjava.lang.Integerに変換して返す。\n\n書式：\n\n&AsInteger:{ p1 }\n\n引数：\n\n    p1引数：Integerの数値文字列に変換できるオブジェクト\n\n返値：\n\n    p1引数がIntegerのときは、そのまま返す。\n    p1引数がIntegerクラ以外スのときは、toString()でInteger数値文字列をIntegerに変換して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのIntegerの内容サービスセッションキーCにセットする。\n\nC	&AsInteger:{ @A }\n\n例：Aサービスセッションキーの文字列の内容を数値としてサービスセッションキーCにセットする。\n\nC	&AsInteger:{ 1000 }\n\n
&AsKey:{ p1 } /// 引数を一つとりそれをKey(pexa.share.util.Key)に変換して返す。\n\n書式：\n\n&AsKey:{ p1 }\n\n引数：\n\n    p1引数：toString()で変換値が取得できるオブジェクト\n\n返値：\n\n    toString()で文字列を取得し、Keyクラスに変換して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をKeyクラスでサービスセッションキーCにセットする。\n\nC	&AsKey:{ @A }\n\n例：Aサービスセッションキーの文字列の内容をKeyクラスでサービスセッションキーCにセットする。\n\nC	&AsKey:{ AAAA }\n\n
&AsLong:{ p1 } /// 引数を一つとりそれをjava.lang.Longに変換して返す。\n\n書式：\n\n&AsLong:{ p1 }\n\n引数：\n\n    p1引数：Longの数値文字列に変換できるオブジェクト,またはjava.util.Date型のデータを含むオブジェクト\n\n返値：\n\n    p1引数がLongのときは、そのまま返す。\n    p1引数がDateクラスのときは、getTime()でミリ秒をLongで返す。\n    p1引数がLong、Dateクラス以外のときは、toString()でLong数値文字列をLongに変換して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのLongの内容サービスセッションキーCにセットする。\n\nC	&AsLong:{ @A }\n\n例：Aサービスセッションキーの文字列の内容を数値としてサービスセッションキーCにセットする。\n\nC	&AsLong:{ 999999999999 }\n\n
&AsModel:{ proxy } /// \nProxy値を引数としてとりそれをデータモデルに変換して返す。\n\n書式：\n\n&AsModel:{ proxy }\n\n引数：\n\n    proxy引数：必ずProxy値オブジェクトを指定する。\n\n返値：\n\n    proxy引数がProxy値のときは、そのProxy値が指すデータモデルを返す。\n    proxy引数がnullの場合は、nullを返す。\n    proxy引数がProxy値でもnullでも無い場合は例外を返す。\n\n例：AサービスセッションキーのProxy値が指すデータモデルをサービスセッションキーCにセットする。\n\nC	&AsModel:{ @A }\n\n
&AsPortfolio:{ p1 }{ filter(optional) }{prefetch(optional) }{ distinct(optional) } /// 引数を一つとりそれを新規作成Portfolioにセットして返す。\n\n書式：\n\n&AsPortfolio:{ p1 }{ filter(optional) }{prefetch(optional) }{ distinct(optional) }\n\n引数：\n\n    p1引数：Portfolioにセットする値でCollectoin,Observable配列,Observableオブジェクト(必須)\n    filter引数：Portfolioが対象を絞り込むためのFilter文字列もしくはFilterオブジェクト(省略可)\n    prefetch引数：Portfolioがprefetchする現象型名のString,String[],Setオブジェクト(省略可)\n    disinct引数：Portfolioがdistinctする現象型名のString,String[],Setオブジェクト(省略可)\n\n返値：\n\n    変換対象を、指定引数のPortfolioクラス生成し、追加したPortfolioクラスを返す。\n    引数が、nullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をPortfolioクラスでサービスセッションキーCにセットする。\n\nC	&AsPortfolio:{ @A }\n\n
&AsString:{ p1 } /// 引数を一つとり、それを文字列(java.lang.String)に変換して返す。\n\n書式：\n\n&AsString:{ p1 }\n\n引数：\n\n    p1引数：toString()で変換値が取得できるオブジェクト\n\n返値：\n\n    toString()で文字列を取得し、Stringに変換して返す。\n    p1引数がDateオブジェクトの時、"yyyy/MM/dd:HH:mm:ss"でフォーマット変換を行って返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をStringクラスでサービスセッションキーCにセットする。\n\nC	&AsString:{ @A } \n\n
&AsYearMonth:{ p1 } /// 引数を一つとり、それをYearMonth(pexa.share.util.cont.YearMonth)に変換して返す。\n\n書式：\n\n&AsYearMonth:{ p1 }\n\n引数：\n\n    p1引数：変換したいDate、Year文字列\n\n返値：\n\n    Date,日付文字列をpexa.share.util.cont.YearMonthに変換する。\n    日にちは一日になる。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をpexa.share.util.cont.YearMonthクラスに変換してサービスセッションキーCにセットする。\n\nC	&AsYearMonth:{ @A }\n\n
&AsYear:{ p1 } /// 引数を一つとり、それをYear(pexa.share.util.cont.Year)に変換して返す。\n\npexa4.7-dev33からリターン値がYearクラスに変更になりました。\nリターン値がIntegerのものは&AsYearNumに変更されています。\n\n書式：\n\n&AsYear:{ p1 }\n\n引数：\n\n    p1引数：変換したいDate、YearMonth、文字列\n\n返値：\n\n    Date,日付文字列をpexa.share.util.cont.Yearに変換する。\n    日にちは一月一日になる。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をpexa.share.util.cont.Yearクラスに変換してサービスセッションキーCにセットする。\n\nC	&AsYear:{ @A }\n\n
&BeforeDay /// 評価時の前日かつam00:00:00のjava.util.Dateを返す。\n\n書式：\n\n&BeforeDay\n\n引数：\n\n    なし\n\n返値：\n\n    評価時の前日かつam00:00:00を表すjava.util.Dateオブジェクト\n\n例：作成日サービスセッションが前日以降かを比較する\n\n@作成日 >= &BeforeDay\n\n
&CheckDateWithFormatLenient:{ format }{ toDateValue }{ locale } /// 引数のフォーマット形式で日付(java.util.Date)に対し、厳密な変換して不正日付をチェックして返す。\n\n書式：\n\n&CheckDateWithFormatLenient:{ format }{ toDateValue }{ locale }\n\n引数：\n\n    format引数：toDateValue引数で渡される日付文字列のフォーマット\n    toDateValue引数：Dateに変換する日付文字列\n    locale引数：日付文字列のロケール指定。省略可。ただし、"ja_JP_JP"の文字列を指定した場合は、new Locale("ja_JP_JP")ではなく、new Locale("ja","JP","JP")を生成する。この場合、和暦での表示フォーマットになる\n\n返値：\n\n    format引数のフォーマット形式とlocale引数のロケールでtoDateValue引数の文字列をDateに変換して返す。\n    locale引数が省略された場合は実行環境のデフォルトロケールが適用される。"ja_JP_JP"が指定された場合は、new Locale("ja","JP","JP")を適用する。\n    変換フォーマットはSimpleDateFormatの書式に従う。また、format引数がNULLの場合はデフォルトのformat:"yyyyMMdd:HH:mm:ss"に従う\n    変換エラー時は、nullを返す。日付文字列の指定が"2016/13/01"のように日付として不正な場合もエラーになる。&AsDateWithFormatでは"2017/01/01"と解釈される。\n\n例："yyyy/MM/dd:hh:mm:ss"のフォーマットで,Bサービスセッションキーの文字列をDateに変換して,サービスセッションキーCにセットする。\n\nC	&CheckDateWithFormatLenient:{yyyy/MM/dd:hh:mm:ss}{@B}\n\n例：@Bの日付文字列が正しいかチェックする。\n\n	(branch\n		(before_condition\n			filter	"&CheckDateWithFormatLenient:{yyyy/MM/dd:HH:mm:ss}{@B} is not null "\n			error	"DateString format error!!"\n		)\n		format_type	session\n		(session\n			(session_keys\n				正しい日付	&AsDateWithFormat:{yyyy/MM/dd:HH:mm:ss}{@B}\n			)\n		)\n	)\n\n
&CheckStringPattern:{@INP}{Pattern} /// 引数のフ文字列内の必須文字種が存在するかをチェックし、結果を返す。\n\n書式：\n\n&CheckStringPattern:{@INP}{Pattern}\n\n引数：\n\n    INP引数:チェック対象の文字列を示す。\n    Pattern引数は、必須文字種のパターンを以下の文字で表す。複数文字種を指定することができる。\n    N:必須文字種として数字（０〜９）\n    A：必須文字種として英字大文字（A〜Z）\n    a：必須文字種として英字小文字（a〜z）\n    E：必須文字種として英字（A〜Z、 a〜z ）\n    S:必須文字種として特殊文字（ “`”,“~”,“!”,“@”,“#”,“$”,“%”,“^”,“&”,“*”,“(”,“)”,“_”,\n    “-”,“+”,“=”,“{”,“}”,“[”,“]”,“\\”,“|”,“:”,“;”,“\”“,”‘“,”<“,”>“,”,“,”.“,”?“,”/“）\n\n返値：\n\n    必須文字種がすべてそろっている場合は、Integerの０を返す。\n    必須文字種に足りないものがある時は、Integerの１を返す。\n\n例：　INPセッションに数字・英字・特殊文字が存在しない場合は１、存在する場合は０をRTNセッションにセットする。\n\n	RTN　&CheckStringPattern:{@INP}{NES}\n\n\n
&Cat:{ p1 }...{ pN } /// 文字列の連結結果を返す。\n\n書式：\n\n&Cat:{ p1 }...{ pN }\n\n引数：\n\n    p1引数：連結対象の値オブジェクト(DateもしくはtoString可能なオブジェクト)\n    pN引数：連結対象の値オブジェクト(DateもしくはtoString可能なオブジェクト)\n\n返値：\n\n    toString()で文字列を取得し、Stringクラスに変換して引数分連結して返す。\n    引数がDateオブジェクトの時、"yyyy/MM/dd:HH:mm:ss"でフォーマット変換を行って返す。\n    連結対象nの値がnull値の場合はその分はスキップされる\n\n例：A,B,C/Pathサービスセッションキーの内容をStringクラスで連結しサービスセッションキーDにセットする。\n\nD		&Cat:{ @A }{ @B }{ @C/Path }\n\n例：連結対象１="AAA",連結対象２=null,連結対象３="CCC"の場合\n\n連結結果        &Cat:{@連結対象１}{@連結対象２}{@連結対象３}\n\nとした場合は連結結果="AAACCC"となる。 \n
&ClearTime:{ date }{ position } /// \n時刻の特定位置以降をクリアして返す。\n\n書式：\n\n&ClearTime:{ date }{ position }\n\n引数：\n\n    date引数：クリア対象の日時値オブジェクト(Dateクラス)\n    position引数：クリアする位置を表すの値オブジェクト(Stringクラス)引数は省略可、省略時はHOURを指定した場合と同じになります。\n        HOUR:時以降を０クリア\n        MINUTE:分以降を０クリア\n        MIN:分以降を０クリア\n        SECOND:秒以降を０クリア\n        SEC:秒以降を０クリア\n        MILLISECOND:ミリ秒を０クリア\n        MSEC:ミリ秒を０クリア\n\n返値：\n\n    所定の位置以降クリアされたDateクラスで返す。\n\n例：DATEサービスセッションキーの内容を分以降０クリアでサービスセッションキーDにセットする。\n\nD		&ClearTime:{ @DATE }{ MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがMINUTEの場合\nクリア結果="2012/10/01:11:00:00.000"となる。 \n
&Clone:{ target } /// ターゲットのUpdatable,Observable,Clonableのコピーオブジェクトを返す\n\n書式：\n\n&Clone:{ target }\n\n引数：\n\n    target引数：コピー対象となる、UpdatableまたはObservableまたはClonable。\n\n返値：\n\n    targetのコピーオブジェクト。\n    もしtargetがnullの場合は、nullを返す。\n    もしtargetがUpdatableでもなくObservableでもなくClonableでもない場合は例外を返す。\n\n例：@AModelのコピーを作成して@BModelとして保持する。\n\nBModel　　&Clone:{@AModel}\n\n
&ConnectDateTime:{ date }{ time } /// 日付と時刻を連結して返す。\n\n書式：\n\n&ConnectDateTime:{ date }{ time }\n\n引数：\n\n    date引数：連結対象の日付値オブジェクト(Dateクラス)、日付部分のみが連結対象となり、時刻部分は対象外となります。\n    time引数：連結対象の日付値オブジェクト(Dateクラス)、時刻部分のみが連結対象となり、日付部分は対象外となります。\n\n返値：\n\n    連結されたDateクラスで返す。\n\n例：DATEサービスセッションキーの日付とTIMEサービスセッションキーの時刻値を連結してサービスセッションキーDにセットする。\n\nD		&ConnectDateTime:{ @DATE }{ @TIME }\n\n例：DATE="2012/10/01:11:22:33.456",TIME="1990/01/01:22:33:44.567"\n連結結果="2012/10/01:22:33:44.567"となる。 \n
&CreateFilter:{ filterString } /// &ApplyFilterで使用する条件式フィルタオブジェクトを生成して返す。\n\n書式：\n\n&CreateFilter:{ filterString }\n\n引数：\n\n    filterString引数：文字列による条件式\n\n返値：\n\n    filterStringの内容を表すフィルタオブジェクト\n    filterStringがnullの場合は、nullを返す。\n\n例：絞り込みに使用するためのフィルタをあらかじめ生成しておく\n\n絞込用フィルタ　　"&CreateFilter:{RemovedFlag = REMOVED and RecoverableFlag = RECOVERABLE}"\n\n
&CreateSessionFilter:{ sessionFilterString } /// &ApplySessionFilterで使用するSession条件式フィルタオブジェクトを生成して返す。\n\n書式：\n\n&CreateSessionFilter:{ sessionFilterString }\n\n引数：\n\n    sessionFilterString引数：文字列によるSession条件式\n\n返値：\n\n    sessionFilterStringの内容を表すSession条件式フィルタオブジェクト\n    sessionFilterStringがnullの場合は、nullを返す。\n\n例：検索結果チェックに使用するためのSession条件式フィルタをあらかじめ生成しておく\n\n検索結果チェック条件式　　"&CreateSessionFilter:{@検索結果件数 > 1}"\n\n
&DateToString:{ format }{ DateValue }{ locale } /// 引数をフォーマットの形式で日付(java.util.Date)を文字列に変換して返す。\n\n書式：\n\n&DateToString:{ format }{ DateValue }{ locale }\n\n引数：\n\n    format引数：日付文字列フォーマットを表すString\n    DateValue引数：文字列に変換する対象のDateオブジェクト\n    locale引数：日付表記のロケール指定。省略可。\n\n返値：\n\n    format引数のフォーマット形式とlocale引数のロケール指定でDateValue引数のDateオブジェクトを文字列に変換して返す。\n    locale引数が省略された場合は実行環境のデフォルトロケールが適用される。"ja_JP_JP"が指定された場合は、new Locale("ja","JP","JP")を適用する。また、"ja_JP_JP_ERA"が指定された場合は、フォーマット文字列のGまたは、 GGGG(年号)がERAの数（明治:1,大正:2,昭和:3,平成:4)に置き変わる\n    変換フォーマットはSimpleDateFormatの書式に従う。\n    DateValue引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストのフォーマットで,Bサービスセッションキーの日付（Dateクラス）を文字列に変換して,サービスセッションキーCにセットする。\n\nC	&DateToString:{ @A } {@ B }\n\n例：US表記形式の日付文字列を取得する場合\n\nC	&DateToString:{ @A } {@ B } { US }\n\n
&DayOfFromTo:{ from }{ to } /// 指定の２つの日付間が何日間かをjava.lang.Integerで取得する\n\n書式：\n\n&DayOfFromTo:{ from }{ to }\n\n引数：\n\n    from引数：日数を取得したい日付のfrom側をあらわすjava.util.Dateオブジェクト。\n    to引数：日数を取得したい日付のto側をあらわすjava.util.Dateオブジェクト。\n\n返値：\n\n    fromとtoの間が何日間あるかを表すjava.lang.Integer値\n    from, toがnullの場合は、nullを返す。\n    from, toがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：発注日から今日までに経過した日数を取得する\n\n発注後経過日数　　"&DayOfFromTo:{@発注日}{&Today}"\n\n@発注日が2/1で今日日付が2/10の場合はjava.lang.Integerで"9"を返す。 \n
&DayOfWeek:{ date } /// 指定日の曜日をpexa.share.util.business.DayOfWeekで取得する\n\n書式：\n\n&DayOfWeek:{ date }\n\n引数：\n\n    date引数：曜日を判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの曜日を表すpexa.share.util.business.DayOfWeekオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日の曜日を取得する場合\n\n今日の曜日　　"&DayOfWeek:{&Today}"\n\nもしその日が月曜日の場合は、DayOfWeek.MONDAYが取得できる。 \n
&DayOfWeekInMonth:{ date } /// 指定日の曜日がその月の何回目であるかをjava.lang.Integerで取得する\n\n書式：\n\n&DayOfWeekInMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの曜日がその月の何度目のものかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日の曜日がその月の何度目かを取得する場合\n\n今日の曜日の回数　　"&DayOfWeekInMonth:{&Today}"\n\nもしその日が第３月曜日の場合は、java.lang.Integerで"3"が取得できる。 \n
&DayOfMonth:{ date } /// 指定日の日がその月の何日目かをjava.lang.Integerで取得する。\n\n書式：\n\n&DayOfMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその月の何日であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその月の何日かを取得する場合\n\n今日が何日か　　"&DayOfMonth:{&Today}"\n\nもしその日が３月７日の場合は、java.lang.Integerで"7"が取得できる。 \n
&DayOfYear:{ date } ///     指定日の日がその年の何日目かをjava.lang.Integerで取得する\n\n    書式：\n\n    &DayOfYear:{ date }\n\n    引数：\n\n        date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n    返値：\n\n        dateがその年の何日であるかを表すjava.lang.Integerオブジェクト。\n        dateがnullの場合は、nullを返す。\n        dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n    例：今日がその年の何日かを取得する場合\n\n    今日がその年の何日か　　"&DayOfYear:{&Today}"\n\n    もしその日が２月１日の場合は、java.lang.Integerで"32"が取得できる。\n\n\n\n
&Dec:{ @p1 } /// 引数を一つとりそれを−１して返す。\n\n書式：\n\n&Dec:{ @p1 }\n\n引数：\n\n    p1引数：デクリメントする対象のNumberオブジェクト\n\n返値：\n\n    -1された値をp1引数と同じNumberオブジェクトで返す\n    変換ではLongクラスを使用しているため、整数で計算されます。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容を-１してサービスセッションキーCにセットする。\n\nC	&Dec:{ @A }\n\n
&Distinct:{ target }{ item } /// Group,Portfolio,データモデルリスト内の値の重複のないSetを返す。\n\n書式：\n\n&Distinct:{ target }{ item }\n\nこのディレクティブは、データモデルの集合(target引数)から、\n指定された項目(item引数)の重複のない値の集合(Set)を取得します。\n例えばList中にデータモデルが5件入っていて、ある項目の値がそれぞれ\n\nnull\n1\nnull\n1\n2\n\nとなっていた場合に、以下のような値の集合(Set)が返されます。\n\nnull\n1\n2\n\nここで気をつける必要があるのは、nullも「null値」として値の一種として扱われることです。\nitem引数で指定した項目がnull可項目の場合は、結果の値Set中にはnull要素が含まれる可能性があります。\nこの値Setからnull要素を排除した結果がほしい場合は&Trimディレクティブを使用して下さい。\n\n引数：\n\n    target引数：Group,Portfolio,Collection,Observable配列\n    item引数：現象型のKeyまたは文字列\n\n返値：\n\n    target引数のGroup,Portfolio,Observable配列,Observableリストからitemの現象型の値を取得し、値の重複のないSetを取得する。\n    target引数がGroupでitem引数が、数値文字列、Numberクラスのときは、item引数を位置情報として、Groupクラスから求める。\n    target引数がnullの場合は、nullを返す。\n\n例： AサービスセッションキーのList内の会計部門Noを重複なくしてサービスセッションキーCにSetクラスでセットする。\n\nC	&Distinct:{ @A } { 会計部門No }\n\n
&Div:{ s1 }{ s2 } /// 引数を二つとり、最初の引数／二番目の引数を返す。\n\n書式：\n\n&Div:{ s1 }{ s2 }\n\n&Div:{ s1 }{ s2 }{ scale }\n\n&Div:{ s1 }{ s2 }{ scale }{ round }\n\n引数：\n\n    s1引数：割り算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    scale引数:s1引数がBigDecimalの値の場合に、割り算結果の小数点以下の桁数を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、割り算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nscale引数およびround引数は省略可能。ただし、round引数指定時はscale引数は必須。\nscale引数省略時は、java.math.BigDecimalのデフォルト動作s1.scale()が返値のスケールとなります。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の割り算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを割り算して,サービスセッションキーCにセットする。\n\nC	&Div:{ @A }{@ B }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して、丸めモードを切り捨て(DOWN)で割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }{ DOWN }\n\n
&Div:{ s1 }{ s2 }{ scale } /// 引数を二つとり、最初の引数／二番目の引数を返す。\n\n書式：\n\n&Div:{ s1 }{ s2 }\n\n&Div:{ s1 }{ s2 }{ scale }\n\n&Div:{ s1 }{ s2 }{ scale }{ round }\n\n引数：\n\n    s1引数：割り算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    scale引数:s1引数がBigDecimalの値の場合に、割り算結果の小数点以下の桁数を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、割り算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nscale引数およびround引数は省略可能。ただし、round引数指定時はscale引数は必須。\nscale引数省略時は、java.math.BigDecimalのデフォルト動作s1.scale()が返値のスケールとなります。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の割り算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを割り算して,サービスセッションキーCにセットする。\n\nC	&Div:{ @A }{@ B }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して、丸めモードを切り捨て(DOWN)で割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }{ DOWN }\n\n
&Div:{ s1 }{ s2 }{ scale }{ round } /// 引数を二つとり、最初の引数／二番目の引数を返す。\n\n書式：\n\n&Div:{ s1 }{ s2 }\n\n&Div:{ s1 }{ s2 }{ scale }\n\n&Div:{ s1 }{ s2 }{ scale }{ round }\n\n引数：\n\n    s1引数：割り算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    scale引数:s1引数がBigDecimalの値の場合に、割り算結果の小数点以下の桁数を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、割り算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nscale引数およびround引数は省略可能。ただし、round引数指定時はscale引数は必須。\nscale引数省略時は、java.math.BigDecimalのデフォルト動作s1.scale()が返値のスケールとなります。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の割り算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを割り算して,サービスセッションキーCにセットする。\n\nC	&Div:{ @A }{@ B }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して、丸めモードを切り捨て(DOWN)で割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }{ DOWN }\n\n
&FilterAnd:{ leftFilter }{ rightFilter } /// ２つのモデルフィルタをandで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&FilterAnd:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　andの左側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n    rightFilter引数　：　andの右側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n\n返値：\n\n    ２つのモデルフィルタをandで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　and連結フィルタ　　"&FilterAnd:{RemovedFlag = NOT_REMOVED}{ValidityFlag = VALID}"\n\n
&FilterOr:{ leftFilter }{ rightFilter } /// ２つのモデルフィルタをorで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&FilterOr:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　orの左側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n    rightFilter引数　：　orの右側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n\n返値：\n\n    ２つのモデルフィルタをorで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　or連結フィルタ　　"&FilterOr:{RemovedFlag = NOT_REMOVED}{ValidityFlag = VALID}"\n\n
&First:{target} /// リストの先頭のアイテムを返す。\n\n書式：\n\n&First:{target}\n\n引数：\n\n    target引数：Portfolio,Collection,配列\n\n返値：\n\n    target引数のPortfolio,配列,Collectionから先頭のitemを取得し返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのList内の先頭アイテムをサービスセッションキーCでセットする。\n\nC	&First:{ @A }\n\n
&FirstDateOfBeforeWeek:{ date } /// \n指定日の先週の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfBeforeWeek:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの先週の開始日を表すjava.util.Dateオブジェクト。(基本的に日曜日)\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：先週の開始日を取得する場合\n\n先週の開始日　　"&FirstDateOfBeforeWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/02/24 00:00:00"が取得できる。 \n
&FirstDateOfNextWeek:{ date } /// \n指定日の来週の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfNextWeek:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの来週の開始日を表すjava.util.Dateオブジェクト。(基本的に日曜日)\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：来週の開始日を取得する場合\n\n来週の開始日　　"&FirstDateOfNextWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/09 00:00:00"が取得できる。 \n
&FirstDateOfWeek:{ date } /// 指定日の週の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfWeek:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの週の開始日を表すjava.util.Dateオブジェクト。(基本的に日曜日)\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今週の開始日(基本的に日曜日)を取得する場合\n\n今週の開始日　　"&FirstDateOfWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/02 00:00:00"が取得できる。 \n
&FirstDateOfBeforeMonth:{ date } ///     指定日の先月の開始日をjava.util.Dateで返す\n\n    書式：\n\n    &FirstDateOfBeforeMonth:{ date }\n\n    引数：\n\n        date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n    返値：\n\n        dateの先月の開始日を表すjava.util.Dateオブジェクト。\n        dateがnullの場合は、nullを返す。\n        dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n    例：先週の開始日を取得する場合\n\n    先週の開始日　　"&FirstDateOfBeforeMonth:{&Today}"\n\n    もしその日が2008/03/07の場合は、java.util.Dateで"2008/02/01 00:00:00"が取得できる。\n\n\n\n
&FirstDateOfMonth:{ date } /// 指定日の月の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの月の開始日を表すjava.util.Dateオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今月の開始日を取得する場合\n\n今月の開始日　　"&FirstDateOfWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/01 00:00:00"が取得できる。 \n
&FirstDateOfNextMonth:{ date } /// 指定日の来月の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfNextMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの来月の開始日を表すjava.util.Dateオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：来月の開始日を取得する場合\n\n来月の開始日　　"&FirstDateOfNextMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/04/01 00:00:00"が取得できる。\n
&Date:{ date } /// 指定日の00:00:00を表すjava.util.Dateを返す\n\n書式：\n\n&Date:{ date }\n\n引数：\n\n    date引数：00:00:00に変換したいjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの00:00:00を表すjava.util.Dateオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日の00:00:00を取得する場合\n\n今日の00:00:00　　"&Date:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/07 00:00:00"が取得できる。 \n
&DecimalFormat:{ formatString }{ number } /// 数値に対して、任意のフォーマットを適用した結果の文字列を返す。\n\n書式：\n\n&DecimalFormat:{ formatString }{ number }\n\n引数：\n\n    formatString引数　：　適用するフォーマットを指定する。必須。\n    number引数　：　フォーマットを適用したい数値(java.lang.Numberオブジェクト)を指定する。必須。\n\n返値：\n\n    数値に対してフォーマットを適用した結果の文字列。\n    formatString引数がnullの場合はエラーを返す。\n    number引数がjava.lang.Number以外の値の場合はエラーを返す。\n    number引数がnullの場合はnullを返す。\n\n例：シーケンサーで採番した数値にフォーマットを適用してID文字列を作成する\n\n　　ID　　"&DecimalFormat:{STA_000000}{&Sequencer:{ActivityID}}"\n\n上記の場合、Sequencerで採番された値が"101"のNumberオブジェクトの場合は"STA_000101"という文字列が取得できる。\n
&AsValue:{ ptypeName }{ valueString } /// 指定された現象型の値に変換した値を返す。。\n\n書式：\n\n&AsValue:{ ptypeName }{ valueString }\n\n引数：\n\n    ptypeName引数　：　適用する現象型名を指定する。必須。\n    valueString引数　：　現象型の型に変換したい任意の値（一般的には文字列）を指定する。必須。\n\n返値：\n\n    現象型の値の型に対応した値。\n    ptypeName引数がnullの場合はnullを返す。\n    ptypeName引数に対応する現象型が存在しない場合はnullを返す。\n    valueString引数がnullの場合はnullを返す。\n\n例：PhenomenonType(Proxy)を返す。\n\n　　ID　　"&AsValue:{SampleProxy1}{100}"\n\n上記の場合、SampleProxy1の型で値が100が取得できる。 \n
&Get:{ target }{ item } /// リストの指定位置のアイテムを返す。\n\n書式：\n\n&Get:{ target }{ item }\n\n引数：\n\n    target引数：Portfolio,Collection,配列\n    item引数：取得したいアイテムの位置(インデックス)を表すNumberクラスまたは、数値文字列(0,1,...n)\n\n返値：\n\n    target引数のPortfolio,配列,Collectionからitemで指定された位置のitemを取得し返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのList内3番目(インデックスとしては2)のitemをサービスセッションキーCにSetクラスでセットする。\n\nC	&Get:{ @A } { 2 }\n\n
&GetAfterBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys } ///     指定日を基準してN日後の営業日をカレンダー機能から取得してjava.util.Dateで返す。\n    カレンダー機能についてはSupportFrameworkのガイドを参照。\n\n    書式：\n\n    &GetAfterBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys }\n\n    引数：\n\n        calendar_name引数：カレンダ機能経由で参照するカレンダ名の指定(String)\n        base引数：営業日を取得する基準となる日付(java.util.Date)\n        offset引数：base引数の日から何日後の営業日を取得するかの指定(String, Integer)\n        session_keys引数：カレンダスキーマで記述されている検索フィルタに与えるセッション値キー。複数のキーを指定する場合は半角スペースで区切る。(省略可)\n\n    返値：\n\n        カレンダ機能のgetAfterBusinessDayメソッドの返値として取得したjava.util.Date\n\n    例：自社カレンダを参照して、今日を基準として3営業日後の日付を返す。検索条件は無し。\n\n    format_type  session\n    (session\n        (session_keys\n            自社3営業日後    "&GetAfterBusinessDay:{自社カレンダ}{&Today}{3}"\n        )\n    )\n\n\n    例：取引先カレンダを参照して、ある取引先の今日を基準として翌営業日の日付を返す。検索条件パラメータは１つ。\n\n    format_type  session\n    (session\n        (session_keys\n            得意先No         @得意先マスタ/得意先No\n            取引先翌営業日    "&GetAfterBusinessDay:{取引先カレンダ}{&Today}{1}{得意先No}"\n        )\n    )\n\n\n    例：銀行カレンダを参照して、ある銀行の今日を基準として翌営業日の日付を返す。検索条件パラメータは２つ。\n\n    format_type  session\n    (session\n        (session_keys\n            銀行No           @支払先マスタ/銀行No           \n            支店No           @支払先マスタ/支店No\n            銀行翌営業日    "&GetAfterBusinessDay:{銀行カレンダ}{&Today}{1}{銀行No 支店No}"\n        )\n    )\n\n\n\n
&GetBeforeBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys } /// 指定日を基準してN日前の営業日をカレンダー機能から取得してjava.util.Dateで返す。\nカレンダー機能についてはSupportFrameworkのガイドを参照。\n\n書式：\n\n&GetBeforeBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys }\n\n引数：\n\n    calendar_name引数：カレンダ機能経由で参照するカレンダ名の指定(String)\n    base引数：営業日を取得する基準となる日付(java.util.Date)\n    offset引数：base引数の日から何日前の営業日を取得するかの指定(String, Integer)\n    session_keys引数：カレンダスキーマで記述されている検索フィルタに与えるセッション値キー。複数のキーを指定する場合は半角スペースで区切る。(省略可)\n\n返値：\n\n    カレンダ機能のgetBeforeBusinessDayメソッドの返値として取得したjava.util.Date\n\n例：自社カレンダを参照して、今日を基準として3営業日前の日付を返す。検索条件は無し。\n\nformat_type  session\n(session\n    (session_keys\n        自社3営業日前    "&GetBeforeBusinessDay:{自社カレンダ}{&Today}{3}"\n    )\n)\n\n\n例：取引先カレンダを参照して、ある取引先の今日を基準として前営業日の日付を返す。検索条件パラメータは１つ。\n\nformat_type  session\n(session\n    (session_keys\n        得意先No         @得意先マスタ/得意先No\n        取引先前営業日    "&GetBeforeBusinessDay:{取引先カレンダ}{&Today}{1}{得意先No}"\n    )\n)\n\n\n例：銀行カレンダを参照して、ある銀行の今日を基準として前営業日の日付を返す。検索条件パラメータは２つ。\n\nformat_type  session\n(session\n    (session_keys\n        銀行No           @支払先マスタ/銀行No           \n        支店No           @支払先マスタ/支店No\n        銀行前営業日    "&GetBeforeBusinessDay:{銀行カレンダ}{&Today}{1}{銀行No 支店No}"\n    )\n)\n\n
&GetBusinessDayOfFromTo:{ CalendarName }{ from }{ to }{ session_keys } /// 指定された期間内の営業日日数をカレンダー機能から取得してjava.lang.Integerで返す。\nカレンダー機能についてはSupportFrameworkのガイドを参照。\n\n書式：\n\n&GetBusinessDayOfFromTo:{ CalendarName }{ from }{ to }{ session_keys }\n\n引数：\n\n    calendar_name引数：カレンダ機能経由で参照するカレンダ名の指定(String)\n    from引数:営業日数を求めるための範囲を表す日付値(java.util.Date)\n    to引数:営業日数を求めるための範囲を表す日付値(java.util.Date)\n    session_keys引数：カレンダスキーマで記述されている検索フィルタに与えるセッション値キー。複数のキーを指定する場合は半角スペースで区切る。(省略可)\n\n返値：\n\n    カレンダ機能のgetBusinessDayOfFromToメソッドの返値として取得したjava.lang.Integer\n\n例：fromを3/1,toを3/5とする。休日が[3/3],[3/4]の場合、営業日は[3/1],[3/2],[3/5]の３日間となる。\n\nformat_type  session\n(session\n    (session_keys\n        営業日日数    "&GetBusinessDayOfFromTo:{自社カレンダ}{&AsDate:{2012/03/01}}{&AsDate:{2012/03/05}}"\n    )\n)\n\n
&Age:{ birthday }{ evaluate_date } /// 指定された日付から年齢を取得してjava.lang.Integerで返す。\n書式：\n\n&Age:{ birthday }{ evaluate_date }\n\n引数：\n\n    birthday引数：誕生年月日(java.util.Date)\n    evaluate_date引数:評価する対象の年月日(java.util.Date)\n\n返値：\n\n    評価日時点での年齢java.lang.Integer\n\n例：birthdayを2000/04/01,evaluate_dateを2003/04/01とする。評価日が誕生日に達しているので、年齢は3になる\n\nformat_type  session\n(session\n    (session_keys\n        年齢    "&Age:{&AsDate:{2000/04/01}}{&AsDate:{2003/04/01}}"\n    )\n)\n\n
&GetObservation:{ TargetModel }{ PhenomenonTypeName }{ Condition(Optional) } /// ターゲットモデルが持つ現象型の値をCondition付きで参照する。\n数種類のConditionをあらかじめセッション上に作成した上でProcedure項目を参照したい場合等に使用してください。\n\n書式：\n\n&GetObservation:{ TargetModel }{ PhenomenonTypeName }{ Condition(Optional) }\n\n引数：\n\n    TargetModel引数：値の取得元データモデル。\n    PhenomenonTypeName引数：TargetModel引数のデータモデルから値を取得したい現象型名。\n    Condition引数：非必須。Procedureに渡したいConditionを表すObservable。\n\n返値：\n\n    指定された現象型の値\n    TargetModel引数、PhenomenonTypeName引数がnullの場合は、nullを返す。\n\n例：AセッションキーのデータモデルからBセッションキーの現象型の値をCセッションキーに返す\n\nC	&GetObservation:{ @A } { @B }\n\n例：AセッションキーのデータモデルからBセッションキーの現象型の値をCセッションキーのCondition付きで呼び出してDセッションキーに返す\n\nD	&GetObservation:{ @A } { @B } { @C }\n\n
&GetTime:{ date }{ position } /// 日時の特定値をIntegerで返す。\n\n書式：\n\n&GetTime:{ date }{ position }\n\n引数：\n\n    date引数：取得対象の日時値オブジェクト(Dateクラス)\n    position引数：取得位置を表すの値オブジェクト(Stringクラス)引数は省略可、省略時は時刻部分の秒数を返します。\n        YEAR:年をIntegerで返す。\n        MONTH:月をIntegerで返す。但し、1月は０になります。\n        DAY:日ををIntegerで返す。\n        HOUR:時ををIntegerで返す。\n        MINUTE:分をIntegerで返す。\n        MIN:分をIntegerで返す。\n        SECOND:秒をIntegerで返す。\n        SEC:秒をIntegerで返す。\n        MILLISECOND:ミリ秒をIntegerで返す。\n        MSEC:ミリ秒をIntegerで返す。\n\n返値：\n\n    日付の所定の位置をIntegerクラスで返す。\n\n例：DATEサービスセッションキーの内容の分をサービスセッションキーDにセットする。\n\nD		&GetTime:{ @DATE }{ MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがMINUTEの場合\n取得結果="22"となる。 \n
&GetValue:{ target }{ item } /// ターゲットマップの指定キーの値を返す。\n\n書式：\n\n&GetValue:{ target }{ item }\n\n引数：\n\n    target引数：Portfolio,Mapクラス\n    item引数：target引数がMapの時は、Mapに対するキーの値をセット、Portfolioのときは、ObservableProxyをセット\n\n返値：\n\n    MapのKeyに対応する値または、PortfolioのObservableProxyに対応する値を返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのMap内キー"AA"のitemをサービスセッションキーCにセットする。\n\nC	&GetValue:{ @A } { AA }\n\n
&GroupBy:{ portfolio }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }....{ PhenomenonTypeNameN } /// 軸となる項目の名前を指定してPortfolioをグループ化して返す。\n\n\n書式：\n\n&GroupBy:{ portfolio }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }....{ PhenomenonTypeNameN }\n\n引数：\n\n    portfolio引数　：　groupByを行う対象のポートフォリオ。\n    PhenomenonTypeName1...N引数　：　groupBy実行時の軸となる業務項目名。Stringもしくはpexa.share.util.Keyで指定する。\n\n返値：\n\n    指定された項目名でgroupByを実行した結果を格納したpexa.share.support.portfolio.Groupオブジェクト\n    portfolio引数がnullの場合はnullを返す。\n    PhenomenonTypeName1...N引数がnullの場合はnullを返す。\n\n例："targetPortfolio"に対して"税目"と"徴収区分"という項目を軸としてGroupByを実行する\n\n　　resultOfGroupBy　　"&GroupBy:{@targetPortfolio}{税目}{徴収区分}"\n\n
&GroupByPhenomenonTypeNames:{ portfolio }{ PhenomenonTypeNames } /// 軸となる項目名リストを指定してPortfolioをグループ化して返す。\n\n\n書式：\n\n&GroupByPhenomenonTypeNames:{ portfolio }{ PhenomenonTypeNames }\n\n引数：\n\n    portfolio引数　：　groupByを行う対象のポートフォリオ。\n    PhenomenonTypeNames引数　：　groupBy実行時の軸となる、業務項目名集合。Stringもしくはpexa.share.util.Keyの配列もしくはリストになる。\n\n返値：\n\n    指定された項目名リストでgroupByを実行した結果を格納したpexa.share.support.portfolio.Groupオブジェクト\n    portfolio引数がnullの場合はnullを返す。\n    PhenomenonTypeNames引数がnullの場合はnullを返す。\n\n例："targetPortfolio"に対して"ptypeNames"で指定された項目名リストでGroupByを実行する\n\n　　resultOfGroupBy　　"&GroupByPhenomenonTypeNames:{@targetPortfolio}{@ptypeNames}"\n\n
&GroupItem:{ group }{ key } /// グループから指定キーの値を返す。\n\n書式：\n\n&GroupItem:{ group }{ key }\n\n引数：\n\n    group引数 : 値の取得元のpexa.share.support.portfolio.Groupを指定\n    key引数 : GroupKeyのList or 配列\n\n返値：\n\n    グループから指定キーの値を返す。\n    group引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのGroupから指定キーを持つアイテムをサービスセッションキーCにセットする。\n\nC	&GroupItem:{ @A } { @Key } 	\n\n
&GroupPortfolios:{ group } /// グループからPortfolioの一覧を返す。\n\n\n書式：\n\n&GroupPortfolios:{ group }\n\n引数：\n\n    group引数　：　ポートフォリオ取得元のpexa.share.support.portfolio.Groupを指定\n\n返値：\n\n    Groupに格納されているpexa.share.support.portfolio.Portfolioを格納したjava.util.List\n    group引数がnullの場合はnullを返す。\n\n例：GroupByの実行結果からPortfolioのリストを取得する\n\n　　portfolios　　"&GroupPortfolios:{@resultOfGroupBy}"\n\n
&IdentSeqStr:{ seqName }{ IdentifedFlag } /// IdentifiedProxyコンストラクト用の文字列を返す。\n\n書式：\n\n&IdentSeqStr:{ seqName }{ IdentifedFlag }\n\n引数：\n\n    引数の型：seqName引数はObject\n    IdentifedFlag引数はObject\n\n返値：\n\n    seqName引数の文字列のSequencerからの値とIdentifedFlagの文字列からなるIdentifiedProxyコンストラクト用の文字列を返す。\n    引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列のから取得したSequencer値とAAの結合文字列ムをサービスセッションキーCにセットする。\n\nC	&IdentSeqStr:{@A}{AA}\n\n
&In:{ 基準MODELS }{ 評価対象MODELS }{ filter } /// 基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.TRUEを返す。\n\n書式：\n\n&In:{ 基準MODELS }{ 評価対象MODELS }{ filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.TRUEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    Filter引数が指定された場合、基準MODELSの各MODELをパラメータにfilterを生成して、評価対象MODELSに存在した場合BOOLEAN.TRUEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    上記以外の場合はBoolean.FALSEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でFALSEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&In:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&In:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
&Inc:{ p1 } /// 引数を一つとりそれを＋１して返す。\n\n書式：\n\n&Inc:{ p1 }\n\n引数：\n\n    p1引数：インクリメントするNumberオブジェクト\n\n返値：\n\n    引数と同じNumberクラスで引数の値を＋１して返す。\n    変換ではLongクラスを使用しているため、整数で計算されます。\n    引数が、nullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容を＋１してサービスセッションキーCにセットする。\n\nC	&Inc:{ @A }\n\n
&IndexOf:{ sourceStirng }{ searchStirng }{ startPos } /// 文字列内の指定文字列の位置を取得し返す。\n\n書式：\n\n&IndexOf:{ sourceStirng }{ searchStirng }{ startPos }\n\n引数：\n\n    sourceStirng引数は、文字列（toString()で取得できるもの）\n    searchStirng引数は、文字列（toString()で取得できるもの）\n    startPos引数は、Number、Stringクラス（Stringは数値文字列）省略可\n\n返値：\n\n    型：Integerクラス\n    sourceStirng引数の文字列内のsearchStirng引数の文字列が含まれる位置を返す。\n    startPos引数以外がnullの場合は、nullを返す。\n\n例：\n
&InsertItem:{ targetList }{ insertItem }{ insertIndex } /// ターゲットリストの指定インデックスに指定アイテムを挿入する。\n\n書式：\n\n&InsertItem:{ targetList }{ insertItem }{ insertIndex }\n\n引数：\n\n    targetList引数：操作対象Listとなる、java.util.List\n    insertItem引数：targetListに挿入する任意のオブジェクト\n    insertIndex引数：insertItemの挿入インデックスを表すIntegerやString等\n\n返値：\n\n    targetListにinsertItemを挿入した結果のjava.util.List。\n    もしtargetList、insertItem、insertIdexがnullの場合は、nullを返す。\n\n例：@AListに対して、@AItemをインデックス@AIndexに挿入して、サービスセッションキーCに追加後のListをセットする。\n\nC　　&InsertItem:{@AList}{@AItem}{@AIndex}\n\n
&Last:{ target } /// リストの最後のアイテムを返す。\n\n書式：\n\n&Last:{ target }\n\n引数：\n\n    target引数：Portfolio,Collection,配列\n\n返値：\n\n    targetのPortfolio,配列,Collectionから最後のitemを取得し返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのList内の最後アイテムをサービスセッションキーCにセットする。\n\nC	&Last:{ @A }\n\n
&LastIndexOf:{ sourceStirng }{ searchStirng }{ startPos } /// 文字列内の指定文字列の最後の位置を取得し返す。\n\n書式：\n\n&LastIndexOf:{ sourceStirng }{ searchStirng }{ startPos }\n\n引数：\n\n    sourceStirng引数：文字列（toString()で取得できるもの）\n    searchStirng引数：文字列（toString()で取得できるもの）\n    startPos引数：Number、Stringクラス（Stringは数値文字列）省略可\n\n返値：\n\n    型：Integerクラス\n    sourceStirng引数の文字列内のsearchStirng引数の文字列が最後に含まれる位置を返す。\n    startPos引数を指定したときは、その位置以降の文字列を検索する。\n    startPos引数以外がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列内の"AA"の位置をサービスセッションキーCにセットする。\n\nC	&LastIndexOf:{ @A }{ AA }\n\n
&List:{size} /// 空のListを生成し返す。\n\n書式：\n\n&List:{size}\n\n引数：\n\n    size引数は、Numberまたは数値文字列、省略可\n\n返値：\n\n    空のListを生成し返す。\n\n例：空のリストををサービスセッションキーCにセットする。\n\nC	&List\n\n
&Length:{ sourceString } /// 文字列の文字数をカウントしてjava.lang.Integerで返す。\n\n書式：\n\n&Length:{ sourceString }\n\n引数：\n\n    sourceString引数：文字数を数えたい文字列。\n\n返値：\n\n    sourceStringの文字数を表すjava.lang.Integer。全角文字でも半角文字でも１文字として数える。\n    sourceStringがnullの場合は、nullを返す。\n    sourceStringがString以外のオブジェクトの場合はエラーを返す。\n\n例：\n\n文字数　　"&Length:{@文字数が知りたい文字列}"\n\n
&ListIndexOf:{ targetList }{ targetItem } /// リスト内の指定オブジェクトの位置を取得して返す。\n\n書式：\n\n&ListIndexOf:{ targetList }{ targetItem }\n\n引数：\n\n    targetList引数：インデックスチェック対象Listとなる、java.util.List\n    targetItem引数：targetList内の位置(インデックス)を知りたいオブジェクト\n\n返値：\n\n    インデックスを表すjava.lang.Integer。\n    もしtargetListやtargetItemがnullの場合は、nullを返す。\n\n例：@AList内の@AItemの位置（格納インデックス）を取得して、セッションキーCにセットする。\n\nC　　&ListIndexOf:{@AList}{@AItem}\n\n
&Map:{size} /// 空のMapを生成し返す。\n\n書式：\n\n&Map:{size}\n\n引数：\n\n    size引数は、Numberまたは数値文字列、省略可\n\n返値：\n\n    空のMapを生成し返す。\n\n例：空のMapををサービスセッションキーCにセットする。\n\nC	&Ma\n\np
&MapKeySet:{ map } /// ターゲットマップに格納されているキーの集合をSetとして返す。\n\n\n書式：\n\n&MapKeySet:{ map }\n\n引数：\n\n    map引数　：　キー集合を取得したいターゲットのマップ。\n\n返値：\n\n    指定されたMapに格納されているキーの集合。Setとして返される。\n    map引数がnullの場合はnullを返す。\n\n例："cacheMap"というセッションキーで保持されているマップからキー集合を取得する。\n\n　　CacheKeys　　"&MapKeySet:{@cacheMap}"\n\n
&MapValues:{ map } /// ターゲットマップに格納されている値の集合をListとして返す。\n\n\n書式：\n\n&MapValues:{ map }\n\n引数：\n\n    map引数　：　値の集合を取得したいターゲットのマップ。\n\n返値：\n\n    指定されたMapに格納されている値の集合。Listとして返される。\n    map引数がnullの場合はnullを返す。\n\n例："cacheMap"というセッションキーで保持されているマップから値の集合を取得する。\n\n　　CacheValues　　"&MapValues:{@cacheMap}"\n\n
&Max:{ target } ///     リスト内の最大値を返す。\n\n    書式：\n\n    &Max:{ target }\n\n    引数：\n\n        target引数はCollection,配列\n\n    返値：\n\n        target引数のCollection、配列内の各値の最大値を返す。\n        Collection,配列の要素はComparableである必要がある。\n        target引数がnullの場合は、nullを返す。\n\n    例：Aサービスセッションキーリスト内の最大値をサービスセッションキーCにセットする。\n\n    C	&Max:{ @A }\n\n\n\n
&MessageDigest:{ target }{ keyword }{ algorithm } ///     パスワード・キーワードを基に指定のアルゴリズムを使用して暗号化文字列を返す。\n    Java.security.MessageDigestを利用して暗号化を行います。\n\n    書式：\n\n    &MessageDigest:{ target }{ keyword }{ algorithm }\n\n    引数：\n\n        target引数はパスワードの文字列（必須）\n        keyword引数は暗号化のキーワード文字列（必須）\n        algorithm引数は環濠かアルゴリズム名文字列（MD2/MD5/SHA-1/SHA-256/SHA-384）省略時はMD5です。（非必須）\n\n    返値：\n\n        暗号化した１６進数文字列を返す。\n\n    例：S1サービスセッション内のパスワード、固定キーワード・暗号化アルゴリズムSHA-256で暗号化文字列サービスセッションキーSWにセットする。\n\n    SW		&MessageDigest:{@S1}{'PexaWorks2'}{'SHA-256'}\n\n\n\n
&Min:{ target } /// リスト内の最小値を返す。\n\n書式：\n\n&Min:{ target }\n\n引数：\n\n    target引数はCollection,配列\n\n返値：\n\n    target引数のCollection、配列内の各値の最小値を返す。\n    Collection,配列の要素はComparableである必要がある。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリスト内の最小値をサービスセッションキーCにセットする。\n\nC	&Min:{ @A }\n\n
&MonthOfYear:{ date } /// 指定日がその年の何月かをpexa.share.util.business.MonthOfYearで取得する\n\n書式：\n\n&MonthOfYear:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその年の第何週目であるかを表すpexa.share.util.business.MonthOfYearオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその年の何月かを取得する場合\n\n今日がその年の何月か　　"&WeekOfMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、MonthOfYear.MARCHが取得される。 \n
&MonthOfFromTo:{ from }{ to } ///     指定の２つの日付間が何ヶ月かをjava.lang.Integerで取得する\n\n    書式：\n\n    &MonthOfFromTo:{ from }{ to }\n\n    引数：\n\n        from引数：月数を取得したい日付のfrom側をあらわすpexa.share.util.cont.YearMonthオブジェクト。\n        to引数：月数を取得したい日付のto側をあらわすpexa.share.util.cont.YearMonthオブジェクト。\n\n    返値：\n\n        fromとtoの間が何ヶ月あるかを表すjava.lang.Integer値\n        from, toがnullの場合は、nullを返す。\n        from, toがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n    例：発注月から今月までに経過した月数を取得する\n\n    発注後経過月数　　"&MonthOfFromTo:{@発注月}{@今月}"\n\n    @発注月が2014/1で今月が2015/3の場合はjava.lang.Integerで"14"を返す。\n\n\n\n
&Much:{ 基準MODELS }{ 評価対象MODELS }{ Filter } /// 基準MODELSと評価対象MODELSの内容が一致すればBOOLEAN.TRUEを返す。\n\n書式：\n\n&Much:{ 基準MODELS }{ 評価対象MODELS }{ Filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSと評価対象MODELSに含まれるObservableの内容を比較して数が一致かつ、 基準MODELSの各要素毎にequalsな要素が評価対象MODELSにあった場合はBoolean.TRUEを返す。\n    Filter引数が指定された場合、基準MODELSと評価対象MODELSに含まれるObservableの内容を比較して数が一致かつ、 基準MODELSの各要素毎に基準MODELSの現象型値を展開したFilterを評価して真になる要素が評価対象MODELSにあった場合はBoolean.TRUEを返す。\n    上記以外の場合はBoolean.FALSEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でFALSEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&Much:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&Much:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
&Mul:{ s1 }{ s2 } /// 引数を二つとり、最初の引数の結果＊二番目の引数結果を返す。\n\n書式：\n\n&Mul:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：java.lang.Numberのサブクラス\n    s2引数：Numberもしくは文字列（数値を表すもののみ）\n\n返値：\n\n    s1引数と同じNumberのクラスでs1引数とs2引数の掛算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n    s1がBigDecimal時返値のスケールは、java.math.BigDecimalのデフォルト動作(s1.scale() + s2.scale())となります。\n\n例：A／BサービスセッションキーのNumberを掛算して,サービスセッションキーCにセットする。\n\nC	&Mul:{ @A } {@ B }\n\n
&Neg:{ p1 } /// 引数を一つとり、その引数の符号を反転した内容を返す。\n\n書式：\n\n&Neg:{ p1 }\n\n引数：\n\n    p1引数：Numberクラスのオブジェクト\n\n返値：\n\n    p1引数と同じNumberクラスでp1引数の値の符号を反転して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容を符号反転してサービスセッションキーCにセットする。\n\nC	&Neg:{ @A }\n\n
&NextDay /// 評価時の翌日かつam00:00:00のjava.util.Dateを返す。\n\n書式：\n\n&NextDay\n\n引数：\n\n    なし\n\n返値：\n\n    評価時の翌日かつam00:00:00のDateオブジェクトを返す。\n\n例：翌日のDateクラスをサービスセッションキーCにセットする。\n\nC	&NextDay\n\n
&NotIn:{ 基準MODELS }{ 評価対象MODELS }{ filter } /// 基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.FALSEを返す。(&Inの逆)\n\n書式：\n\n&NotIn:{ 基準MODELS }{ 評価対象MODELS }{ filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.FALSEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    Filter引数が指定された場合、基準MODELSの各MODELをパラメータにfilterを生成して、評価対象MODELSに存在した場合BOOLEAN.FALSEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    上記以外の場合はBoolean.TRUEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でTRUEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&NotIn:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&NotIn:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
&NotMuch:{ 基準MODELS }{ 評価対象MODELS }{ Filter } /// 基準MODELSと評価対象MODELSの内容が一致したらBOOLEAN.FALSEで返す。(&Muchの逆)\n\n書式：\n\n&NotMuch:{ 基準MODELS }{ 評価対象MODELS }{ Filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSと評価対象MODELSの数が一致していないか、一致していても基準MODELSの各要素に equalsな要素が評価対象MODELSに無い場合にBOOLEAN.TRUEで返す。\n    Filter引数が指定された場合、基準MODELSと評価対象MODELSの数が一致していないか、一致していても基準MODELSの各要素を パラメータに導出したfilterに対して評価対象のMODELSにfilterの評価が真になる要素が一つも無い場合にBOOLEAN.TRUEを返す。\n    上記以外の場合はBoolean.FALSEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でTRUEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&NotMuch:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&NotMuch:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
&Now /// 評価時の日時を表すjava.util.Dateを返す。\n\n書式：\n\n&Now\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の日時を表すjava.util.Dateを返す。\n\n例：評価時の日時のDateクラスをサービスセッションキーCにセットする。\n\n>C	&Now\n\n例：作成日サービスセッションが評価時の日時以降かを比較する\n\nfilter    "@作成日 >= &Now"\n\n
&Null /// nullを返す。\n\n書式：\n\n&Null\n\n引数：\n\n    無し\n\n返値：\n\n    nullを返す。\n    mapping,sessionの項目設定例外処理時("|"の後)で指定すると、何もしないことを表す。\n    ServiceSession条件式では使用できない。\n\n例：サービスセッションキーCにNullをセットする。\n\nC	&Null\n\n
&ObservableProxy:{ target_model } ///  ターゲットモデルのプライマリキー値(Proxyオブジェクト)を取得する。\n\n\n書式：\n\n&ObservableProxy:{ target_model }\n\n引数：\n\n    target_model引数：プライマリキー値を取得したいデータモデル\n\n返値：\n\n    target_model引数で指定されたデータモデルのプライマリキー値(Proxyオブジェクト)を返す。\n    target_model引数がnullの場合はnullを返す。\n\n例：AキーのデータモデルのProxyオブジェクトをBキーに返す\n\nB	&ObservableProxy:{ @A }\n\n
&Path:{ model(models) }{ path } /// Modelにパス式（現象型のみの指定を含む）を適用した結果を返す。\n\n書式：\n\n&Path:{ model(models) }{ path }\n\n引数：\n\n    model(models)引数　：　パス式を適用する対象の単体モデル、もしくはモデル集合(リストなど)。\n    path引数　：　モデルに対して適用する現象型パス式。そのモデルが持つ現象型のみの指定も可。\n\n返値：\n\n    パス式をモデルに適用した結果取得された現象型の値\n    単体モデルに対してパスを適用した場合、パス中にMultipleの現象型が含まれるかどうかで結果が単値になるか複数値が決まります。\n    モデル集合に対してパスを適用した場合、結果は必ず複数値になります。\n    modelがnullの場合は、値はnullになる。\n    pathがnullの場合は、エラーになる。\n\n例１　：　単体モデルに対してパス式でモデル作成者の名前を取得\n\n　　パス適用結果(単値)　　"&Path:{@Order}{Creator/UserName}"\n\n\n例２　：　モデル集合に対してパス式でOrderNoのリストを取得\n\n　　パス適用結果(複数値)　　"&Path:{@OrderList}{OrderNo}"\n\n
&PhenomenonTypeNameKeys:{ source } /// 引数で指定されたデータモデルが持つ現象型のキー配列を返す。\n\n書式：\n\n&PhenomenonTypeNameKeys:{ source }\n\n引数：\n\n    source引数：現象型キー配列の取得元のObservable,Portfolio\n\n返値：\n\n    source引数で指定されたデータモデルが持つ現象型のキー配列\n\n例：セッション上に保持されているデータモデルから現象型キー配列を取得\n\nPtypeKeys	&PhenomenonTypeNameKeys:{@データモデル}\n\n
&Portfolio:{ filter(optional) }{prefetch(optional) }{ distinct(optional) } /// 新規のPortfolioを生成し返す。\n\n書式：\n\n&Portfolio:{ filter(optional) }{prefetch(optional) }{ distinct(optional) }\n\n引数：\n\n    filter引数：Portfolioが対象を絞り込むためのFilter文字列もしくはFilterオブジェクト(省略可)\n    prefetch引数：Portfolioがprefetchする現象型名のString,String[],Setオブジェクト(省略可)\n    disinct引数：Portfolioがdistinctする現象型名のString,String[],Setオブジェクト(省略可)\n\n返値：\n\n    変換対象を、指定引数のPortfolioクラス生成し、Portfolioクラスを返す。\n\n例：PortfolioクラスでサービスセッションキーCにセットする。\n\nC	&Portfolio\n\n
&PortfolioObservables:{ portfolio } /// Portfolioに格納されているデータモデルの一覧を返す。\n\n\n書式：\n\n&PortfolioObservables:{ portfolio }\n\n引数：\n\n    portfolio引数　：　データモデルを取り出したいpexa.share.support.portfolio.Portfolioを指定\n\n返値：\n\n    Portfolioに格納されているデータモデルを格納したjava.util.List\n    portfolio引数がnullの場合はnullを返す。\n\n例：Portfolioから元データのリストを取得する\n\n　　SourceDataModelList　　"&PortfolioObservables:{@portfolio}"\n\n
&PrimaryKeyName:{ target_model } ///  ターゲットモデルのプライマリキー項目名を取得する。\n\n\n書式：\n\n&PrimaryKeyName:{ target_model }\n\n引数：\n\n    target_model引数：プライマリキー項目名を取得したいデータモデル\n\n返値：\n\n    target_model引数で指定されたデータモデルのプライマリキー項目名(String)を返す。\n    target_model引数がnullの場合はnullを返す。\n\n例：Aキーのデータモデルのプライマリキー項目名をBキーに返す\n\nB	&PrimaryKeyName:{ @A }\n\n
&Property:{ propertyKey } /// 実行時パラメータやpexa_plugins.entryファイル中の設定値を取得する。\n\nこのDirectiveは、アプリケーションに対するパラメータ値を取得するために使用します。\n以下の順番で、指定されたプロパティキーの値を探します。\n\n    アプリケーション実行時のJVM起動パラメータ(-Dxxxと指定されるパラメータ)\n    pexa_plugins.entryファイル(リポジトリ中のsrc/plugins/pexa_plugins.entry)\n\n\n書式：\n\n&Property:{ propertyKey }\n\n引数：\n\n    propertyKey引数　：　取得したいプロパティ値のキー。必須。\n\n返値：\n\n    指定されたキーの値。値は文字列、Map、Listのいずれかとなる。\n    propertyKey引数がnullの場合はエラーを返す。\n\n例："restriction_model_name"というキーでJVMパラメータもしくはpexa_plugins.entryファイルから取得する\n\n　　RestrictionModelName　　"&Property:{restriction_model_name}"\n\n
&Proxy:{ ProxyPtpyeName }{ IdentifiedString } /// 指定されたProxyオブジェクトを採番して返す。Identified付きにも対応。\n\n書式：\n\n&Proxy:{ ProxyPtpyeName }{ IdentifiedString }\n\n引数：\n\n    ProxyPtpyeName引数　：　Proxy現象型名を指定する。必須。\n    IdentifiedString引数　：　Identifiedが付かないProxyの場合は省略する。Identified付きのProxyの場合は、Identified値の文字列表現を指定する。\n\n返値：\n\n    採番された結果のProxyオブジェクト\n    ProxyPtpyeName引数がnullの場合はエラーを返す。\n    Identified付きのProxyなのにIdentifiedString引数がnullの場合はエラーを返す。\n\n例：\n\n　　OrderNo　　"&Proxy:{OrderNo}{PRESCRIPTION}"\n\n
&Put:{ TargetMap }{ Key }{ Value } /// マップにキー、値をセットして返す。\n\n書式：\n\n&Put:{ TargetMap }{ Key }{ Value }\n\n引数：\n\n    TargetMap引数：key,valueをputする対象のMa\np    Key引数：putするキーオブジェクト\n    Value引数：putする値オブジェクト\n\n返値：\n\n    target引数のMpにkey,value引数の値をセットし、その結果のMapを返す。\n    Key,Value引数が、nullの場合は、TargetMapをそのまま返す。\n\n例：AサービスセッションキーのMapにB,Dサービスセッションキーの値をセットし、サービスセッションキーCにセットする。\n\nC	&Put:{ @A } {@ B }{ @D }\n\n
&Read:{ file }{ type }{ encoding } /// ファイルを読み込んで、その内容を返す。\nテキストファイルとして読み込んでjava.lang.Stringで返すか、\nバイナリファイルとして読み込んでpexa.share.util.cont.Binaryで返すかをtype指定できる\n\n書式：\n\n&Read:{ file }{ type }{ encoding }\n\n引数：\n\n    file引数：読み込み対象のファイルを表す文字列(絶対パス指定)もしくはjava.io.File\n    type引数：読み込みタイプの指定。以下の２つが指定できる。\n        String : テキストファイルとして読み込む。\n        Binary : バイナリファイルとして読み込む。\n    encoding引数:type引数がStringの場合に読み込みエンコーディングを指定する。(省略可)\n\nencoding引数の省略時はプラットフォームのデフォルトエンコーディングで読み込まれる。\n\n返値：\n\n    type引数がStringの場合は、読み込み結果をjava.lang.Stringで返す。\n    type引数がBinaryの場合は、読み込み結果をpexa.share.util.cont.Binaryで返す。\n\n例：Aファイルの内容をUTF-8エンコーディングでStringとして読み込んでCに返す\n\nC	&Read:{ @A }{ String }{ UTF-8 }\n\n例：Aファイルの内容をBinaryとして読み込んでCに返す\n\nC	&Read:{ @A }{ Binary }\n\n
&Rem:{ s1 }{ s2 } /// 引数を二つとり、最初の引数 ％ 二番目の引数を返す。(余剰計算)\n\n書式：\n\n&Rem:{ s1 }{ s2 }\n\n&Rem:{ s1 }{ s2 }{ precision }\n\n&Rem:{ s1 }{ s2 }{ precision }{ round }\n\n引数：\n\n    s1引数：余剰計算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    precision引数:s1引数がBigDecimalの値の場合に、余剰計算結果の精度を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、余剰計算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nprecision引数およびround引数は省略可能。ただし、round引数指定時はprecision引数は必須。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の余剰計算の結果(割り算の余り)を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを余剰計算して,サービスセッションキーCにセットする。\n\nC	&Rem:{ @A }{@ B }\n\n例：BigDecimalの値をprecisionで５に指定して余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をprecisionで５に指定して、丸めモードを切り捨て(DOWN)で余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }{ DOWN }\n\n
&Rem:{ s1 }{ s2 }{ precision } /// 引数を二つとり、最初の引数 ％ 二番目の引数を返す。(余剰計算)\n\n書式：\n\n&Rem:{ s1 }{ s2 }\n\n&Rem:{ s1 }{ s2 }{ precision }\n\n&Rem:{ s1 }{ s2 }{ precision }{ round }\n\n引数：\n\n    s1引数：余剰計算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    precision引数:s1引数がBigDecimalの値の場合に、余剰計算結果の精度を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、余剰計算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nprecision引数およびround引数は省略可能。ただし、round引数指定時はprecision引数は必須。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の余剰計算の結果(割り算の余り)を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを余剰計算して,サービスセッションキーCにセットする。\n\nC	&Rem:{ @A }{@ B }\n\n例：BigDecimalの値をprecisionで５に指定して余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をprecisionで５に指定して、丸めモードを切り捨て(DOWN)で余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }{ DOWN }\n\n
&Rem:{ s1 }{ s2 }{ precision }{ round } /// 引数を二つとり、最初の引数 ％ 二番目の引数を返す。(余剰計算)\n\n書式：\n\n&Rem:{ s1 }{ s2 }\n\n&Rem:{ s1 }{ s2 }{ precision }\n\n&Rem:{ s1 }{ s2 }{ precision }{ round }\n\n引数：\n\n    s1引数：余剰計算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    precision引数:s1引数がBigDecimalの値の場合に、余剰計算結果の精度を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、余剰計算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nprecision引数およびround引数は省略可能。ただし、round引数指定時はprecision引数は必須。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の余剰計算の結果(割り算の余り)を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを余剰計算して,サービスセッションキーCにセットする。\n\nC	&Rem:{ @A }{@ B }\n\n例：BigDecimalの値をprecisionで５に指定して余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をprecisionで５に指定して、丸めモードを切り捨て(DOWN)で余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }{ DOWN }\n\n
&Remove:{ Source }{ Position } /// リストから指定位置のアイテムを削除する。\n\n書式：\n\n&Remove:{ Source }{ Position }\n\n引数：\n\n    Source引数：List,Portfolioクラス\n    Position引数：Numberクラス、数値文字列\n\n返値：\n\n    Source引数の指定位置の要素を削除し、削除した要素を返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの2番目の要素を削除して,削除した要素をサービスセッションキーCにセットする。\n\nC	&Remove:{ @A } { 2 }\n\n
&RemoveAllItem:{ target }{ item } /// リストから指定アイテムリストと一致したものを削除して返す。\n\n書式：\n\n
&RemoveAllItem:{ target }{ item }\n\n引数：\n\n    target引数：操作対象のCollectionオブジェクト\n    item引数：削除対象のアイテムが格納されているCollectionオブジェクト\n\n返値：\n\n    target引数のCollectionからitem引数のCollectionの要素を削除し、その結果のCollectionを返す。\n    target引数がnullの場合は、nullを返す。\n    item引数がnullの場合は、targetを返す。\n\n例：AサービスセッションキーのCollectionからBサービスセッションキーのCollectionの要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveAllItem:{ @A } { @B }\n\n
&RemoveFirst:{ Source } /// リストの先頭のアイテムを削除して返す。\n\n書式：\n\n&RemoveFirst:{ Source }\n\n引数：\n\n    Source引数：操作対象のList,Portfolio\n\n返値：\n\n    Source引数の先頭の要素を削除し、結果を返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの先頭の要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveFirst:{ @A }\n\n
&RemoveItem:{ target }{ item } /// リストから指定アイテムと一致したものを削除して返す。\n\n書式：\n\n&RemoveItem:{ target }{ item }\n\n引数：\n\n    target引数：操作対象のCollection\n    item引数：targetから削除する対象のアイテム\n\n返値：\n\n    target引数のCollectionからitem引数の要素を削除し、結果のSourceを返す。\n    target引数がnullの場合は、nullを返す。\n    item引数がnullの場合は、targetを返す。\n\n例：AサービスセッションキーのCollectionからBサービスセッションキーの要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveItem:{ @A } { @B }\n\n
&RemoveLast:{ Source } /// リストの最後のアイテムを削除して返す。\n\n書式：\n\n&RemoveLast:{ Source }\n\n引数：\n\n    Source引数：操作対象のList,Portfolioクラス\n\n返値：\n\n    Source引数の最後の要素を削除し、結果のSourceを返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの最後の要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveLast:{ @A }\n\n
&RemovePortfolio:{ target }{ item } /// Portfolioから指定アイテムと一致したものを削除して返す。\n\n書式：\n\n&RemovePortfolio:{ target }{ item }\n\n引数：\n\n    target引数：操作対象のPortfolio\n    item引数：削除対象アイテム\n\n返値：\n\n    target引数のPortfolioからitem引数の要素を削除し、結果を返す。\n    target引数が、nullの場合は、nullを返す。\n    item引数が、nullの場合は、targetを返す。\n\n例：AサービスセッションキーのPortfolioからBサービスセッションキーの要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemovePortfolio:{ @A } { @B }\n\n
&Return /// 対象のサービスを正常終了する。\n\n書式：\n\n&Return\n\n引数：\n\n    無し\n\n動作：\n\n    before_condition, after_conditionセクションのerrorで使用し、対象のサービスを正常終了する\n\n例：\n\n(before_condition\n    filter    "@AAA is not null"\n    error     &Return\n)\n\n
&Search:{ modelName }{ filter }{ ext_filter }{ sortList } /// モデルの検索、ソート結果(optional)を返す。\n\n注意：\nこのDirectiveは、前提条件や終了条件の判定でモデル検索が必要な場合にのみ使用すること！\nSVOステートメントで表されるモデル操作処理の実装はこのディレクティブではなくサービスプロセスで表現してください。\n\n書式：\n\n&Search:{ modelName }{ filter }{ ext_filter }{ sortList }\n\n引数：\n\n    modelName引数　：　検索対象のモデル名の指定。必須。\n    filter引数　：　Storageに対する検索条件の指定。指定しない場合は空白(Parameterとしては必須）。\n    ext_filter引数　：　Storage対象外の検索条件。指定しない場合は空白(Parameterとしては必須）。\n    sort_list引数　：　ソート文字列のList(降順の場合は先頭に'~'をつける）。指定しない場合は、Parameterとしても省略可。\n\nfilter引数およびext_filter引数は無指定も可能だが、その場合は空白の括弧は付けること。\nsort_list引数は括弧ごと省略することも可能。\n\n返値：\n\n    検索結果を格納したList\n\n\n例１　：　検索条件、ソート条件無しの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{}{}"\n\n例２　：　Storageに対する検索条件あり、ソート条件無しの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{RemovedFlag = NOT_REMOVED}{}"\n\n例３　：　Storageに対する検索条件あり、Storage対象外の検索条件あり、ソート条件無しの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{RemovedFlag = NOT_REMOVED}{CurrentAge > 20}"\n\n例４：検索条件、ソート条件有りの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{RemovedFlag = NOT_REMOVED}{CurrentAge > 20}{FirstName, LastName}"\n\n
&SeqMap:{ size } /// 空のMap(順序保証有り)を生成し返す。\n\n書式：\n\n&SeqMap:{ size }\n\n引数：\n\n    size引数：Numberまたは数値文字列、省略可\n\n返値：\n\n    空のMap(順序保証有り)を生成し返す。\n\n例：空の順序保証有りMapををサービスセッションキーCにセットする。\n\nC	&SeqMa\n\np
&Sequencer:{ seqNqme } /// 指定した通番名のユニーク番号を返す。\n\n書式：\n\n&Sequencer:{ seqNqme }\n\n引数：\n\n    seqNqme引数：採番名を表す文字列\n\n返値：\n\n    SequencerからseqName引数の文字列の通番名でユニーク番号を取得してNumberオブジェクトとして返す\n    seqName引数がnullの場合は、nullを返す。\n\n例：会計部門Noを通番名としてユニーク番号をサービスセッションキーCにセットする。\n\nC	&Sequencer:{ 会計部門No }\n\n
&SessionFilterAnd:{ leftFilter }{ rightFilter } /// ２つのSession条件式フィルタをandで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&SessionFilterAnd:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　andの左側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n    rightFilter引数　：　andの右側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n\n返値：\n\n    ２つのSession条件式フィルタをandで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　and連結フィルタ　　"&SessionFilterAnd:{@SearchResultList is not null}{@SortRuleList is not null}"\n\n
&SessionFilterOr:{ leftFilter }{ rightFilter } /// ２つのSession条件式フィルタをorで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&SessionFilterOr:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　orの左側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n    rightFilter引数　：　orの右側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n\n返値：\n\n    ２つのSession条件式フィルタをorで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　or連結フィルタ　　"&SessionFilterOr:{@SearchResultList is not null}{@SortRuleList is not null}"\n\n
&Set:{ size } ///     空のSetを生成し返す。\n\n    書式：\n\n    &Set:{ size }\n\n    引数：\n\n        size引数：Numberまたは数値文字列、省略可\n\n    返値：\n\n        空のSetを生成し返す。\n\n    例：空のSetをサービスセッションキーCにセットする。\n\n    C	&Set\n\n\n\n
&SetObservation:{ TargetModel }{ PhenomenonTypeName }{ Value }{ Condition(Optional) } /// ターゲットモデルが持つ現象型にCondition付きで値を設定する。\n値を設定する対象の現象型自体をパラメータ化したい場合や、 数種類のConditionをあらかじめセッション上に作成した上でTrigger付き項目に設定したい場合に使用してください。\n\n書式：\n\n&SetObservation:{ TargetModel }{ PhenomenonTypeName }{ Value }{ Condition(Optional) }\n\n引数：\n\n    TargetModel引数：値の取得元データモデル。\n    PhenomenonTypeName引数：TargetModel引数のデータモデルへ値を設定したい現象型名。\n    Value引数：TargetModel引数のPhenomenonTypeName引数の現象型に設定したい値。\n    Condition引数：非必須。Triggerに渡したいConditionを表すObservable。\n\n返値：\n\n    値が設定された結果のデータモデル\n    TarSetModel引数、PhenomenonTypeName引数がnullの場合は値を設定しない\n    Value引数がnullの場合はnull値が指定された現象型にを設定される\n\n例：AセッションキーのデータモデルのBセッションキーの現象型にCセッションキーの値が設定されてDセッションキーに設定結果のデータモデルを返す\n\nD	&SetObservation:{ @A } { @B }{ @C }\n\n例：AセッションキーのデータモデルのBセッションキーの現象型にCセッションキーの値がDセッションキーのCondition付きで設定されてEセッションキーに設定結果のデータモデルを返す\n\nE	&SetObservation:{ @A } { @B }{ @C }{ @D }\n\n
&Size:{ Source } /// 引数を一つとり、リストの要素数を返す。\n\n書式：\n\n&Size:{ Source }\n\n引数：\n\n    Source引数は、Collection,Poefolio,Groupクラス、配列\n\n返値：\n\n    Source引数のオブジェクトに格納されている要素数を返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの要素数をサービスセッションキーCにセットする。\n\n>C	&Size:{ @A }\n\n
&Skip /// 対象のプロセス・サービスをスキップする。\n\n書式：\n\n&Ski\n\np引数：\n\n    無し\n\n動作：\n\n    before_condition,after_conditionのerrorで使用すると、対象のプロセス・サービスをスキップする。\n    mapping,sessionの項目設定例外処理時("|"の後)で利用すると、その行の処理をスキップする。\n\n例：conditionで指定\n\n(before_condition\n    filter    "@AAA is not null"\n    error     &Ski\np)\n\n例：sessionで指定\n\n(session\n    (session_keys\n        AAA		"[@XXX is not null]@XXX|&Skip"\n        BBB		"[@YYY is not null]@YYY|&Skip"\n    )\n)\n\n
&SnapCollection:{ target }{ startPosition }{ endPosition } /// Collection,配列から指定位置範囲の要素をCollection,配列で返す。\n\n書式：\n\n&SnapCollection:{ target }{ startPosition }{ endPosition }\n\n引数：\n\n    target引数：Collection,配列クラス\n    startPosition引数：コピー範囲の開始位置、先頭を0として。\n    endPosition引数：コピー範囲の終了位置、省略時はCollection,配列のサイズ分になる。省略可。\n\n返値：\n\n    target引数の内容から指定範囲の要素を持つCollection,配列を返す。\n    target引数がCollectionのときは、結果としてCollectionで、配列の時は、結果として配列で戻す。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリスト(Collection（Size10））をStartに2，Endに4をセットするとその結果としてA内の先頭を0番目として2番目・3番目の要素を入れたCollectionをサービスセッションキーCにセットする。\n\nC	&SnapCollection:{ @A }{ @Start }{ @End}\n\n
&Sort:{ target }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }...{ PhenomenonTypeNameN } ///     モデルリストを指定キーでソートして返す。\n\n    書式：\n\n    &Sort:{ target }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }...{ PhenomenonTypeNameN }\n\n    引数：\n\n        target引数：モデルが格納されたCollection,配列,Portfolioクラス\n        PhenomenonTypeName1...N引数：ソート条件にする現象型のKeyまたは文字列。降順にしたい場合は現象型名の前に「~」を付加する。\n\n    返値：\n\n        target引数の内容を指定現象型でソートした結果を返す。\n        targetのCollection,配列,Portfolioの要素はデータモデルである必要がある。\n        target引数がnullの場合は、nullを返す。\n\n    注意：targetがPortfolioのCollectionでソート条件の現象型が数値の場合、比較される値は該当現象型の総和になります。 例：Aサービスセッションキーリスト(モデルリスト）を会計部門Noでソートしその結果をサービスセッションキーCにセットする。\n\n    C	&Sort:{ @A }{ 会計部門No }\n\n    例：Aサービスセッションキーリスト(モデルリスト）を会計部門Noの降順でソートしその結果をサービスセッションキーCにセットする。\n\n    C	&Sort:{ @A }{ ~会計部門No }\n\n\n\n
&SortByPhenomenonTypeNames:{ target }{ PhenomenonTypeNames }{ nullIsMinimum } /// モデルリストをソート項目名リストでソートして返す。\n\n書式：\n\n&SortByPhenomenonTypeNames:{ target }{ PhenomenonTypeNames }{ nullIsMinimum }\n\n引数：\n\n    target引数：モデルが格納されたCollection,配列,Portfolioクラス\n    PhenomenonTypeNames引数：ソート条件となる現象型名を格納したリスト。リストの順番がそのままソート項目順を表す。降順にしたい場合は個々の現象型名の前に「~」を付加する。\n    nullIsMinimum引数：比較値の片方がnullだった場合に、最小値扱いとするか最大値扱いとするかを指定できる。trueなら最小（デフォルト）、falseなら最大扱い。省略可。\n\n返値：\n\n    target引数の内容を指定現象型でソートした結果を返す。\n    targetのCollection,配列,Portfolioの要素はデータモデルである必要がある。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリスト(モデルリスト）をソート条件リストでソートしその結果をサービスセッションキーCにセットする。\n\nC	&SortByPhenomenonTypeNames:{ @A }{ @ソート条件リスト }\n\n
&SpecialChar:{ target } /// 特殊文字をjava.lang.Stringの値として返す。\nサービス定義ファイルで書式として解釈されるような特殊文字で文字列連結などをしたい場合に利用する。\n\n書式：\n\n&SpecialChar:{ target }\n\n引数：\n\n    target引数：String値として取得したい特殊文字の指定。以下のいずれかを指定する。\n        LF　:　改行コード\n        DQUOT　:　ダブルクオート(")\n        SQUOT　:　シングルクオート(')\n        AMP　:　アンパサンド(&)\n        EXC　:　エクスクラメーションマーク(!)\n        SPACE　:　半角スペース\n        COMMA　:　カンマ(,)\n        DOT　:　ドット(.)\n        COLON　:　コロン(:)\n        SCOLON　:　セミコロン(;)\n        SLASH　:　スラッシュ(/)\n        AT　:　アットマーク(@)\n\n返値：\n\n    target引数で指定した特殊文字をjava.lang.Stringとして返す。\n    target引数がnullの場合は、例外を返す。\n\n例：Aサービスセッションキーに改行コードを追加した文字列をＣセッションキーに格納する。\n\nC	&Cat:{ @A }{ &SpecialChar:{ LF } }\n\n
&SplitStringToList:{ s1 }{ s2 } /// 最初の引数の文字列を指定文字で分割してリストを返す。\n\n書式：\n\n&SplitStringToList:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：文字列\n    s2引数：セパレータ文字、省略時はカンマ(',')\n\n返値：\n\n    セパレータ文字で分割した文字列のリスト。\n    s1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列をカンマで分離し、リストとしてBにセットする。\n\nB	&SplitStringToList:{ @A }\n\n
&StartOfBeforeMonth /// 評価時の前月の(1日)のam00:00:00を表すjava.util.Dateを返す。\n\n書式：\n\n&StartOfBeforeMonth\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の前月の(1日)かつam00:00:00を表すjava.util.Dateを返す。\n\n例：前月の(1日)のDateクラスをサービスセッションキーCにセットする。\n\nC	&StartOfBeforeMonth\n\n作成日サービスセッションが前月の(1日)以降かを比較する\n\nfilter    "@作成日 >= &StartOfBeforeMonth"\n\n
&StartOfMonth ///     評価時の月初(1日)のam00:00:00を表すjava.util.Dateを返す。\n\n    書式：\n\n    &StartOfMonth\n\n    引数：\n\n        無し\n\n    返値：\n\n        評価時の月初の(1日)かつam00:00:00をjava.util.Dateを返す。\n\n    例：月初の(1日)のDateクラスをサービスセッションキーCにセットする。\n\n    C	&StartOfMonth \n\n    例：作成日サービスセッションが月初の(1日)以降かを比較する\n\n    filter    "@作成日 >= &StartOfMonth"\n\n\n\n
&StartOfNextMonth /// 評価時の翌月の(1日)のam00:00:00を表すjava.util.Dateを返す。\n\n書式：\n\n&StartOfNextMonth\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の翌月の(1日)かつam00:00:00を表すjava.util.Dateを返す。\n\n例：翌月の(1日)のDateクラスをサービスセッションキーCにセットする。\n\nC	&StartOfNextMonth\n\n作成日サービスセッションが翌月の(1日)以降かを比較する\n\nfilter    "@作成日 >= &StartOfNextMonth"\n\n
&Sub:{ s1 }{ s2 } /// 引数を二つとり、最初の引数の結果 - 二つ目の引数の結果を返す。\n\n書式：\n\n&Sub:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：java.lang.Numberのサブクラス\n    s2引数：Numberもしくは文字列（数値を表すもののみ）\n\n返値：\n\n    s1引数と同じNumberのクラスでs1引数とs2引数の引き算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを引き算して,サービスセッションキーCにセットする。\n\nC	&Sub:{ @A } {@ B }\n\n
&Substring:{ sourceString }{ startPos }{ endPos } /// 最初の引数の文字列の指定位置部分文字列を返す。\n\n書式：\n\n&Substring:{ sourceString }{ startPos }{ endPos }\n\n引数：\n\n    sourceString引数：文字列、ObjectクラスのtoString()できるもの\n    startPos引数：開始位置を表すNumberオブジェクト\n    endPos引数：終了位置を表すNumberオブジェクト。省略化\n\n返値：\n\n    最初の引数の文字列の指定位置部分文字列を返す。\n    引数が、nullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列の2文字目以降をサービスセッションキーCにセットする。\n\nC	&Substring:{ @A }{ 2 }\n\n
&Sum:{ target } /// 引数を一つとり、リストの要素の和を返す。\n\n書式：\n\n&Sum:{ target }\n\n引数：\n\n    target引数：和をとる要素を格納したCollection,配列\n\n返値：\n\n    target引数のオブジェクトに格納されている要素の合計を返す。\n    Collection,配列の要素はNumber系オブジェクトである必要がある。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリストの要素を合計しその結果をサービスセッションキーCにセットする。\n\nC	&Sum:{ @A }\n\n
&ThisYearMonth /// 評価時の年月を表すpexa.share.util.cont.YearMonthを返す。\n\n書式：\n\n&ThisYearMonth\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の年月を表すpexa.share.util.cont.YearMonthを返す。\n\n例：今月を表すのYearMonthオブジェクトをサービスセッションキーCにセットする。\n\nC	&ThisYearMonth\n\n例：作成年月というセッション値が今月以降かを判定する\n\n(before_condition\n    filter   "@作成年月 >= &ThisYearMonth"\n    error    &Ski\np)\n\n
&ThisYear /// 評価時の年月を表すpexa.share.util.cont.Yearを返す。\n\n書式：\n\n&ThisYear\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の年を表すpexa.share.util.cont.Yearを返す。\n\n例：今年を表すのYearオブジェクトをサービスセッションキーCにセットする。\n\nC	&ThisYear\n\n例：作成年というセッション値が今年以降かを判定する\n\n(before_condition\n    filter   "@作成年 >= &ThisYear"\n    error    &Ski\np)\n\n
&Time:{ date }{ position } /// 日時の特定値をDateクラスで返す。\n\n書式：\n\n&Time:{ date }{ position }\n\n引数：\n\n    date引数：取得対象の時刻値オブジェクト(Dateクラス)\n    position引数：取得位置を表すの値オブジェクト(Stringクラス)引数は省略可、省略時は時刻部分すべてを返します。位置の名称を",/-"で連結すると複数の位置の値が返されます。\n        HOUR:時ををDateで返す。\n        MINUTE:分をDateで返す。\n        MIN:分をDateで返す。\n        SECOND:秒をDateで返す。\n        SEC:秒をDateで返す。\n        MILLISECOND:ミリ秒をDateで返す。\n        MSEC:ミリ秒をDateで返す。\n\n返値：\n\n    日付の所定の位置をDateクラスで返す。\n\n例：DATEサービスセッションキーの内容の分をサービスセッションキーDにセットする。\n\nD		&Time:{ @DATE }{ MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがMINUTEの場合\n取得結果="1990/01/01:00:22:00.000"となる。\n\nD		&Time:{ @DATE }{ HOUR/MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがHOUR/MINUTEの場合\n取得結果="1990/01/01:11:22:00.000"となる。\n\nD		&Time:{ @DATE }\n\n例：DATE="2012/10/01:11:22:33.567",Positionが省略されたの場合\n取得結果="1990/01/01:11:22:33.567"となる。 \n
&Today /// 評価時の日付かつam00:00:00を表すjava.util.Dateを返す。\n\n書式：\n\n&Today\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の日付のam00:00:00を表すjava.util.Dateを返す。\n\n例：評価時日付のDateクラスをサービスセッションキーCにセットする。\n\nC	&Today\n\n作成年月サービスセッションが評価時日付以降かを比較する\n\nfilter    "@作成年月 >= &Today"\n\n
&Translate:{ target }{ translator } /// 値オブジェクトをtranslatorで別の型(大抵はjava.lang.String)に変換して返す。\n\n書式：\n\n&Translate:{ target }{ translator }\n\n引数：\n\n    target引数　：　translatorによって変換を行いたい値オブジェクトやデータモデルオブジェクト\n    translator引数　：　使用するtranslatorの名前\n\nこのディレクティブは、主にデータモデルを別の形式に変換する場合に使用します。\ntranslator引数でModelTranslatorを指定することで、データモデルに変換テンプレートを掛け合わせて文字列形式の何か(HTMLデータやXMLデータなど)に変換することが出来ます。\n\nその場合、target引数には単体のデータモデルオブジェクトを指定してください。\nデータモデルを格納したリストや配列はtarget引数には指定できません。\nリストや配列に格納されているデータモデルを変換する場合は、foreachプロセスで件数分ループしながら処理してください。\n\n返値：\n\n    translatorによって別の型に変換されたオブジェクト\n    target引数がnullの場合は、nullを返す。\n    translator引数がnullの場合は、エラーを返す。\n\n例：データモデルを"Model2HTMLTranslator"というtranslatorでHTML文字列に変換して返す\n\n　　データHTML　　"&Translate:{@TargetDataModel}{ModelToHTMLTranslator}"\n\n
&Trim:{ source } /// 引数を一つとり、集合に含まれるnull要素を削除した結果を返す。\n\n書式：\n\n&Trim:{ source }\n\n引数：\n\n    source引数　：　トリム対象の文字列, 配列, Map, List, Set\n\nこのディレクティブは、文字列もしくは集合に対しての余分な要素の切り落としを行います。\n\nsource引数で文字列が渡された場合は、両端のホワイトスペースを切り落とした結果を返します。\n\nsource引数でMapやList,Set,配列が指定された場合は、その内部にnull要素(null値もしくはNullValue.NULL)が 含まれていないかチェックし、含まれてたらそれを切り落とした結果(内部要素の件数が減る方向になる)の新しいsourceオブジェクトを返します。\n\n返値：\n\n    source引数が文字列の場合は、両端のホワイトスペースを削除した結果の文字列を返す。\n    source引数が配列の場合は、nullもしくはNullValueオブジェクトを排除した結果の配列を返す。\n    source引数がMapの場合は、valueがnullもしくはNullValueオブジェクトのキーを排除した結果のMapを返す。\n    source引数がListの場合は、nullもしくはNullValueオブジェクトを排除した結果のListを返す。\n    source引数がSetの場合は、nullもしくはNullValueオブジェクトを排除した結果のSetを返す。\n    source引数がnullの場合は、nullを返す。\n\n例：&Distinctで取得した結果のSetからnull要素を排除した結果の件数を取得する\n\n　　null要素を排除した結果の件数　　"&Size:{&Trim:{&Distinct:{@TargetDataModel}}}"\n\n
&TrimUniq:{ source } /// 引数を一つとり、集合に含まれるnull要素・重複要素を削除した結果を返す。\n\n書式：\n\n&TrimUniq:{ source }\n\n引数：\n\n    source引数　：　トリム対象の 配列, List, Set\n\nこのディレクティブは、集合に対しての余分な要素及び重複要素の切り落としを行います。\n同一要素とは、集合の各要素を文字列化(.toString())で比較して重複化をチェックします。(ユニーク化）)\n\nsource引数List,Set,配列が指定された場合は、その内部にnull要素(null値もしくはNullValue.NULL)が 含まれていないかチェックし、含まれてたらそれを切り落としたます。さらに要素を文字列化し既に存在している要素を削除し結果(内部要素の件数が減る方向になる)の新しいsourceオブジェクトを返します。\n\n返値：\n\n    source引数が配列の場合は、nullもしくはNullValueオブジェクトを排除し、ユニーク化した結果の配列を返す。\n    source引数がListの場合は、nullもしくはNullValueオブジェクトを排除し、ユニーク化した結果のListを返す。\n    source引数がSetの場合は、nullもしくはNullValueオブジェクトを排除し、ユニーク化した結果のSetを返す。\n    source引数がnullの場合は、nullを返す。\n\n例：Collectionから&TrimUniqでnull要素を排除し、ユニーク化した結果を取得する\n\n　　C　　"&TrimUniq:{@MasterList/MasterNo}"\n\n
&Write:{ file }{ output }{ encoding } /// \nファイル出力して結果のjava.io.Fileを返す。\n出力内容はjava.lang.Stringもしくはpexa.share.util.cont.Binaryで渡すことが出来る。\n\n書式：\n\n&Write:{ file }{ output }{ encoding }\n\n引数：\n\n    file引数：書き込み対象のファイルを表す文字列(絶対パス指定)もしくはjava.io.File\n    output引数：書き込み内容を表すjava.lang.Stringもしくはpexa.share.util.cont.Binary\n    encoding引数:output引数がStringの場合に出力エンコーディングを指定する。(省略可)\n\nencoding引数の省略時はプラットフォームのデフォルトエンコーディングで書き込まれる。\n\n返値：\n\n    出力ファイルを表すjava.io.File\n\n例：AファイルにBの内容をUTF-8エンコーディングで書き込んで、対象ファイルのjava.io.FileをCに返す\n\nC	&Write:{ @A }{ @B }{ UTF-8 }\n\n
&WriteBinaryForWeb:{ output }{ source file name }{ outside path]{web doc root path} /// アプリケーションサーバーに自動保存するためにファイル名を自動生成し、ファイルのパス名をjava.lang.Stringで返す。\n出力内容はjava.lang.String（DataURI形式(Base64)）もしくはpexa.share.util.cont.Binaryで渡すことが出来る。\n出力内容をコード変換等を実施せず、バイナリとしてファイルを生成する。\nファイル名はソースフィル名（ハッシュ値）・書き込み日時（ミリ秒単位）・シーケンス番号を組み合わせて作成する。\n格納フォルダは、パラメータまたは、JNDI設定のWebルート及びパラメータoutsidepathの合成、及び書き込み年数値＋年日数の2段ディレクトリを合成して自動的に生成する。\n本ディレクティブはサーバーサイドのサービスでのみ実行する。 基本的にアップロードされたファイル内容をWebで表示できるようにするために使用する。\n\n書式：\n\n&WriteBinaryForWeb:{ output }{ source file name }{ outside path]{web doc root path}\n\n引数：\n\n    output引数：書き込み内容を表すjava.lang.String（DataURI形式(Base64)）もしくはpexa.share.util.cont.Binary（必須）\n    source file name引数：書き込み対象のソースファイル名を表す文字列、ファイル拡張子は必須（必須）\n    outside path引数：ファイルを格納するディレクトリ名を表す文字列（非必須）\n    web doc root path引数：アプリケーションサーバーのWebルートを表す文字列（非必須）基本的にはJNDI設定を使用すること\n\noutside path引数の省略時はJNDIの設定local_jndi_saveのwebserver.file.document.outside.pathを使用。\nweb doc root path引数の省略時はJNDIの設定local_jndi_saveのwebserver.file.document.webbase.pathを使用。\n\n返値：\n\n    出力ファイルパス名を表すjava.lang.String\n\n例：Bファイル名にBの内容をwebルート+'filesave/'+自動生成ファイル名で書き込んで、対象自動生成ファイルパス名のjava.lang.StringをCに返す\n\nC	&WriteBinaryForWeb:{ @A }{ @B }{ filesave }\n\n
&AsYearNum:{ date } /// 指定日が西暦何年かをjava.lang.Integerで取得する\n\npexa4.7-dev33から追加になりました。\nリターン値がYearクラスのものは&AsYearを使用してください。\n\n書式：\n\n&AsYearNum:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すDate,YearMonth,Yearオブジェクト。\n\n返値：\n\n    dateが西暦何年であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日が西暦何年かを取得する場合\n\n今日が西暦何年か　　"&AsYearNum:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"2008"が取得できる。 \n
&WeekOfMonth:{ date } /// 指定日がその月の第何週目かをjava.lang.Integerで取得する\n\n書式：\n\n&WeekOfMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその月の第何週目であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその月の第何週目かを取得する場合\n\n今日がその月の何週名か　　"&WeekOfMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"2"が取得できる。\n
&WeekOfYear:{ date } /// 指定日がその年の第何週目かをjava.lang.Integerで取得する\n\n書式：\n\n&WeekOfYear:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその年の第何週目であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその年の第何週目かを取得する場合\n\n今日がその年の何週名か　　"&WeekOfMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"11"が取得できる。 \n
&Year:{ date } /// 指定日が西暦何年かをjava.lang.Integerで取得する\n\n書式：\n\n&Year:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すDateオブジェクト。\n\n返値：\n\n    dateが西暦何年であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日が西暦何年かを取得する場合\n\n今日が西暦何年か　　"&Year:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"2008"が取得できる。 \n
&YearOfFromTo:{ from }{ to }指定の２つの年が何年間かをjava.lang.Integerで取得する\n\n書式：\n\n&YearOfFromTo:{ from }{ to }\n\n引数：\n\n    from引数：年数を取得したい日付のfrom側をあらわすpexa.share.util.cont.Yearオブジェクト。\n    to引数：年数を取得したい日付のto側をあらわすpexa.share.util.cont.Yearオブジェクト。\n\n返値：\n\n    fromとtoの間が何年間あるかを表すjava.lang.Integer値\n    from, toがnullの場合は、nullを返す。\n    from, toがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：発注年から今年までに経過した年数を取得する\n\n発注後経過年数　　"&YearOfFromTo:{@発注年}{@今年}"\n\n@発注年が2014で今年が2025場合はjava.lang.Integerで"11"を返す。 
Abs:{ p1 } /// 引数を一つとりその絶対値を返す。\n\n書式：\n\n&Abs:{ p1 }\n\n引数：\n\n    p1引数：絶対値を取得したいjava.lang.Number系オブジェクト。(Stringは不可)\n\n返値：\n\n    p1引数と同じ型の絶対値を表すNumber系オブジェクトを返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのNumberの絶対値を取得してサービスセッションキーBにセットする。\n\nB	&Abs:{ @A }\n\n
Add:{ s1 }{ s2 } /// 引数を二つとりその和を返す。\n\n書式：\n\n&Add:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：加算値のNumber\n    s2引数：加算値のNumberもしくは文字列（数値を表すもののみ）\n\n返値：\n\n    最初の引数と２番目の引数の足し算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A,BサービスセッションキーのNumberを加算して,サービスセッションキーCにセットする。\n\nC	&Add:{ @A } {@ B }\n\n
AddAllItem:{ list1 }{ list2 } /// ターゲットリストにアイテムリストをすべて追加して返す。\n\n書式：\n\n&AddAllItem:{ list1 }{ list2 }\n\n引数：\n\n    list1引数：Collection,配列,Portfoilo\n    list2引数：list1に追加する内容を格納したCollection,配列,Portfoilo\n\n返値：\n\n    list1引数のリストにlist2引数のリストの内容をすべて追加して返す。\n    list1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの内容に,Bサービスセッションキーのリストの内容を追加して,サービスセッションキーCにセットする。\n\nC	&AddAllItem:{ @A } {@ B }\n\n
AddDay:{ date }{ IncValue } ///     日付を引数の日数分加えて返す。\n\n    書式：\n\n    &AddDay:{ date }{ IncValue }\n\n    引数：\n\n        date引数：元になる日付を表すDate\n        IncValue引数：加算する日数を表すNumber,String\n\n    返値：\n\n        date引数のDateオブジェクトにIncValue引数の日数を加えて返す。\n        IncValue引数の値がないときは＋１日、マイナスの時は減算になる\n        date引数がnullの場合は、nullを返す。\n\n    例：Aサービスセッションキーのリストの日付に,Bサービスセッションキーの値を加えて,サービスセッションキーCにセットする。\n\n    C	&AddDay:{ @A } {@ B }\n\n\n\n
AddItem:{ list1 }{ s1 } /// \nターゲットリストにアイテムを追加して返す。\n\n書式：\n\n&AddItem:{ list1 }{ s1 }\n\n引数：\n\n    list1引数：アイテムを追加する対象のCollection\n    s1引数：ターゲットリストに追加するObject\n\n返値：\n\n    list1引数のリストにs1引数のObjectを追加して返す。\n    list1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの内容に,Bサービスセッションキーの内容を追加して,サービスセッションキーCにセットする。\n\nC	&AddItem:{ @A } {@ B }\n\n
AddMonth:{ p1 }{ IncValue } /// 日付を引数の月数分加えて返す。\n\n書式：\n\n&AddMonth:{ p1 }{ IncValue }\n\n引数：\n\n    p1引数：元になる日付を表すDateもしくはYearMonth\n    IncValue引数：加算する日数を表すNumber,String\n\n返値：\n\n    p1引数がDateでもYearMonthでもIncValue引数の月数を加えて返す。\n    IncValue引数の値がないときは＋一ヶ月、マイナスの時は減算になる。日にちは変更しない。\n    date引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの日付に,Bサービスセッションキーの値（月数）を加えて,サービスセッションキーCにセットする。\n\nC	&AddMonth:{ @A } {@ B }\n\n
AddPortfolio:{ port1 }{ list2 } /// Portfolioにアイテムを追加して返す。\n\n書式：\n\n&AddPortfolio:{ port1 }{ list2 }\n\n引数：\n\n    port1引数：対象のPortfoilo\n    list2引数：port1に追加する内容を格納したPortfoilo,Observable,collection\n\n返値：\n\n    port1引数のPortfolioにlist2引数の値をすべて追加して返す。\n    port1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのPortfolioの内容に,Bサービスセッションキーのリストの内容を追加して,サービスセッションキーCにセットする。\n\nC	&AddPortfolio:{ @A } {@ B }\n\n
AddYear:{ date }{ IncValue } /// 日付を引数の年数分加えて返す。\n\n書式：\n\n&AddYear:{ date }{ IncValue }\n\n引数：\n\n    date引数：操作対象の日付を表すDate,YearMonth,Year\n    IncValue引数：加算する年数を表すNumber,String\n\n返値：\n\n    date引数のDateにIncValue引数の年数を加えて返す。\n    IncValue引数の値がないときは＋一年、マイナスの時は減算になる。月日にちは変更しない。\n    date引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストの日付に,Bサービスセッションキーの値（年数）を加えて,サービスセッションキーCにセットする。\n\nC	&AddYear:{ @A } {@ B }\n\n
ApplyFilter:{ models }{ filter } /// \nModel集合に対して、filterを適用した結果を返す。\n\n書式：\n\n&ApplyFilter:{ models }{ filter }\n\n引数：\n\n    models引数：filterを適用する対象のモデル集合(List, Set, Array,、Portfolio等)\n    filter引数：モデル集合に対して適用するフィルタ条件式(文字列による式、もしくはあらかじめ&CreateFilterで生成されたfilterオブジェクト)\n\n返値：\n\n    modelsがListの場合、filterで抽出したList\n    modelsがArrayの場合、元のArrayの型と同じ型の抽出結果の配列\n    modelsがPortfolioの場合、元のPortfolioに対してfilterを追加した新規Portfolio\n    modelsがnullの場合は、値はnullになる。\n    filterがnullの場合は、それぞれの型に応じたmodelsのコピーが生成される。\n\n例：@SearchResultListに対して、フィルタを文字列で与えて適用した結果を取得する\n\n絞込結果　　"&ApplyFilter:{@SearchResultList}{Name like %Prescription%}"\n\n
ApplySessionFilter:{ SessionFilter } /// SessionFilter式を評価した真偽値(Boolean.TRUEまたはBoolean.FALSE)を返す\n\n書式：\n\n&ApplySessionFilter:{ SessionFilter }\n\n引数：\n\n    SessionFilter引数：評価したいSession条件式(文字列による式、もしくはあらかじめ&CreateSessionFilterで生成されたfilterオブジェクト)\n\n返値：\n\n    SessionFilter式を評価した真偽値(Boolean.TRUEまたはBoolean.FALSE)\n    SessionFilterがnullの場合は、nullを返す。\n\n例：@SearchResultListの件数が１以上であるかを判定した結果を取得する\n\n判定結果　　"&ApplySessionFilter:{'&Size:{@SearchResultList} > 1}"\n\n
AsBytes:{ string }{ encoding } /// \n引数を指定の文字セットでバイトシーケンスに変換してjava.lang.Byte配列として返す。\n\n書式：\n\n&AsBytes:{ string }{ encoding }\n\n引数：\n\n    string引数：バイトシーケンスに変換する対象のString\n    encoding引数：バイトシーケンスに変換する際の文字セット名。省略可。\n\n返値：\n\n    string引数をencodingでバイトシーケンスに変換した結果をjava.lang.Byte配列として返す。\n    string引数がnullのときはnullを返す。\n    string引数が0サイズ文字列の場合はnullを返す。\n    encoding引数がnullのときは、実行プラットフォームのデフォルトエンコーディングが適用される。\n    encoding引数が不正の場合はエラーを返す。\n\n例：AサービスセッションキーのStringの内容をWindows-31JでバイトシーケンスにしてCセッションキーで格納する\n\nC	&AsBytes:{ @A }{ Windows-31J }\n\n
AsDate:{ p1 } /// \n引数を一つとりそれを日付(java.util.Date)に変換して返す。\n\n書式：\n\n&AsDate:{ p1 }\n\n引数：\n\n    p1引数：Dateに変換する対象のDate、YearMonth、Year、Number、String\n\n返値：\n\n    p1引数がDateのときは、そのまま返す。\n    p1引数がYearMonthのときは、値をYearMonthが表す月の１日として返す。\n    p1引数がNumberのときは、値を時刻値（標準時からの指定されたミリ秒数）を返す。\n    p1引数がStringのときは、Java日付変換'yyyy/MM/dd:HH:mm:ss'で変換されて返す。\n    但し、時刻、分、秒は省略できる。\n\n例：AサービスセッションキーのDateの内容サービスセッションキーCにセットする。\n\nC	&AsDate:{ @A }\n\n例：Aサービスセッションキーの文字列の内容サービスセッションキーCにセットする。\n\nC	&AsDate:{ 2006/10/10 }\n\n
AsDateWithFormat:{ format }{ toDateValue }{ locale } /// 引数をフォーマットの形式で日付(java.util.Date)に変換して返す。\n\n書式：\n\n&AsDateWithFormat:{ format }{ toDateValue }{ locale }\n\n引数：\n\n    format引数：toDateValue引数で渡される日付文字列のフォーマット\n    toDateValue引数：Dateに変換する日付文字列\n    locale引数：日付文字列のロケール指定。省略可。ただし、"ja_JP_JP"の文字列を指定した場合は、new Locale("ja_JP_JP")ではなく、new Locale("ja","JP","JP")を生成する。この場合、和暦での表示フォーマットになる\n\n返値：\n\n    format引数のフォーマット形式とlocale引数のロケールでtoDateValue引数の文字列をDateに変換して返す。\n    locale引数が省略された場合は実行環境のデフォルトロケールが適用される。"ja_JP_JP"が指定された場合は、new Locale("ja","JP","JP")を適用する。\n    変換フォーマットはSimpleDateFormatの書式に従う。また、format引数がNULLの場合はデフォルトのformat:"yyyyMMdd:HH:mm:ss"に従う\n\n例："yyyy/MM/dd:hh:mm:ss"のフォーマットで,Bサービスセッションキーの文字列をDateに変換して,サービスセッションキーCにセットする。\n\nC	&AsDateWithFormat:{yyyy/MM/dd:hh:mm:ss}{@B}\n\n例：ロケールをUSに指定して変換する\n\nC	&AsDateWithFormat:{yyyy/MM/dd:hh:mm:ss}{@B}{US}\n\n
AsDecimal:{ p1 } { scale } { round } /// 引数を一つとりそれをjava.math.BigDecimalに変換して返す。\n\n書式：\n\n&AsDecimal:{ p1 } { scale } { round }\n\n引数：\n\n    p1引数：BigDecimalに変換したいNumberオブジェクトまたは数値文字列\n    scale引数：変換時の精度を表すNumberまたは数値文字列\n    round引数：変換時の丸め処理を表す文字列\n    scale,roundは省略可能である。但し、scaleを省略した時はroundも省略する必要がある。\n\n返値：\n\n    p1引数の内容をBigDecimalに変換して返す。\n    scale引数が指定されなかったときは、scale値0で変換する。\n    roundを指定しなかった場合は四捨五入(ROUND_HALF_UP)が選択される。\n    round引数は以下の文字列を有効とする。\n        切上げ時、"切り上げ","切上","UP","ROUND_UP","up","round_up"\n        切捨て時、"切捨て", "切捨""DOWN", "ROUND_DOWN","down", "round_down"\n        正の無限大に近づくように丸める時、"CEILING", "ROUND_CEILING","ceiling","round_ceiling"\n        負の無限大に近づくように丸める時、"FLOOR","ROUND_FLOOR","floor","round_floor"\n        四捨五入の時、"四捨五入","HALF_UP","ROUND_HALF_UP", "half_up", "round_half_up"\n        五捨六入の時、"五捨六入", "HALF_DOWN", "ROUND_HALF_DOWN","half_down","round_half_down"\n        「もっとも近い数字」 に丸める時、"HALF_EVEN", "ROUND_HALF_EVEN", "half_even", "round_half_even"\n        丸めが必要でないとき、"UNNECESSARY", "ROUND_UNNECESSARY", "unnecessary","round_unnecessary"\n    p1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのBigDecimalの内容サービスセッションキーCにセットする。\n\nC	&AsDecimal:{ @A }\n\n例：Aサービスセッションキーの値の内容をスケール１、切上げでサービスセッションキーCにセットする。\n\nC	&AsDecimal:{ @A } { 1 } { UP }\n\n
AsInteger:{ p1 } /// 引数を一つとりそれをjava.lang.Integerに変換して返す。\n\n書式：\n\n&AsInteger:{ p1 }\n\n引数：\n\n    p1引数：Integerの数値文字列に変換できるオブジェクト\n\n返値：\n\n    p1引数がIntegerのときは、そのまま返す。\n    p1引数がIntegerクラ以外スのときは、toString()でInteger数値文字列をIntegerに変換して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのIntegerの内容サービスセッションキーCにセットする。\n\nC	&AsInteger:{ @A }\n\n例：Aサービスセッションキーの文字列の内容を数値としてサービスセッションキーCにセットする。\n\nC	&AsInteger:{ 1000 }\n\n
AsKey:{ p1 } /// 引数を一つとりそれをKey(pexa.share.util.Key)に変換して返す。\n\n書式：\n\n&AsKey:{ p1 }\n\n引数：\n\n    p1引数：toString()で変換値が取得できるオブジェクト\n\n返値：\n\n    toString()で文字列を取得し、Keyクラスに変換して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をKeyクラスでサービスセッションキーCにセットする。\n\nC	&AsKey:{ @A }\n\n例：Aサービスセッションキーの文字列の内容をKeyクラスでサービスセッションキーCにセットする。\n\nC	&AsKey:{ AAAA }\n\n
AsLong:{ p1 } /// 引数を一つとりそれをjava.lang.Longに変換して返す。\n\n書式：\n\n&AsLong:{ p1 }\n\n引数：\n\n    p1引数：Longの数値文字列に変換できるオブジェクト,またはjava.util.Date型のデータを含むオブジェクト\n\n返値：\n\n    p1引数がLongのときは、そのまま返す。\n    p1引数がDateクラスのときは、getTime()でミリ秒をLongで返す。\n    p1引数がLong、Dateクラス以外のときは、toString()でLong数値文字列をLongに変換して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのLongの内容サービスセッションキーCにセットする。\n\nC	&AsLong:{ @A }\n\n例：Aサービスセッションキーの文字列の内容を数値としてサービスセッションキーCにセットする。\n\nC	&AsLong:{ 999999999999 }\n\n
AsModel:{ proxy } /// \nProxy値を引数としてとりそれをデータモデルに変換して返す。\n\n書式：\n\n&AsModel:{ proxy }\n\n引数：\n\n    proxy引数：必ずProxy値オブジェクトを指定する。\n\n返値：\n\n    proxy引数がProxy値のときは、そのProxy値が指すデータモデルを返す。\n    proxy引数がnullの場合は、nullを返す。\n    proxy引数がProxy値でもnullでも無い場合は例外を返す。\n\n例：AサービスセッションキーのProxy値が指すデータモデルをサービスセッションキーCにセットする。\n\nC	&AsModel:{ @A }\n\n
AsPortfolio:{ p1 }{ filter(optional) }{prefetch(optional) }{ distinct(optional) } /// 引数を一つとりそれを新規作成Portfolioにセットして返す。\n\n書式：\n\n&AsPortfolio:{ p1 }{ filter(optional) }{prefetch(optional) }{ distinct(optional) }\n\n引数：\n\n    p1引数：Portfolioにセットする値でCollectoin,Observable配列,Observableオブジェクト(必須)\n    filter引数：Portfolioが対象を絞り込むためのFilter文字列もしくはFilterオブジェクト(省略可)\n    prefetch引数：Portfolioがprefetchする現象型名のString,String[],Setオブジェクト(省略可)\n    disinct引数：Portfolioがdistinctする現象型名のString,String[],Setオブジェクト(省略可)\n\n返値：\n\n    変換対象を、指定引数のPortfolioクラス生成し、追加したPortfolioクラスを返す。\n    引数が、nullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をPortfolioクラスでサービスセッションキーCにセットする。\n\nC	&AsPortfolio:{ @A }\n\n
AsString:{ p1 } /// 引数を一つとり、それを文字列(java.lang.String)に変換して返す。\n\n書式：\n\n&AsString:{ p1 }\n\n引数：\n\n    p1引数：toString()で変換値が取得できるオブジェクト\n\n返値：\n\n    toString()で文字列を取得し、Stringに変換して返す。\n    p1引数がDateオブジェクトの時、"yyyy/MM/dd:HH:mm:ss"でフォーマット変換を行って返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をStringクラスでサービスセッションキーCにセットする。\n\nC	&AsString:{ @A } \n\n
AsYearMonth:{ p1 } /// 引数を一つとり、それをYearMonth(pexa.share.util.cont.YearMonth)に変換して返す。\n\n書式：\n\n&AsYearMonth:{ p1 }\n\n引数：\n\n    p1引数：変換したいDate、Year文字列\n\n返値：\n\n    Date,日付文字列をpexa.share.util.cont.YearMonthに変換する。\n    日にちは一日になる。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をpexa.share.util.cont.YearMonthクラスに変換してサービスセッションキーCにセットする。\n\nC	&AsYearMonth:{ @A }\n\n
AsYear:{ p1 } /// 引数を一つとり、それをYear(pexa.share.util.cont.Year)に変換して返す。\n\npexa4.7-dev33からリターン値がYearクラスに変更になりました。\nリターン値がIntegerのものは&AsYearNumに変更されています。\n\n書式：\n\n&AsYear:{ p1 }\n\n引数：\n\n    p1引数：変換したいDate、YearMonth、文字列\n\n返値：\n\n    Date,日付文字列をpexa.share.util.cont.Yearに変換する。\n    日にちは一月一日になる。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容をpexa.share.util.cont.Yearクラスに変換してサービスセッションキーCにセットする。\n\nC	&AsYear:{ @A }\n\n
BeforeDay /// 評価時の前日かつam00:00:00のjava.util.Dateを返す。\n\n書式：\n\n&BeforeDay\n\n引数：\n\n    なし\n\n返値：\n\n    評価時の前日かつam00:00:00を表すjava.util.Dateオブジェクト\n\n例：作成日サービスセッションが前日以降かを比較する\n\n@作成日 >= &BeforeDay\n\n
CheckDateWithFormatLenient:{ format }{ toDateValue }{ locale } /// 引数のフォーマット形式で日付(java.util.Date)に対し、厳密な変換して不正日付をチェックして返す。\n\n書式：\n\n&CheckDateWithFormatLenient:{ format }{ toDateValue }{ locale }\n\n引数：\n\n    format引数：toDateValue引数で渡される日付文字列のフォーマット\n    toDateValue引数：Dateに変換する日付文字列\n    locale引数：日付文字列のロケール指定。省略可。ただし、"ja_JP_JP"の文字列を指定した場合は、new Locale("ja_JP_JP")ではなく、new Locale("ja","JP","JP")を生成する。この場合、和暦での表示フォーマットになる\n\n返値：\n\n    format引数のフォーマット形式とlocale引数のロケールでtoDateValue引数の文字列をDateに変換して返す。\n    locale引数が省略された場合は実行環境のデフォルトロケールが適用される。"ja_JP_JP"が指定された場合は、new Locale("ja","JP","JP")を適用する。\n    変換フォーマットはSimpleDateFormatの書式に従う。また、format引数がNULLの場合はデフォルトのformat:"yyyyMMdd:HH:mm:ss"に従う\n    変換エラー時は、nullを返す。日付文字列の指定が"2016/13/01"のように日付として不正な場合もエラーになる。&AsDateWithFormatでは"2017/01/01"と解釈される。\n\n例："yyyy/MM/dd:hh:mm:ss"のフォーマットで,Bサービスセッションキーの文字列をDateに変換して,サービスセッションキーCにセットする。\n\nC	&CheckDateWithFormatLenient:{yyyy/MM/dd:hh:mm:ss}{@B}\n\n例：@Bの日付文字列が正しいかチェックする。\n\n	(branch\n		(before_condition\n			filter	"&CheckDateWithFormatLenient:{yyyy/MM/dd:HH:mm:ss}{@B} is not null "\n			error	"DateString format error!!"\n		)\n		format_type	session\n		(session\n			(session_keys\n				正しい日付	&AsDateWithFormat:{yyyy/MM/dd:HH:mm:ss}{@B}\n			)\n		)\n	)\n\n
CheckStringPattern:{@INP}{Pattern} /// 引数のフ文字列内の必須文字種が存在するかをチェックし、結果を返す。\n\n書式：\n\n&CheckStringPattern:{@INP}{Pattern}\n\n引数：\n\n    INP引数:チェック対象の文字列を示す。\n    Pattern引数は、必須文字種のパターンを以下の文字で表す。複数文字種を指定することができる。\n    N:必須文字種として数字（０〜９）\n    A：必須文字種として英字大文字（A〜Z）\n    a：必須文字種として英字小文字（a〜z）\n    E：必須文字種として英字（A〜Z、 a〜z ）\n    S:必須文字種として特殊文字（ “`”,“~”,“!”,“@”,“#”,“$”,“%”,“^”,“&”,“*”,“(”,“)”,“_”,\n    “-”,“+”,“=”,“{”,“}”,“[”,“]”,“\\”,“|”,“:”,“;”,“\”“,”‘“,”<“,”>“,”,“,”.“,”?“,”/“）\n\n返値：\n\n    必須文字種がすべてそろっている場合は、Integerの０を返す。\n    必須文字種に足りないものがある時は、Integerの１を返す。\n\n例：　INPセッションに数字・英字・特殊文字が存在しない場合は１、存在する場合は０をRTNセッションにセットする。\n\n	RTN　&CheckStringPattern:{@INP}{NES}\n\n\n
Cat:{ p1 }...{ pN } /// 文字列の連結結果を返す。\n\n書式：\n\n&Cat:{ p1 }...{ pN }\n\n引数：\n\n    p1引数：連結対象の値オブジェクト(DateもしくはtoString可能なオブジェクト)\n    pN引数：連結対象の値オブジェクト(DateもしくはtoString可能なオブジェクト)\n\n返値：\n\n    toString()で文字列を取得し、Stringクラスに変換して引数分連結して返す。\n    引数がDateオブジェクトの時、"yyyy/MM/dd:HH:mm:ss"でフォーマット変換を行って返す。\n    連結対象nの値がnull値の場合はその分はスキップされる\n\n例：A,B,C/Pathサービスセッションキーの内容をStringクラスで連結しサービスセッションキーDにセットする。\n\nD		&Cat:{ @A }{ @B }{ @C/Path }\n\n例：連結対象１="AAA",連結対象２=null,連結対象３="CCC"の場合\n\n連結結果        &Cat:{@連結対象１}{@連結対象２}{@連結対象３}\n\nとした場合は連結結果="AAACCC"となる。 \n
ClearTime:{ date }{ position } /// \n時刻の特定位置以降をクリアして返す。\n\n書式：\n\n&ClearTime:{ date }{ position }\n\n引数：\n\n    date引数：クリア対象の日時値オブジェクト(Dateクラス)\n    position引数：クリアする位置を表すの値オブジェクト(Stringクラス)引数は省略可、省略時はHOURを指定した場合と同じになります。\n        HOUR:時以降を０クリア\n        MINUTE:分以降を０クリア\n        MIN:分以降を０クリア\n        SECOND:秒以降を０クリア\n        SEC:秒以降を０クリア\n        MILLISECOND:ミリ秒を０クリア\n        MSEC:ミリ秒を０クリア\n\n返値：\n\n    所定の位置以降クリアされたDateクラスで返す。\n\n例：DATEサービスセッションキーの内容を分以降０クリアでサービスセッションキーDにセットする。\n\nD		&ClearTime:{ @DATE }{ MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがMINUTEの場合\nクリア結果="2012/10/01:11:00:00.000"となる。 \n
Clone:{ target } /// ターゲットのUpdatable,Observable,Clonableのコピーオブジェクトを返す\n\n書式：\n\n&Clone:{ target }\n\n引数：\n\n    target引数：コピー対象となる、UpdatableまたはObservableまたはClonable。\n\n返値：\n\n    targetのコピーオブジェクト。\n    もしtargetがnullの場合は、nullを返す。\n    もしtargetがUpdatableでもなくObservableでもなくClonableでもない場合は例外を返す。\n\n例：@AModelのコピーを作成して@BModelとして保持する。\n\nBModel　　&Clone:{@AModel}\n\n
ConnectDateTime:{ date }{ time } /// 日付と時刻を連結して返す。\n\n書式：\n\n&ConnectDateTime:{ date }{ time }\n\n引数：\n\n    date引数：連結対象の日付値オブジェクト(Dateクラス)、日付部分のみが連結対象となり、時刻部分は対象外となります。\n    time引数：連結対象の日付値オブジェクト(Dateクラス)、時刻部分のみが連結対象となり、日付部分は対象外となります。\n\n返値：\n\n    連結されたDateクラスで返す。\n\n例：DATEサービスセッションキーの日付とTIMEサービスセッションキーの時刻値を連結してサービスセッションキーDにセットする。\n\nD		&ConnectDateTime:{ @DATE }{ @TIME }\n\n例：DATE="2012/10/01:11:22:33.456",TIME="1990/01/01:22:33:44.567"\n連結結果="2012/10/01:22:33:44.567"となる。 \n
CreateFilter:{ filterString } /// &ApplyFilterで使用する条件式フィルタオブジェクトを生成して返す。\n\n書式：\n\n&CreateFilter:{ filterString }\n\n引数：\n\n    filterString引数：文字列による条件式\n\n返値：\n\n    filterStringの内容を表すフィルタオブジェクト\n    filterStringがnullの場合は、nullを返す。\n\n例：絞り込みに使用するためのフィルタをあらかじめ生成しておく\n\n絞込用フィルタ　　"&CreateFilter:{RemovedFlag = REMOVED and RecoverableFlag = RECOVERABLE}"\n\n
CreateSessionFilter:{ sessionFilterString } /// &ApplySessionFilterで使用するSession条件式フィルタオブジェクトを生成して返す。\n\n書式：\n\n&CreateSessionFilter:{ sessionFilterString }\n\n引数：\n\n    sessionFilterString引数：文字列によるSession条件式\n\n返値：\n\n    sessionFilterStringの内容を表すSession条件式フィルタオブジェクト\n    sessionFilterStringがnullの場合は、nullを返す。\n\n例：検索結果チェックに使用するためのSession条件式フィルタをあらかじめ生成しておく\n\n検索結果チェック条件式　　"&CreateSessionFilter:{@検索結果件数 > 1}"\n\n
DateToString:{ format }{ DateValue }{ locale } /// 引数をフォーマットの形式で日付(java.util.Date)を文字列に変換して返す。\n\n書式：\n\n&DateToString:{ format }{ DateValue }{ locale }\n\n引数：\n\n    format引数：日付文字列フォーマットを表すString\n    DateValue引数：文字列に変換する対象のDateオブジェクト\n    locale引数：日付表記のロケール指定。省略可。\n\n返値：\n\n    format引数のフォーマット形式とlocale引数のロケール指定でDateValue引数のDateオブジェクトを文字列に変換して返す。\n    locale引数が省略された場合は実行環境のデフォルトロケールが適用される。"ja_JP_JP"が指定された場合は、new Locale("ja","JP","JP")を適用する。また、"ja_JP_JP_ERA"が指定された場合は、フォーマット文字列のGまたは、 GGGG(年号)がERAの数（明治:1,大正:2,昭和:3,平成:4)に置き変わる\n    変換フォーマットはSimpleDateFormatの書式に従う。\n    DateValue引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーのリストのフォーマットで,Bサービスセッションキーの日付（Dateクラス）を文字列に変換して,サービスセッションキーCにセットする。\n\nC	&DateToString:{ @A } {@ B }\n\n例：US表記形式の日付文字列を取得する場合\n\nC	&DateToString:{ @A } {@ B } { US }\n\n
DayOfFromTo:{ from }{ to } /// 指定の２つの日付間が何日間かをjava.lang.Integerで取得する\n\n書式：\n\n&DayOfFromTo:{ from }{ to }\n\n引数：\n\n    from引数：日数を取得したい日付のfrom側をあらわすjava.util.Dateオブジェクト。\n    to引数：日数を取得したい日付のto側をあらわすjava.util.Dateオブジェクト。\n\n返値：\n\n    fromとtoの間が何日間あるかを表すjava.lang.Integer値\n    from, toがnullの場合は、nullを返す。\n    from, toがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：発注日から今日までに経過した日数を取得する\n\n発注後経過日数　　"&DayOfFromTo:{@発注日}{&Today}"\n\n@発注日が2/1で今日日付が2/10の場合はjava.lang.Integerで"9"を返す。 \n
DayOfWeek:{ date } /// 指定日の曜日をpexa.share.util.business.DayOfWeekで取得する\n\n書式：\n\n&DayOfWeek:{ date }\n\n引数：\n\n    date引数：曜日を判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの曜日を表すpexa.share.util.business.DayOfWeekオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日の曜日を取得する場合\n\n今日の曜日　　"&DayOfWeek:{&Today}"\n\nもしその日が月曜日の場合は、DayOfWeek.MONDAYが取得できる。 \n
DayOfWeekInMonth:{ date } /// 指定日の曜日がその月の何回目であるかをjava.lang.Integerで取得する\n\n書式：\n\n&DayOfWeekInMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの曜日がその月の何度目のものかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日の曜日がその月の何度目かを取得する場合\n\n今日の曜日の回数　　"&DayOfWeekInMonth:{&Today}"\n\nもしその日が第３月曜日の場合は、java.lang.Integerで"3"が取得できる。 \n
DayOfMonth:{ date } /// 指定日の日がその月の何日目かをjava.lang.Integerで取得する。\n\n書式：\n\n&DayOfMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその月の何日であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその月の何日かを取得する場合\n\n今日が何日か　　"&DayOfMonth:{&Today}"\n\nもしその日が３月７日の場合は、java.lang.Integerで"7"が取得できる。 \n
DayOfYear:{ date } ///     指定日の日がその年の何日目かをjava.lang.Integerで取得する\n\n    書式：\n\n    &DayOfYear:{ date }\n\n    引数：\n\n        date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n    返値：\n\n        dateがその年の何日であるかを表すjava.lang.Integerオブジェクト。\n        dateがnullの場合は、nullを返す。\n        dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n    例：今日がその年の何日かを取得する場合\n\n    今日がその年の何日か　　"&DayOfYear:{&Today}"\n\n    もしその日が２月１日の場合は、java.lang.Integerで"32"が取得できる。\n\n\n\n
Dec:{ @p1 } /// 引数を一つとりそれを−１して返す。\n\n書式：\n\n&Dec:{ @p1 }\n\n引数：\n\n    p1引数：デクリメントする対象のNumberオブジェクト\n\n返値：\n\n    -1された値をp1引数と同じNumberオブジェクトで返す\n    変換ではLongクラスを使用しているため、整数で計算されます。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容を-１してサービスセッションキーCにセットする。\n\nC	&Dec:{ @A }\n\n
Distinct:{ target }{ item } /// Group,Portfolio,データモデルリスト内の値の重複のないSetを返す。\n\n書式：\n\n&Distinct:{ target }{ item }\n\nこのディレクティブは、データモデルの集合(target引数)から、\n指定された項目(item引数)の重複のない値の集合(Set)を取得します。\n例えばList中にデータモデルが5件入っていて、ある項目の値がそれぞれ\n\nnull\n1\nnull\n1\n2\n\nとなっていた場合に、以下のような値の集合(Set)が返されます。\n\nnull\n1\n2\n\nここで気をつける必要があるのは、nullも「null値」として値の一種として扱われることです。\nitem引数で指定した項目がnull可項目の場合は、結果の値Set中にはnull要素が含まれる可能性があります。\nこの値Setからnull要素を排除した結果がほしい場合は&Trimディレクティブを使用して下さい。\n\n引数：\n\n    target引数：Group,Portfolio,Collection,Observable配列\n    item引数：現象型のKeyまたは文字列\n\n返値：\n\n    target引数のGroup,Portfolio,Observable配列,Observableリストからitemの現象型の値を取得し、値の重複のないSetを取得する。\n    target引数がGroupでitem引数が、数値文字列、Numberクラスのときは、item引数を位置情報として、Groupクラスから求める。\n    target引数がnullの場合は、nullを返す。\n\n例： AサービスセッションキーのList内の会計部門Noを重複なくしてサービスセッションキーCにSetクラスでセットする。\n\nC	&Distinct:{ @A } { 会計部門No }\n\n
Div:{ s1 }{ s2 } /// 引数を二つとり、最初の引数／二番目の引数を返す。\n\n書式：\n\n&Div:{ s1 }{ s2 }\n\n&Div:{ s1 }{ s2 }{ scale }\n\n&Div:{ s1 }{ s2 }{ scale }{ round }\n\n引数：\n\n    s1引数：割り算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    scale引数:s1引数がBigDecimalの値の場合に、割り算結果の小数点以下の桁数を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、割り算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nscale引数およびround引数は省略可能。ただし、round引数指定時はscale引数は必須。\nscale引数省略時は、java.math.BigDecimalのデフォルト動作s1.scale()が返値のスケールとなります。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の割り算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを割り算して,サービスセッションキーCにセットする。\n\nC	&Div:{ @A }{@ B }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して、丸めモードを切り捨て(DOWN)で割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }{ DOWN }\n\n
Div:{ s1 }{ s2 }{ scale } /// 引数を二つとり、最初の引数／二番目の引数を返す。\n\n書式：\n\n&Div:{ s1 }{ s2 }\n\n&Div:{ s1 }{ s2 }{ scale }\n\n&Div:{ s1 }{ s2 }{ scale }{ round }\n\n引数：\n\n    s1引数：割り算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    scale引数:s1引数がBigDecimalの値の場合に、割り算結果の小数点以下の桁数を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、割り算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nscale引数およびround引数は省略可能。ただし、round引数指定時はscale引数は必須。\nscale引数省略時は、java.math.BigDecimalのデフォルト動作s1.scale()が返値のスケールとなります。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の割り算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを割り算して,サービスセッションキーCにセットする。\n\nC	&Div:{ @A }{@ B }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して、丸めモードを切り捨て(DOWN)で割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }{ DOWN }\n\n
Div:{ s1 }{ s2 }{ scale }{ round } /// 引数を二つとり、最初の引数／二番目の引数を返す。\n\n書式：\n\n&Div:{ s1 }{ s2 }\n\n&Div:{ s1 }{ s2 }{ scale }\n\n&Div:{ s1 }{ s2 }{ scale }{ round }\n\n引数：\n\n    s1引数：割り算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    scale引数:s1引数がBigDecimalの値の場合に、割り算結果の小数点以下の桁数を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、割り算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nscale引数およびround引数は省略可能。ただし、round引数指定時はscale引数は必須。\nscale引数省略時は、java.math.BigDecimalのデフォルト動作s1.scale()が返値のスケールとなります。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の割り算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを割り算して,サービスセッションキーCにセットする。\n\nC	&Div:{ @A }{@ B }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をscaleで小数点桁数５に指定して、丸めモードを切り捨て(DOWN)で割り算する\n\nC	&Div:{ @A }{@ B }{ 5 }{ DOWN }\n\n
FilterAnd:{ leftFilter }{ rightFilter } /// ２つのモデルフィルタをandで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&FilterAnd:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　andの左側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n    rightFilter引数　：　andの右側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n\n返値：\n\n    ２つのモデルフィルタをandで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　and連結フィルタ　　"&FilterAnd:{RemovedFlag = NOT_REMOVED}{ValidityFlag = VALID}"\n\n
FilterOr:{ leftFilter }{ rightFilter } /// ２つのモデルフィルタをorで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&FilterOr:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　orの左側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n    rightFilter引数　：　orの右側になるFilterまたは、ServiceSessionObservableFilterまたは、Filter文字列\n\n返値：\n\n    ２つのモデルフィルタをorで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　or連結フィルタ　　"&FilterOr:{RemovedFlag = NOT_REMOVED}{ValidityFlag = VALID}"\n\n
First:{target} /// リストの先頭のアイテムを返す。\n\n書式：\n\n&First:{target}\n\n引数：\n\n    target引数：Portfolio,Collection,配列\n\n返値：\n\n    target引数のPortfolio,配列,Collectionから先頭のitemを取得し返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのList内の先頭アイテムをサービスセッションキーCでセットする。\n\nC	&First:{ @A }\n\n
FirstDateOfBeforeWeek:{ date } /// \n指定日の先週の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfBeforeWeek:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの先週の開始日を表すjava.util.Dateオブジェクト。(基本的に日曜日)\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：先週の開始日を取得する場合\n\n先週の開始日　　"&FirstDateOfBeforeWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/02/24 00:00:00"が取得できる。 \n
FirstDateOfNextWeek:{ date } /// \n指定日の来週の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfNextWeek:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの来週の開始日を表すjava.util.Dateオブジェクト。(基本的に日曜日)\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：来週の開始日を取得する場合\n\n来週の開始日　　"&FirstDateOfNextWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/09 00:00:00"が取得できる。 \n
FirstDateOfWeek:{ date } /// 指定日の週の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfWeek:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの週の開始日を表すjava.util.Dateオブジェクト。(基本的に日曜日)\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今週の開始日(基本的に日曜日)を取得する場合\n\n今週の開始日　　"&FirstDateOfWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/02 00:00:00"が取得できる。 \n
FirstDateOfBeforeMonth:{ date } ///     指定日の先月の開始日をjava.util.Dateで返す\n\n    書式：\n\n    &FirstDateOfBeforeMonth:{ date }\n\n    引数：\n\n        date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n    返値：\n\n        dateの先月の開始日を表すjava.util.Dateオブジェクト。\n        dateがnullの場合は、nullを返す。\n        dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n    例：先週の開始日を取得する場合\n\n    先週の開始日　　"&FirstDateOfBeforeMonth:{&Today}"\n\n    もしその日が2008/03/07の場合は、java.util.Dateで"2008/02/01 00:00:00"が取得できる。\n\n\n\n
FirstDateOfMonth:{ date } /// 指定日の月の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの月の開始日を表すjava.util.Dateオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今月の開始日を取得する場合\n\n今月の開始日　　"&FirstDateOfWeek:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/01 00:00:00"が取得できる。 \n
FirstDateOfNextMonth:{ date } /// 指定日の来月の開始日をjava.util.Dateで返す\n\n書式：\n\n&FirstDateOfNextMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの来月の開始日を表すjava.util.Dateオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：来月の開始日を取得する場合\n\n来月の開始日　　"&FirstDateOfNextMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/04/01 00:00:00"が取得できる。\n
Date:{ date } /// 指定日の00:00:00を表すjava.util.Dateを返す\n\n書式：\n\n&Date:{ date }\n\n引数：\n\n    date引数：00:00:00に変換したいjava.util.Dateオブジェクト。\n\n返値：\n\n    dateの00:00:00を表すjava.util.Dateオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日の00:00:00を取得する場合\n\n今日の00:00:00　　"&Date:{&Today}"\n\nもしその日が2008/03/07の場合は、java.util.Dateで"2008/03/07 00:00:00"が取得できる。 \n
DecimalFormat:{ formatString }{ number } /// 数値に対して、任意のフォーマットを適用した結果の文字列を返す。\n\n書式：\n\n&DecimalFormat:{ formatString }{ number }\n\n引数：\n\n    formatString引数　：　適用するフォーマットを指定する。必須。\n    number引数　：　フォーマットを適用したい数値(java.lang.Numberオブジェクト)を指定する。必須。\n\n返値：\n\n    数値に対してフォーマットを適用した結果の文字列。\n    formatString引数がnullの場合はエラーを返す。\n    number引数がjava.lang.Number以外の値の場合はエラーを返す。\n    number引数がnullの場合はnullを返す。\n\n例：シーケンサーで採番した数値にフォーマットを適用してID文字列を作成する\n\n　　ID　　"&DecimalFormat:{STA_000000}{&Sequencer:{ActivityID}}"\n\n上記の場合、Sequencerで採番された値が"101"のNumberオブジェクトの場合は"STA_000101"という文字列が取得できる。\n
AsValue:{ ptypeName }{ valueString } /// 指定された現象型の値に変換した値を返す。。\n\n書式：\n\n&AsValue:{ ptypeName }{ valueString }\n\n引数：\n\n    ptypeName引数　：　適用する現象型名を指定する。必須。\n    valueString引数　：　現象型の型に変換したい任意の値（一般的には文字列）を指定する。必須。\n\n返値：\n\n    現象型の値の型に対応した値。\n    ptypeName引数がnullの場合はnullを返す。\n    ptypeName引数に対応する現象型が存在しない場合はnullを返す。\n    valueString引数がnullの場合はnullを返す。\n\n例：PhenomenonType(Proxy)を返す。\n\n　　ID　　"&AsValue:{SampleProxy1}{100}"\n\n上記の場合、SampleProxy1の型で値が100が取得できる。 \n
Get:{ target }{ item } /// リストの指定位置のアイテムを返す。\n\n書式：\n\n&Get:{ target }{ item }\n\n引数：\n\n    target引数：Portfolio,Collection,配列\n    item引数：取得したいアイテムの位置(インデックス)を表すNumberクラスまたは、数値文字列(0,1,...n)\n\n返値：\n\n    target引数のPortfolio,配列,Collectionからitemで指定された位置のitemを取得し返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのList内3番目(インデックスとしては2)のitemをサービスセッションキーCにSetクラスでセットする。\n\nC	&Get:{ @A } { 2 }\n\n
GetAfterBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys } ///     指定日を基準してN日後の営業日をカレンダー機能から取得してjava.util.Dateで返す。\n    カレンダー機能についてはSupportFrameworkのガイドを参照。\n\n    書式：\n\n    &GetAfterBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys }\n\n    引数：\n\n        calendar_name引数：カレンダ機能経由で参照するカレンダ名の指定(String)\n        base引数：営業日を取得する基準となる日付(java.util.Date)\n        offset引数：base引数の日から何日後の営業日を取得するかの指定(String, Integer)\n        session_keys引数：カレンダスキーマで記述されている検索フィルタに与えるセッション値キー。複数のキーを指定する場合は半角スペースで区切る。(省略可)\n\n    返値：\n\n        カレンダ機能のgetAfterBusinessDayメソッドの返値として取得したjava.util.Date\n\n    例：自社カレンダを参照して、今日を基準として3営業日後の日付を返す。検索条件は無し。\n\n    format_type  session\n    (session\n        (session_keys\n            自社3営業日後    "&GetAfterBusinessDay:{自社カレンダ}{&Today}{3}"\n        )\n    )\n\n\n    例：取引先カレンダを参照して、ある取引先の今日を基準として翌営業日の日付を返す。検索条件パラメータは１つ。\n\n    format_type  session\n    (session\n        (session_keys\n            得意先No         @得意先マスタ/得意先No\n            取引先翌営業日    "&GetAfterBusinessDay:{取引先カレンダ}{&Today}{1}{得意先No}"\n        )\n    )\n\n\n    例：銀行カレンダを参照して、ある銀行の今日を基準として翌営業日の日付を返す。検索条件パラメータは２つ。\n\n    format_type  session\n    (session\n        (session_keys\n            銀行No           @支払先マスタ/銀行No           \n            支店No           @支払先マスタ/支店No\n            銀行翌営業日    "&GetAfterBusinessDay:{銀行カレンダ}{&Today}{1}{銀行No 支店No}"\n        )\n    )\n\n\n\n
GetBeforeBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys } /// 指定日を基準してN日前の営業日をカレンダー機能から取得してjava.util.Dateで返す。\nカレンダー機能についてはSupportFrameworkのガイドを参照。\n\n書式：\n\n&GetBeforeBusinessDay:{ calendar_name }{ base }{ offset }{ session_keys }\n\n引数：\n\n    calendar_name引数：カレンダ機能経由で参照するカレンダ名の指定(String)\n    base引数：営業日を取得する基準となる日付(java.util.Date)\n    offset引数：base引数の日から何日前の営業日を取得するかの指定(String, Integer)\n    session_keys引数：カレンダスキーマで記述されている検索フィルタに与えるセッション値キー。複数のキーを指定する場合は半角スペースで区切る。(省略可)\n\n返値：\n\n    カレンダ機能のgetBeforeBusinessDayメソッドの返値として取得したjava.util.Date\n\n例：自社カレンダを参照して、今日を基準として3営業日前の日付を返す。検索条件は無し。\n\nformat_type  session\n(session\n    (session_keys\n        自社3営業日前    "&GetBeforeBusinessDay:{自社カレンダ}{&Today}{3}"\n    )\n)\n\n\n例：取引先カレンダを参照して、ある取引先の今日を基準として前営業日の日付を返す。検索条件パラメータは１つ。\n\nformat_type  session\n(session\n    (session_keys\n        得意先No         @得意先マスタ/得意先No\n        取引先前営業日    "&GetBeforeBusinessDay:{取引先カレンダ}{&Today}{1}{得意先No}"\n    )\n)\n\n\n例：銀行カレンダを参照して、ある銀行の今日を基準として前営業日の日付を返す。検索条件パラメータは２つ。\n\nformat_type  session\n(session\n    (session_keys\n        銀行No           @支払先マスタ/銀行No           \n        支店No           @支払先マスタ/支店No\n        銀行前営業日    "&GetBeforeBusinessDay:{銀行カレンダ}{&Today}{1}{銀行No 支店No}"\n    )\n)\n\n
GetBusinessDayOfFromTo:{ CalendarName }{ from }{ to }{ session_keys } /// 指定された期間内の営業日日数をカレンダー機能から取得してjava.lang.Integerで返す。\nカレンダー機能についてはSupportFrameworkのガイドを参照。\n\n書式：\n\n&GetBusinessDayOfFromTo:{ CalendarName }{ from }{ to }{ session_keys }\n\n引数：\n\n    calendar_name引数：カレンダ機能経由で参照するカレンダ名の指定(String)\n    from引数:営業日数を求めるための範囲を表す日付値(java.util.Date)\n    to引数:営業日数を求めるための範囲を表す日付値(java.util.Date)\n    session_keys引数：カレンダスキーマで記述されている検索フィルタに与えるセッション値キー。複数のキーを指定する場合は半角スペースで区切る。(省略可)\n\n返値：\n\n    カレンダ機能のgetBusinessDayOfFromToメソッドの返値として取得したjava.lang.Integer\n\n例：fromを3/1,toを3/5とする。休日が[3/3],[3/4]の場合、営業日は[3/1],[3/2],[3/5]の３日間となる。\n\nformat_type  session\n(session\n    (session_keys\n        営業日日数    "&GetBusinessDayOfFromTo:{自社カレンダ}{&AsDate:{2012/03/01}}{&AsDate:{2012/03/05}}"\n    )\n)\n\n
Age:{ birthday }{ evaluate_date } /// 指定された日付から年齢を取得してjava.lang.Integerで返す。\n書式：\n\n&Age:{ birthday }{ evaluate_date }\n\n引数：\n\n    birthday引数：誕生年月日(java.util.Date)\n    evaluate_date引数:評価する対象の年月日(java.util.Date)\n\n返値：\n\n    評価日時点での年齢java.lang.Integer\n\n例：birthdayを2000/04/01,evaluate_dateを2003/04/01とする。評価日が誕生日に達しているので、年齢は3になる\n\nformat_type  session\n(session\n    (session_keys\n        年齢    "&Age:{&AsDate:{2000/04/01}}{&AsDate:{2003/04/01}}"\n    )\n)\n\n
GetObservation:{ TargetModel }{ PhenomenonTypeName }{ Condition(Optional) } /// ターゲットモデルが持つ現象型の値をCondition付きで参照する。\n数種類のConditionをあらかじめセッション上に作成した上でProcedure項目を参照したい場合等に使用してください。\n\n書式：\n\n&GetObservation:{ TargetModel }{ PhenomenonTypeName }{ Condition(Optional) }\n\n引数：\n\n    TargetModel引数：値の取得元データモデル。\n    PhenomenonTypeName引数：TargetModel引数のデータモデルから値を取得したい現象型名。\n    Condition引数：非必須。Procedureに渡したいConditionを表すObservable。\n\n返値：\n\n    指定された現象型の値\n    TargetModel引数、PhenomenonTypeName引数がnullの場合は、nullを返す。\n\n例：AセッションキーのデータモデルからBセッションキーの現象型の値をCセッションキーに返す\n\nC	&GetObservation:{ @A } { @B }\n\n例：AセッションキーのデータモデルからBセッションキーの現象型の値をCセッションキーのCondition付きで呼び出してDセッションキーに返す\n\nD	&GetObservation:{ @A } { @B } { @C }\n\n
GetTime:{ date }{ position } /// 日時の特定値をIntegerで返す。\n\n書式：\n\n&GetTime:{ date }{ position }\n\n引数：\n\n    date引数：取得対象の日時値オブジェクト(Dateクラス)\n    position引数：取得位置を表すの値オブジェクト(Stringクラス)引数は省略可、省略時は時刻部分の秒数を返します。\n        YEAR:年をIntegerで返す。\n        MONTH:月をIntegerで返す。但し、1月は０になります。\n        DAY:日ををIntegerで返す。\n        HOUR:時ををIntegerで返す。\n        MINUTE:分をIntegerで返す。\n        MIN:分をIntegerで返す。\n        SECOND:秒をIntegerで返す。\n        SEC:秒をIntegerで返す。\n        MILLISECOND:ミリ秒をIntegerで返す。\n        MSEC:ミリ秒をIntegerで返す。\n\n返値：\n\n    日付の所定の位置をIntegerクラスで返す。\n\n例：DATEサービスセッションキーの内容の分をサービスセッションキーDにセットする。\n\nD		&GetTime:{ @DATE }{ MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがMINUTEの場合\n取得結果="22"となる。 \n
GetValue:{ target }{ item } /// ターゲットマップの指定キーの値を返す。\n\n書式：\n\n&GetValue:{ target }{ item }\n\n引数：\n\n    target引数：Portfolio,Mapクラス\n    item引数：target引数がMapの時は、Mapに対するキーの値をセット、Portfolioのときは、ObservableProxyをセット\n\n返値：\n\n    MapのKeyに対応する値または、PortfolioのObservableProxyに対応する値を返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのMap内キー"AA"のitemをサービスセッションキーCにセットする。\n\nC	&GetValue:{ @A } { AA }\n\n
GroupBy:{ portfolio }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }....{ PhenomenonTypeNameN } /// 軸となる項目の名前を指定してPortfolioをグループ化して返す。\n\n\n書式：\n\n&GroupBy:{ portfolio }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }....{ PhenomenonTypeNameN }\n\n引数：\n\n    portfolio引数　：　groupByを行う対象のポートフォリオ。\n    PhenomenonTypeName1...N引数　：　groupBy実行時の軸となる業務項目名。Stringもしくはpexa.share.util.Keyで指定する。\n\n返値：\n\n    指定された項目名でgroupByを実行した結果を格納したpexa.share.support.portfolio.Groupオブジェクト\n    portfolio引数がnullの場合はnullを返す。\n    PhenomenonTypeName1...N引数がnullの場合はnullを返す。\n\n例："targetPortfolio"に対して"税目"と"徴収区分"という項目を軸としてGroupByを実行する\n\n　　resultOfGroupBy　　"&GroupBy:{@targetPortfolio}{税目}{徴収区分}"\n\n
GroupByPhenomenonTypeNames:{ portfolio }{ PhenomenonTypeNames } /// 軸となる項目名リストを指定してPortfolioをグループ化して返す。\n\n\n書式：\n\n&GroupByPhenomenonTypeNames:{ portfolio }{ PhenomenonTypeNames }\n\n引数：\n\n    portfolio引数　：　groupByを行う対象のポートフォリオ。\n    PhenomenonTypeNames引数　：　groupBy実行時の軸となる、業務項目名集合。Stringもしくはpexa.share.util.Keyの配列もしくはリストになる。\n\n返値：\n\n    指定された項目名リストでgroupByを実行した結果を格納したpexa.share.support.portfolio.Groupオブジェクト\n    portfolio引数がnullの場合はnullを返す。\n    PhenomenonTypeNames引数がnullの場合はnullを返す。\n\n例："targetPortfolio"に対して"ptypeNames"で指定された項目名リストでGroupByを実行する\n\n　　resultOfGroupBy　　"&GroupByPhenomenonTypeNames:{@targetPortfolio}{@ptypeNames}"\n\n
GroupItem:{ group }{ key } /// グループから指定キーの値を返す。\n\n書式：\n\n&GroupItem:{ group }{ key }\n\n引数：\n\n    group引数 : 値の取得元のpexa.share.support.portfolio.Groupを指定\n    key引数 : GroupKeyのList or 配列\n\n返値：\n\n    グループから指定キーの値を返す。\n    group引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのGroupから指定キーを持つアイテムをサービスセッションキーCにセットする。\n\nC	&GroupItem:{ @A } { @Key } 	\n\n
GroupPortfolios:{ group } /// グループからPortfolioの一覧を返す。\n\n\n書式：\n\n&GroupPortfolios:{ group }\n\n引数：\n\n    group引数　：　ポートフォリオ取得元のpexa.share.support.portfolio.Groupを指定\n\n返値：\n\n    Groupに格納されているpexa.share.support.portfolio.Portfolioを格納したjava.util.List\n    group引数がnullの場合はnullを返す。\n\n例：GroupByの実行結果からPortfolioのリストを取得する\n\n　　portfolios　　"&GroupPortfolios:{@resultOfGroupBy}"\n\n
IdentSeqStr:{ seqName }{ IdentifedFlag } /// IdentifiedProxyコンストラクト用の文字列を返す。\n\n書式：\n\n&IdentSeqStr:{ seqName }{ IdentifedFlag }\n\n引数：\n\n    引数の型：seqName引数はObject\n    IdentifedFlag引数はObject\n\n返値：\n\n    seqName引数の文字列のSequencerからの値とIdentifedFlagの文字列からなるIdentifiedProxyコンストラクト用の文字列を返す。\n    引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列のから取得したSequencer値とAAの結合文字列ムをサービスセッションキーCにセットする。\n\nC	&IdentSeqStr:{@A}{AA}\n\n
In:{ 基準MODELS }{ 評価対象MODELS }{ filter } /// 基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.TRUEを返す。\n\n書式：\n\n&In:{ 基準MODELS }{ 評価対象MODELS }{ filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.TRUEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    Filter引数が指定された場合、基準MODELSの各MODELをパラメータにfilterを生成して、評価対象MODELSに存在した場合BOOLEAN.TRUEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    上記以外の場合はBoolean.FALSEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でFALSEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&In:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&In:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
Inc:{ p1 } /// 引数を一つとりそれを＋１して返す。\n\n書式：\n\n&Inc:{ p1 }\n\n引数：\n\n    p1引数：インクリメントするNumberオブジェクト\n\n返値：\n\n    引数と同じNumberクラスで引数の値を＋１して返す。\n    変換ではLongクラスを使用しているため、整数で計算されます。\n    引数が、nullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容を＋１してサービスセッションキーCにセットする。\n\nC	&Inc:{ @A }\n\n
IndexOf:{ sourceStirng }{ searchStirng }{ startPos } /// 文字列内の指定文字列の位置を取得し返す。\n\n書式：\n\n&IndexOf:{ sourceStirng }{ searchStirng }{ startPos }\n\n引数：\n\n    sourceStirng引数は、文字列（toString()で取得できるもの）\n    searchStirng引数は、文字列（toString()で取得できるもの）\n    startPos引数は、Number、Stringクラス（Stringは数値文字列）省略可\n\n返値：\n\n    型：Integerクラス\n    sourceStirng引数の文字列内のsearchStirng引数の文字列が含まれる位置を返す。\n    startPos引数以外がnullの場合は、nullを返す。\n\n例：\n
InsertItem:{ targetList }{ insertItem }{ insertIndex } /// ターゲットリストの指定インデックスに指定アイテムを挿入する。\n\n書式：\n\n&InsertItem:{ targetList }{ insertItem }{ insertIndex }\n\n引数：\n\n    targetList引数：操作対象Listとなる、java.util.List\n    insertItem引数：targetListに挿入する任意のオブジェクト\n    insertIndex引数：insertItemの挿入インデックスを表すIntegerやString等\n\n返値：\n\n    targetListにinsertItemを挿入した結果のjava.util.List。\n    もしtargetList、insertItem、insertIdexがnullの場合は、nullを返す。\n\n例：@AListに対して、@AItemをインデックス@AIndexに挿入して、サービスセッションキーCに追加後のListをセットする。\n\nC　　&InsertItem:{@AList}{@AItem}{@AIndex}\n\n
Last:{ target } /// リストの最後のアイテムを返す。\n\n書式：\n\n&Last:{ target }\n\n引数：\n\n    target引数：Portfolio,Collection,配列\n\n返値：\n\n    targetのPortfolio,配列,Collectionから最後のitemを取得し返す。\n    target引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのList内の最後アイテムをサービスセッションキーCにセットする。\n\nC	&Last:{ @A }\n\n
LastIndexOf:{ sourceStirng }{ searchStirng }{ startPos } /// 文字列内の指定文字列の最後の位置を取得し返す。\n\n書式：\n\n&LastIndexOf:{ sourceStirng }{ searchStirng }{ startPos }\n\n引数：\n\n    sourceStirng引数：文字列（toString()で取得できるもの）\n    searchStirng引数：文字列（toString()で取得できるもの）\n    startPos引数：Number、Stringクラス（Stringは数値文字列）省略可\n\n返値：\n\n    型：Integerクラス\n    sourceStirng引数の文字列内のsearchStirng引数の文字列が最後に含まれる位置を返す。\n    startPos引数を指定したときは、その位置以降の文字列を検索する。\n    startPos引数以外がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列内の"AA"の位置をサービスセッションキーCにセットする。\n\nC	&LastIndexOf:{ @A }{ AA }\n\n
List:{size} /// 空のListを生成し返す。\n\n書式：\n\n&List:{size}\n\n引数：\n\n    size引数は、Numberまたは数値文字列、省略可\n\n返値：\n\n    空のListを生成し返す。\n\n例：空のリストををサービスセッションキーCにセットする。\n\nC	&List\n\n
Length:{ sourceString } /// 文字列の文字数をカウントしてjava.lang.Integerで返す。\n\n書式：\n\n&Length:{ sourceString }\n\n引数：\n\n    sourceString引数：文字数を数えたい文字列。\n\n返値：\n\n    sourceStringの文字数を表すjava.lang.Integer。全角文字でも半角文字でも１文字として数える。\n    sourceStringがnullの場合は、nullを返す。\n    sourceStringがString以外のオブジェクトの場合はエラーを返す。\n\n例：\n\n文字数　　"&Length:{@文字数が知りたい文字列}"\n\n
ListIndexOf:{ targetList }{ targetItem } /// リスト内の指定オブジェクトの位置を取得して返す。\n\n書式：\n\n&ListIndexOf:{ targetList }{ targetItem }\n\n引数：\n\n    targetList引数：インデックスチェック対象Listとなる、java.util.List\n    targetItem引数：targetList内の位置(インデックス)を知りたいオブジェクト\n\n返値：\n\n    インデックスを表すjava.lang.Integer。\n    もしtargetListやtargetItemがnullの場合は、nullを返す。\n\n例：@AList内の@AItemの位置（格納インデックス）を取得して、セッションキーCにセットする。\n\nC　　&ListIndexOf:{@AList}{@AItem}\n\n
Map:{size} /// 空のMapを生成し返す。\n\n書式：\n\n&Map:{size}\n\n引数：\n\n    size引数は、Numberまたは数値文字列、省略可\n\n返値：\n\n    空のMapを生成し返す。\n\n例：空のMapををサービスセッションキーCにセットする。\n\nC	&Ma\n\np
MapKeySet:{ map } /// ターゲットマップに格納されているキーの集合をSetとして返す。\n\n\n書式：\n\n&MapKeySet:{ map }\n\n引数：\n\n    map引数　：　キー集合を取得したいターゲットのマップ。\n\n返値：\n\n    指定されたMapに格納されているキーの集合。Setとして返される。\n    map引数がnullの場合はnullを返す。\n\n例："cacheMap"というセッションキーで保持されているマップからキー集合を取得する。\n\n　　CacheKeys　　"&MapKeySet:{@cacheMap}"\n\n
MapValues:{ map } /// ターゲットマップに格納されている値の集合をListとして返す。\n\n\n書式：\n\n&MapValues:{ map }\n\n引数：\n\n    map引数　：　値の集合を取得したいターゲットのマップ。\n\n返値：\n\n    指定されたMapに格納されている値の集合。Listとして返される。\n    map引数がnullの場合はnullを返す。\n\n例："cacheMap"というセッションキーで保持されているマップから値の集合を取得する。\n\n　　CacheValues　　"&MapValues:{@cacheMap}"\n\n
Max:{ target } ///     リスト内の最大値を返す。\n\n    書式：\n\n    &Max:{ target }\n\n    引数：\n\n        target引数はCollection,配列\n\n    返値：\n\n        target引数のCollection、配列内の各値の最大値を返す。\n        Collection,配列の要素はComparableである必要がある。\n        target引数がnullの場合は、nullを返す。\n\n    例：Aサービスセッションキーリスト内の最大値をサービスセッションキーCにセットする。\n\n    C	&Max:{ @A }\n\n\n\n
MessageDigest:{ target }{ keyword }{ algorithm } ///     パスワード・キーワードを基に指定のアルゴリズムを使用して暗号化文字列を返す。\n    Java.security.MessageDigestを利用して暗号化を行います。\n\n    書式：\n\n    &MessageDigest:{ target }{ keyword }{ algorithm }\n\n    引数：\n\n        target引数はパスワードの文字列（必須）\n        keyword引数は暗号化のキーワード文字列（必須）\n        algorithm引数は環濠かアルゴリズム名文字列（MD2/MD5/SHA-1/SHA-256/SHA-384）省略時はMD5です。（非必須）\n\n    返値：\n\n        暗号化した１６進数文字列を返す。\n\n    例：S1サービスセッション内のパスワード、固定キーワード・暗号化アルゴリズムSHA-256で暗号化文字列サービスセッションキーSWにセットする。\n\n    SW		&MessageDigest:{@S1}{'PexaWorks2'}{'SHA-256'}\n\n\n\n
Min:{ target } /// リスト内の最小値を返す。\n\n書式：\n\n&Min:{ target }\n\n引数：\n\n    target引数はCollection,配列\n\n返値：\n\n    target引数のCollection、配列内の各値の最小値を返す。\n    Collection,配列の要素はComparableである必要がある。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリスト内の最小値をサービスセッションキーCにセットする。\n\nC	&Min:{ @A }\n\n
MonthOfYear:{ date } /// 指定日がその年の何月かをpexa.share.util.business.MonthOfYearで取得する\n\n書式：\n\n&MonthOfYear:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその年の第何週目であるかを表すpexa.share.util.business.MonthOfYearオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその年の何月かを取得する場合\n\n今日がその年の何月か　　"&WeekOfMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、MonthOfYear.MARCHが取得される。 \n
MonthOfFromTo:{ from }{ to } ///     指定の２つの日付間が何ヶ月かをjava.lang.Integerで取得する\n\n    書式：\n\n    &MonthOfFromTo:{ from }{ to }\n\n    引数：\n\n        from引数：月数を取得したい日付のfrom側をあらわすpexa.share.util.cont.YearMonthオブジェクト。\n        to引数：月数を取得したい日付のto側をあらわすpexa.share.util.cont.YearMonthオブジェクト。\n\n    返値：\n\n        fromとtoの間が何ヶ月あるかを表すjava.lang.Integer値\n        from, toがnullの場合は、nullを返す。\n        from, toがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n    例：発注月から今月までに経過した月数を取得する\n\n    発注後経過月数　　"&MonthOfFromTo:{@発注月}{@今月}"\n\n    @発注月が2014/1で今月が2015/3の場合はjava.lang.Integerで"14"を返す。\n\n\n\n
Much:{ 基準MODELS }{ 評価対象MODELS }{ Filter } /// 基準MODELSと評価対象MODELSの内容が一致すればBOOLEAN.TRUEを返す。\n\n書式：\n\n&Much:{ 基準MODELS }{ 評価対象MODELS }{ Filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSと評価対象MODELSに含まれるObservableの内容を比較して数が一致かつ、 基準MODELSの各要素毎にequalsな要素が評価対象MODELSにあった場合はBoolean.TRUEを返す。\n    Filter引数が指定された場合、基準MODELSと評価対象MODELSに含まれるObservableの内容を比較して数が一致かつ、 基準MODELSの各要素毎に基準MODELSの現象型値を展開したFilterを評価して真になる要素が評価対象MODELSにあった場合はBoolean.TRUEを返す。\n    上記以外の場合はBoolean.FALSEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でFALSEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&Much:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&Much:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
Mul:{ s1 }{ s2 } /// 引数を二つとり、最初の引数の結果＊二番目の引数結果を返す。\n\n書式：\n\n&Mul:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：java.lang.Numberのサブクラス\n    s2引数：Numberもしくは文字列（数値を表すもののみ）\n\n返値：\n\n    s1引数と同じNumberのクラスでs1引数とs2引数の掛算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n    s1がBigDecimal時返値のスケールは、java.math.BigDecimalのデフォルト動作(s1.scale() + s2.scale())となります。\n\n例：A／BサービスセッションキーのNumberを掛算して,サービスセッションキーCにセットする。\n\nC	&Mul:{ @A } {@ B }\n\n
Neg:{ p1 } /// 引数を一つとり、その引数の符号を反転した内容を返す。\n\n書式：\n\n&Neg:{ p1 }\n\n引数：\n\n    p1引数：Numberクラスのオブジェクト\n\n返値：\n\n    p1引数と同じNumberクラスでp1引数の値の符号を反転して返す。\n    p1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの内容を符号反転してサービスセッションキーCにセットする。\n\nC	&Neg:{ @A }\n\n
NextDay /// 評価時の翌日かつam00:00:00のjava.util.Dateを返す。\n\n書式：\n\n&NextDay\n\n引数：\n\n    なし\n\n返値：\n\n    評価時の翌日かつam00:00:00のDateオブジェクトを返す。\n\n例：翌日のDateクラスをサービスセッションキーCにセットする。\n\nC	&NextDay\n\n
NotIn:{ 基準MODELS }{ 評価対象MODELS }{ filter } /// 基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.FALSEを返す。(&Inの逆)\n\n書式：\n\n&NotIn:{ 基準MODELS }{ 評価対象MODELS }{ filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSの各要素について評価対象MODELSに存在(equals)した場合、Boolean.FALSEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    Filter引数が指定された場合、基準MODELSの各MODELをパラメータにfilterを生成して、評価対象MODELSに存在した場合BOOLEAN.FALSEを返す。\n    (&Muchと異なり、基準MODELSの評価対象MODELSの数が一致している必要は無い)\n    上記以外の場合はBoolean.TRUEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でTRUEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&NotIn:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&NotIn:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
NotMuch:{ 基準MODELS }{ 評価対象MODELS }{ Filter } /// 基準MODELSと評価対象MODELSの内容が一致したらBOOLEAN.FALSEで返す。(&Muchの逆)\n\n書式：\n\n&NotMuch:{ 基準MODELS }{ 評価対象MODELS }{ Filter }\n\n引数：\n\n    基準MODELS引数：内容判定の基準となるモデル集合\n    評価対象MODELS引数：内容を判定したいモデル集合\n    Filter引数：省略可。集合に含まれるモデルを比較する際の条件式。\n\n返値：\n\n    基準MODELS, 評価対象MODELSを上記の基準で比較した結果をBooleanで返す。\n    Filter引数が省略された場合、基準MODELSと評価対象MODELSの数が一致していないか、一致していても基準MODELSの各要素に equalsな要素が評価対象MODELSに無い場合にBOOLEAN.TRUEで返す。\n    Filter引数が指定された場合、基準MODELSと評価対象MODELSの数が一致していないか、一致していても基準MODELSの各要素を パラメータに導出したfilterに対して評価対象のMODELSにfilterの評価が真になる要素が一つも無い場合にBOOLEAN.TRUEを返す。\n    上記以外の場合はBoolean.FALSEになる。\n    基準MODELSがnullなら評価不能としてエラーとする。\n    評価対象MODELSがnullならBoolean値でTRUEで返す。\n\n例：Filter引数無しの場合\n\n　　比較結果　　"&NotMuch:{@SearchResultList}{@EditedList}"\n\n\n例：Filter引数有りの場合\n\n　　比較結果　　"&NotMuch:{@SearchResultList}{@EditedList}{Quantity=$Quantity}"\n\n　　　　$Quantityの部分が基準MODELS(この場合は@SearchResultList)の要素の値によって展開される。\n\n
Now /// 評価時の日時を表すjava.util.Dateを返す。\n\n書式：\n\n&Now\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の日時を表すjava.util.Dateを返す。\n\n例：評価時の日時のDateクラスをサービスセッションキーCにセットする。\n\n>C	&Now\n\n例：作成日サービスセッションが評価時の日時以降かを比較する\n\nfilter    "@作成日 >= &Now"\n\n
Null /// nullを返す。\n\n書式：\n\n&Null\n\n引数：\n\n    無し\n\n返値：\n\n    nullを返す。\n    mapping,sessionの項目設定例外処理時("|"の後)で指定すると、何もしないことを表す。\n    ServiceSession条件式では使用できない。\n\n例：サービスセッションキーCにNullをセットする。\n\nC	&Null\n\n
ObservableProxy:{ target_model } ///  ターゲットモデルのプライマリキー値(Proxyオブジェクト)を取得する。\n\n\n書式：\n\n&ObservableProxy:{ target_model }\n\n引数：\n\n    target_model引数：プライマリキー値を取得したいデータモデル\n\n返値：\n\n    target_model引数で指定されたデータモデルのプライマリキー値(Proxyオブジェクト)を返す。\n    target_model引数がnullの場合はnullを返す。\n\n例：AキーのデータモデルのProxyオブジェクトをBキーに返す\n\nB	&ObservableProxy:{ @A }\n\n
Path:{ model(models) }{ path } /// Modelにパス式（現象型のみの指定を含む）を適用した結果を返す。\n\n書式：\n\n&Path:{ model(models) }{ path }\n\n引数：\n\n    model(models)引数　：　パス式を適用する対象の単体モデル、もしくはモデル集合(リストなど)。\n    path引数　：　モデルに対して適用する現象型パス式。そのモデルが持つ現象型のみの指定も可。\n\n返値：\n\n    パス式をモデルに適用した結果取得された現象型の値\n    単体モデルに対してパスを適用した場合、パス中にMultipleの現象型が含まれるかどうかで結果が単値になるか複数値が決まります。\n    モデル集合に対してパスを適用した場合、結果は必ず複数値になります。\n    modelがnullの場合は、値はnullになる。\n    pathがnullの場合は、エラーになる。\n\n例１　：　単体モデルに対してパス式でモデル作成者の名前を取得\n\n　　パス適用結果(単値)　　"&Path:{@Order}{Creator/UserName}"\n\n\n例２　：　モデル集合に対してパス式でOrderNoのリストを取得\n\n　　パス適用結果(複数値)　　"&Path:{@OrderList}{OrderNo}"\n\n
PhenomenonTypeNameKeys:{ source } /// 引数で指定されたデータモデルが持つ現象型のキー配列を返す。\n\n書式：\n\n&PhenomenonTypeNameKeys:{ source }\n\n引数：\n\n    source引数：現象型キー配列の取得元のObservable,Portfolio\n\n返値：\n\n    source引数で指定されたデータモデルが持つ現象型のキー配列\n\n例：セッション上に保持されているデータモデルから現象型キー配列を取得\n\nPtypeKeys	&PhenomenonTypeNameKeys:{@データモデル}\n\n
Portfolio:{ filter(optional) }{prefetch(optional) }{ distinct(optional) } /// 新規のPortfolioを生成し返す。\n\n書式：\n\n&Portfolio:{ filter(optional) }{prefetch(optional) }{ distinct(optional) }\n\n引数：\n\n    filter引数：Portfolioが対象を絞り込むためのFilter文字列もしくはFilterオブジェクト(省略可)\n    prefetch引数：Portfolioがprefetchする現象型名のString,String[],Setオブジェクト(省略可)\n    disinct引数：Portfolioがdistinctする現象型名のString,String[],Setオブジェクト(省略可)\n\n返値：\n\n    変換対象を、指定引数のPortfolioクラス生成し、Portfolioクラスを返す。\n\n例：PortfolioクラスでサービスセッションキーCにセットする。\n\nC	&Portfolio\n\n
PortfolioObservables:{ portfolio } /// Portfolioに格納されているデータモデルの一覧を返す。\n\n\n書式：\n\n&PortfolioObservables:{ portfolio }\n\n引数：\n\n    portfolio引数　：　データモデルを取り出したいpexa.share.support.portfolio.Portfolioを指定\n\n返値：\n\n    Portfolioに格納されているデータモデルを格納したjava.util.List\n    portfolio引数がnullの場合はnullを返す。\n\n例：Portfolioから元データのリストを取得する\n\n　　SourceDataModelList　　"&PortfolioObservables:{@portfolio}"\n\n
PrimaryKeyName:{ target_model } ///  ターゲットモデルのプライマリキー項目名を取得する。\n\n\n書式：\n\n&PrimaryKeyName:{ target_model }\n\n引数：\n\n    target_model引数：プライマリキー項目名を取得したいデータモデル\n\n返値：\n\n    target_model引数で指定されたデータモデルのプライマリキー項目名(String)を返す。\n    target_model引数がnullの場合はnullを返す。\n\n例：Aキーのデータモデルのプライマリキー項目名をBキーに返す\n\nB	&PrimaryKeyName:{ @A }\n\n
Property:{ propertyKey } /// 実行時パラメータやpexa_plugins.entryファイル中の設定値を取得する。\n\nこのDirectiveは、アプリケーションに対するパラメータ値を取得するために使用します。\n以下の順番で、指定されたプロパティキーの値を探します。\n\n    アプリケーション実行時のJVM起動パラメータ(-Dxxxと指定されるパラメータ)\n    pexa_plugins.entryファイル(リポジトリ中のsrc/plugins/pexa_plugins.entry)\n\n\n書式：\n\n&Property:{ propertyKey }\n\n引数：\n\n    propertyKey引数　：　取得したいプロパティ値のキー。必須。\n\n返値：\n\n    指定されたキーの値。値は文字列、Map、Listのいずれかとなる。\n    propertyKey引数がnullの場合はエラーを返す。\n\n例："restriction_model_name"というキーでJVMパラメータもしくはpexa_plugins.entryファイルから取得する\n\n　　RestrictionModelName　　"&Property:{restriction_model_name}"\n\n
Proxy:{ ProxyPtpyeName }{ IdentifiedString } /// 指定されたProxyオブジェクトを採番して返す。Identified付きにも対応。\n\n書式：\n\n&Proxy:{ ProxyPtpyeName }{ IdentifiedString }\n\n引数：\n\n    ProxyPtpyeName引数　：　Proxy現象型名を指定する。必須。\n    IdentifiedString引数　：　Identifiedが付かないProxyの場合は省略する。Identified付きのProxyの場合は、Identified値の文字列表現を指定する。\n\n返値：\n\n    採番された結果のProxyオブジェクト\n    ProxyPtpyeName引数がnullの場合はエラーを返す。\n    Identified付きのProxyなのにIdentifiedString引数がnullの場合はエラーを返す。\n\n例：\n\n　　OrderNo　　"&Proxy:{OrderNo}{PRESCRIPTION}"\n\n
Put:{ TargetMap }{ Key }{ Value } /// マップにキー、値をセットして返す。\n\n書式：\n\n&Put:{ TargetMap }{ Key }{ Value }\n\n引数：\n\n    TargetMap引数：key,valueをputする対象のMa\np    Key引数：putするキーオブジェクト\n    Value引数：putする値オブジェクト\n\n返値：\n\n    target引数のMpにkey,value引数の値をセットし、その結果のMapを返す。\n    Key,Value引数が、nullの場合は、TargetMapをそのまま返す。\n\n例：AサービスセッションキーのMapにB,Dサービスセッションキーの値をセットし、サービスセッションキーCにセットする。\n\nC	&Put:{ @A } {@ B }{ @D }\n\n
Read:{ file }{ type }{ encoding } /// ファイルを読み込んで、その内容を返す。\nテキストファイルとして読み込んでjava.lang.Stringで返すか、\nバイナリファイルとして読み込んでpexa.share.util.cont.Binaryで返すかをtype指定できる\n\n書式：\n\n&Read:{ file }{ type }{ encoding }\n\n引数：\n\n    file引数：読み込み対象のファイルを表す文字列(絶対パス指定)もしくはjava.io.File\n    type引数：読み込みタイプの指定。以下の２つが指定できる。\n        String : テキストファイルとして読み込む。\n        Binary : バイナリファイルとして読み込む。\n    encoding引数:type引数がStringの場合に読み込みエンコーディングを指定する。(省略可)\n\nencoding引数の省略時はプラットフォームのデフォルトエンコーディングで読み込まれる。\n\n返値：\n\n    type引数がStringの場合は、読み込み結果をjava.lang.Stringで返す。\n    type引数がBinaryの場合は、読み込み結果をpexa.share.util.cont.Binaryで返す。\n\n例：Aファイルの内容をUTF-8エンコーディングでStringとして読み込んでCに返す\n\nC	&Read:{ @A }{ String }{ UTF-8 }\n\n例：Aファイルの内容をBinaryとして読み込んでCに返す\n\nC	&Read:{ @A }{ Binary }\n\n
Rem:{ s1 }{ s2 } /// 引数を二つとり、最初の引数 ％ 二番目の引数を返す。(余剰計算)\n\n書式：\n\n&Rem:{ s1 }{ s2 }\n\n&Rem:{ s1 }{ s2 }{ precision }\n\n&Rem:{ s1 }{ s2 }{ precision }{ round }\n\n引数：\n\n    s1引数：余剰計算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    precision引数:s1引数がBigDecimalの値の場合に、余剰計算結果の精度を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、余剰計算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nprecision引数およびround引数は省略可能。ただし、round引数指定時はprecision引数は必須。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の余剰計算の結果(割り算の余り)を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを余剰計算して,サービスセッションキーCにセットする。\n\nC	&Rem:{ @A }{@ B }\n\n例：BigDecimalの値をprecisionで５に指定して余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をprecisionで５に指定して、丸めモードを切り捨て(DOWN)で余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }{ DOWN }\n\n
Rem:{ s1 }{ s2 }{ precision } /// 引数を二つとり、最初の引数 ％ 二番目の引数を返す。(余剰計算)\n\n書式：\n\n&Rem:{ s1 }{ s2 }\n\n&Rem:{ s1 }{ s2 }{ precision }\n\n&Rem:{ s1 }{ s2 }{ precision }{ round }\n\n引数：\n\n    s1引数：余剰計算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    precision引数:s1引数がBigDecimalの値の場合に、余剰計算結果の精度を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、余剰計算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nprecision引数およびround引数は省略可能。ただし、round引数指定時はprecision引数は必須。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の余剰計算の結果(割り算の余り)を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを余剰計算して,サービスセッションキーCにセットする。\n\nC	&Rem:{ @A }{@ B }\n\n例：BigDecimalの値をprecisionで５に指定して余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をprecisionで５に指定して、丸めモードを切り捨て(DOWN)で余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }{ DOWN }\n\n
Rem:{ s1 }{ s2 }{ precision }{ round } /// 引数を二つとり、最初の引数 ％ 二番目の引数を返す。(余剰計算)\n\n書式：\n\n&Rem:{ s1 }{ s2 }\n\n&Rem:{ s1 }{ s2 }{ precision }\n\n&Rem:{ s1 }{ s2 }{ precision }{ round }\n\n引数：\n\n    s1引数：余剰計算対象のjava.lang.Numberオブジェクト\n    s2引数：Numberオブジェクトもしくは文字列（数値を表すもののみ）を持つことができる。\n    precision引数:s1引数がBigDecimalの値の場合に、余剰計算結果の精度を指定する。(省略可)\n    round引数：s1引数がBigDecimalの値の場合に、余剰計算結果の丸めモードを指定する。(省略可)\n        CEILING : 正の無限大に近づくように丸めるモードです。\n        DOWN : 0に近づくように丸めるモードです。(いわゆる切り捨て)\n        FLOOR : 負の無限大に近づくように丸めるモードです。\n        HALF_DOWN : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り捨てます。\n        HALF_EVEN : 「もっとも近い数字」 に丸める丸めモードです。ただし、両隣りの数字が等距離の場合は偶数側に丸めます。\n        HALF_UP : 「もっとも近い数字」に丸めるモードです。ただし、両隣りの数字が等距離の場合は切り上げます。\n        UNNECESSARY : 要求される演算の結果が正確であり、丸めが必要でないことを表す丸めモードです。\n        UP : 0から離れるように丸めるモードです。(いわゆる切り上げ)\n\nprecision引数およびround引数は省略可能。ただし、round引数指定時はprecision引数は必須。\nround引数省略時は、「HALF_UP」を指定した場合と同じ動作になります。\n\n返値：\n\n    s1引数と同じNumberのクラスで、s1引数とs2引数の余剰計算の結果(割り算の余り)を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを余剰計算して,サービスセッションキーCにセットする。\n\nC	&Rem:{ @A }{@ B }\n\n例：BigDecimalの値をprecisionで５に指定して余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }\n\n例：BigDecimalの値をprecisionで５に指定して、丸めモードを切り捨て(DOWN)で余剰計算する\n\nC	&Rem:{ @A }{@ B }{ 5 }{ DOWN }\n\n
Remove:{ Source }{ Position } /// リストから指定位置のアイテムを削除する。\n\n書式：\n\n&Remove:{ Source }{ Position }\n\n引数：\n\n    Source引数：List,Portfolioクラス\n    Position引数：Numberクラス、数値文字列\n\n返値：\n\n    Source引数の指定位置の要素を削除し、削除した要素を返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの2番目の要素を削除して,削除した要素をサービスセッションキーCにセットする。\n\nC	&Remove:{ @A } { 2 }\n\n
RemoveAllItem:{ target }{ item } /// リストから指定アイテムリストと一致したものを削除して返す。\n\n書式：\n\n
RemoveAllItem:{ target }{ item }\n\n引数：\n\n    target引数：操作対象のCollectionオブジェクト\n    item引数：削除対象のアイテムが格納されているCollectionオブジェクト\n\n返値：\n\n    target引数のCollectionからitem引数のCollectionの要素を削除し、その結果のCollectionを返す。\n    target引数がnullの場合は、nullを返す。\n    item引数がnullの場合は、targetを返す。\n\n例：AサービスセッションキーのCollectionからBサービスセッションキーのCollectionの要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveAllItem:{ @A } { @B }\n\n
RemoveFirst:{ Source } /// リストの先頭のアイテムを削除して返す。\n\n書式：\n\n&RemoveFirst:{ Source }\n\n引数：\n\n    Source引数：操作対象のList,Portfolio\n\n返値：\n\n    Source引数の先頭の要素を削除し、結果を返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの先頭の要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveFirst:{ @A }\n\n
RemoveItem:{ target }{ item } /// リストから指定アイテムと一致したものを削除して返す。\n\n書式：\n\n&RemoveItem:{ target }{ item }\n\n引数：\n\n    target引数：操作対象のCollection\n    item引数：targetから削除する対象のアイテム\n\n返値：\n\n    target引数のCollectionからitem引数の要素を削除し、結果のSourceを返す。\n    target引数がnullの場合は、nullを返す。\n    item引数がnullの場合は、targetを返す。\n\n例：AサービスセッションキーのCollectionからBサービスセッションキーの要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveItem:{ @A } { @B }\n\n
RemoveLast:{ Source } /// リストの最後のアイテムを削除して返す。\n\n書式：\n\n&RemoveLast:{ Source }\n\n引数：\n\n    Source引数：操作対象のList,Portfolioクラス\n\n返値：\n\n    Source引数の最後の要素を削除し、結果のSourceを返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの最後の要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemoveLast:{ @A }\n\n
RemovePortfolio:{ target }{ item } /// Portfolioから指定アイテムと一致したものを削除して返す。\n\n書式：\n\n&RemovePortfolio:{ target }{ item }\n\n引数：\n\n    target引数：操作対象のPortfolio\n    item引数：削除対象アイテム\n\n返値：\n\n    target引数のPortfolioからitem引数の要素を削除し、結果を返す。\n    target引数が、nullの場合は、nullを返す。\n    item引数が、nullの場合は、targetを返す。\n\n例：AサービスセッションキーのPortfolioからBサービスセッションキーの要素を削除して,サービスセッションキーCにセットする。\n\nC	&RemovePortfolio:{ @A } { @B }\n\n
Return /// 対象のサービスを正常終了する。\n\n書式：\n\n&Return\n\n引数：\n\n    無し\n\n動作：\n\n    before_condition, after_conditionセクションのerrorで使用し、対象のサービスを正常終了する\n\n例：\n\n(before_condition\n    filter    "@AAA is not null"\n    error     &Return\n)\n\n
Search:{ modelName }{ filter }{ ext_filter }{ sortList } /// モデルの検索、ソート結果(optional)を返す。\n\n注意：\nこのDirectiveは、前提条件や終了条件の判定でモデル検索が必要な場合にのみ使用すること！\nSVOステートメントで表されるモデル操作処理の実装はこのディレクティブではなくサービスプロセスで表現してください。\n\n書式：\n\n&Search:{ modelName }{ filter }{ ext_filter }{ sortList }\n\n引数：\n\n    modelName引数　：　検索対象のモデル名の指定。必須。\n    filter引数　：　Storageに対する検索条件の指定。指定しない場合は空白(Parameterとしては必須）。\n    ext_filter引数　：　Storage対象外の検索条件。指定しない場合は空白(Parameterとしては必須）。\n    sort_list引数　：　ソート文字列のList(降順の場合は先頭に'~'をつける）。指定しない場合は、Parameterとしても省略可。\n\nfilter引数およびext_filter引数は無指定も可能だが、その場合は空白の括弧は付けること。\nsort_list引数は括弧ごと省略することも可能。\n\n返値：\n\n    検索結果を格納したList\n\n\n例１　：　検索条件、ソート条件無しの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{}{}"\n\n例２　：　Storageに対する検索条件あり、ソート条件無しの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{RemovedFlag = NOT_REMOVED}{}"\n\n例３　：　Storageに対する検索条件あり、Storage対象外の検索条件あり、ソート条件無しの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{RemovedFlag = NOT_REMOVED}{CurrentAge > 20}"\n\n例４：検索条件、ソート条件有りの場合\n\n　　検索結果　　"&Search:{ユーザーマスタ}{RemovedFlag = NOT_REMOVED}{CurrentAge > 20}{FirstName, LastName}"\n\n
SeqMap:{ size } /// 空のMap(順序保証有り)を生成し返す。\n\n書式：\n\n&SeqMap:{ size }\n\n引数：\n\n    size引数：Numberまたは数値文字列、省略可\n\n返値：\n\n    空のMap(順序保証有り)を生成し返す。\n\n例：空の順序保証有りMapををサービスセッションキーCにセットする。\n\nC	&SeqMa\n\np
Sequencer:{ seqNqme } /// 指定した通番名のユニーク番号を返す。\n\n書式：\n\n&Sequencer:{ seqNqme }\n\n引数：\n\n    seqNqme引数：採番名を表す文字列\n\n返値：\n\n    SequencerからseqName引数の文字列の通番名でユニーク番号を取得してNumberオブジェクトとして返す\n    seqName引数がnullの場合は、nullを返す。\n\n例：会計部門Noを通番名としてユニーク番号をサービスセッションキーCにセットする。\n\nC	&Sequencer:{ 会計部門No }\n\n
SessionFilterAnd:{ leftFilter }{ rightFilter } /// ２つのSession条件式フィルタをandで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&SessionFilterAnd:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　andの左側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n    rightFilter引数　：　andの右側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n\n返値：\n\n    ２つのSession条件式フィルタをandで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　and連結フィルタ　　"&SessionFilterAnd:{@SearchResultList is not null}{@SortRuleList is not null}"\n\n
SessionFilterOr:{ leftFilter }{ rightFilter } /// ２つのSession条件式フィルタをorで連結した結果のフィルタオブジェクトを生成して返す。\n\n書式：\n\n&SessionFilterOr:{ leftFilter }{ rightFilter }\n\n引数：\n\n    leftFilter引数　：　orの左側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n    rightFilter引数　：　orの右側になるFilterまたは、ServiceSessionFilterまたは、SessionFilter文字列\n\n返値：\n\n    ２つのSession条件式フィルタをorで連結した結果のフィルタオブジェクト\n    leftFilter引数、rightFilter引数のどちらかもしくは両方がnullの場合は、nullを返す。\n\n例：\n\n　　or連結フィルタ　　"&SessionFilterOr:{@SearchResultList is not null}{@SortRuleList is not null}"\n\n
Set:{ size } ///     空のSetを生成し返す。\n\n    書式：\n\n    &Set:{ size }\n\n    引数：\n\n        size引数：Numberまたは数値文字列、省略可\n\n    返値：\n\n        空のSetを生成し返す。\n\n    例：空のSetをサービスセッションキーCにセットする。\n\n    C	&Set\n\n\n\n
SetObservation:{ TargetModel }{ PhenomenonTypeName }{ Value }{ Condition(Optional) } /// ターゲットモデルが持つ現象型にCondition付きで値を設定する。\n値を設定する対象の現象型自体をパラメータ化したい場合や、 数種類のConditionをあらかじめセッション上に作成した上でTrigger付き項目に設定したい場合に使用してください。\n\n書式：\n\n&SetObservation:{ TargetModel }{ PhenomenonTypeName }{ Value }{ Condition(Optional) }\n\n引数：\n\n    TargetModel引数：値の取得元データモデル。\n    PhenomenonTypeName引数：TargetModel引数のデータモデルへ値を設定したい現象型名。\n    Value引数：TargetModel引数のPhenomenonTypeName引数の現象型に設定したい値。\n    Condition引数：非必須。Triggerに渡したいConditionを表すObservable。\n\n返値：\n\n    値が設定された結果のデータモデル\n    TarSetModel引数、PhenomenonTypeName引数がnullの場合は値を設定しない\n    Value引数がnullの場合はnull値が指定された現象型にを設定される\n\n例：AセッションキーのデータモデルのBセッションキーの現象型にCセッションキーの値が設定されてDセッションキーに設定結果のデータモデルを返す\n\nD	&SetObservation:{ @A } { @B }{ @C }\n\n例：AセッションキーのデータモデルのBセッションキーの現象型にCセッションキーの値がDセッションキーのCondition付きで設定されてEセッションキーに設定結果のデータモデルを返す\n\nE	&SetObservation:{ @A } { @B }{ @C }{ @D }\n\n
Size:{ Source } /// 引数を一つとり、リストの要素数を返す。\n\n書式：\n\n&Size:{ Source }\n\n引数：\n\n    Source引数は、Collection,Poefolio,Groupクラス、配列\n\n返値：\n\n    Source引数のオブジェクトに格納されている要素数を返す。\n    Source引数がnullの場合は、nullを返す。\n\n例：AサービスセッションキーのListの要素数をサービスセッションキーCにセットする。\n\n>C	&Size:{ @A }\n\n
Skip /// 対象のプロセス・サービスをスキップする。\n\n書式：\n\n&Ski\n\np引数：\n\n    無し\n\n動作：\n\n    before_condition,after_conditionのerrorで使用すると、対象のプロセス・サービスをスキップする。\n    mapping,sessionの項目設定例外処理時("|"の後)で利用すると、その行の処理をスキップする。\n\n例：conditionで指定\n\n(before_condition\n    filter    "@AAA is not null"\n    error     &Ski\np)\n\n例：sessionで指定\n\n(session\n    (session_keys\n        AAA		"[@XXX is not null]@XXX|&Skip"\n        BBB		"[@YYY is not null]@YYY|&Skip"\n    )\n)\n\n
SnapCollection:{ target }{ startPosition }{ endPosition } /// Collection,配列から指定位置範囲の要素をCollection,配列で返す。\n\n書式：\n\n&SnapCollection:{ target }{ startPosition }{ endPosition }\n\n引数：\n\n    target引数：Collection,配列クラス\n    startPosition引数：コピー範囲の開始位置、先頭を0として。\n    endPosition引数：コピー範囲の終了位置、省略時はCollection,配列のサイズ分になる。省略可。\n\n返値：\n\n    target引数の内容から指定範囲の要素を持つCollection,配列を返す。\n    target引数がCollectionのときは、結果としてCollectionで、配列の時は、結果として配列で戻す。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリスト(Collection（Size10））をStartに2，Endに4をセットするとその結果としてA内の先頭を0番目として2番目・3番目の要素を入れたCollectionをサービスセッションキーCにセットする。\n\nC	&SnapCollection:{ @A }{ @Start }{ @End}\n\n
Sort:{ target }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }...{ PhenomenonTypeNameN } ///     モデルリストを指定キーでソートして返す。\n\n    書式：\n\n    &Sort:{ target }{ PhenomenonTypeName1 }{ PhenomenonTypeName2 }...{ PhenomenonTypeNameN }\n\n    引数：\n\n        target引数：モデルが格納されたCollection,配列,Portfolioクラス\n        PhenomenonTypeName1...N引数：ソート条件にする現象型のKeyまたは文字列。降順にしたい場合は現象型名の前に「~」を付加する。\n\n    返値：\n\n        target引数の内容を指定現象型でソートした結果を返す。\n        targetのCollection,配列,Portfolioの要素はデータモデルである必要がある。\n        target引数がnullの場合は、nullを返す。\n\n    注意：targetがPortfolioのCollectionでソート条件の現象型が数値の場合、比較される値は該当現象型の総和になります。 例：Aサービスセッションキーリスト(モデルリスト）を会計部門Noでソートしその結果をサービスセッションキーCにセットする。\n\n    C	&Sort:{ @A }{ 会計部門No }\n\n    例：Aサービスセッションキーリスト(モデルリスト）を会計部門Noの降順でソートしその結果をサービスセッションキーCにセットする。\n\n    C	&Sort:{ @A }{ ~会計部門No }\n\n\n\n
SortByPhenomenonTypeNames:{ target }{ PhenomenonTypeNames }{ nullIsMinimum } /// モデルリストをソート項目名リストでソートして返す。\n\n書式：\n\n&SortByPhenomenonTypeNames:{ target }{ PhenomenonTypeNames }{ nullIsMinimum }\n\n引数：\n\n    target引数：モデルが格納されたCollection,配列,Portfolioクラス\n    PhenomenonTypeNames引数：ソート条件となる現象型名を格納したリスト。リストの順番がそのままソート項目順を表す。降順にしたい場合は個々の現象型名の前に「~」を付加する。\n    nullIsMinimum引数：比較値の片方がnullだった場合に、最小値扱いとするか最大値扱いとするかを指定できる。trueなら最小（デフォルト）、falseなら最大扱い。省略可。\n\n返値：\n\n    target引数の内容を指定現象型でソートした結果を返す。\n    targetのCollection,配列,Portfolioの要素はデータモデルである必要がある。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリスト(モデルリスト）をソート条件リストでソートしその結果をサービスセッションキーCにセットする。\n\nC	&SortByPhenomenonTypeNames:{ @A }{ @ソート条件リスト }\n\n
SpecialChar:{ target } /// 特殊文字をjava.lang.Stringの値として返す。\nサービス定義ファイルで書式として解釈されるような特殊文字で文字列連結などをしたい場合に利用する。\n\n書式：\n\n&SpecialChar:{ target }\n\n引数：\n\n    target引数：String値として取得したい特殊文字の指定。以下のいずれかを指定する。\n        LF　:　改行コード\n        DQUOT　:　ダブルクオート(")\n        SQUOT　:　シングルクオート(')\n        AMP　:　アンパサンド(&)\n        EXC　:　エクスクラメーションマーク(!)\n        SPACE　:　半角スペース\n        COMMA　:　カンマ(,)\n        DOT　:　ドット(.)\n        COLON　:　コロン(:)\n        SCOLON　:　セミコロン(;)\n        SLASH　:　スラッシュ(/)\n        AT　:　アットマーク(@)\n\n返値：\n\n    target引数で指定した特殊文字をjava.lang.Stringとして返す。\n    target引数がnullの場合は、例外を返す。\n\n例：Aサービスセッションキーに改行コードを追加した文字列をＣセッションキーに格納する。\n\nC	&Cat:{ @A }{ &SpecialChar:{ LF } }\n\n
SplitStringToList:{ s1 }{ s2 } /// 最初の引数の文字列を指定文字で分割してリストを返す。\n\n書式：\n\n&SplitStringToList:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：文字列\n    s2引数：セパレータ文字、省略時はカンマ(',')\n\n返値：\n\n    セパレータ文字で分割した文字列のリスト。\n    s1引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列をカンマで分離し、リストとしてBにセットする。\n\nB	&SplitStringToList:{ @A }\n\n
StartOfBeforeMonth /// 評価時の前月の(1日)のam00:00:00を表すjava.util.Dateを返す。\n\n書式：\n\n&StartOfBeforeMonth\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の前月の(1日)かつam00:00:00を表すjava.util.Dateを返す。\n\n例：前月の(1日)のDateクラスをサービスセッションキーCにセットする。\n\nC	&StartOfBeforeMonth\n\n作成日サービスセッションが前月の(1日)以降かを比較する\n\nfilter    "@作成日 >= &StartOfBeforeMonth"\n\n
StartOfMonth ///     評価時の月初(1日)のam00:00:00を表すjava.util.Dateを返す。\n\n    書式：\n\n    &StartOfMonth\n\n    引数：\n\n        無し\n\n    返値：\n\n        評価時の月初の(1日)かつam00:00:00をjava.util.Dateを返す。\n\n    例：月初の(1日)のDateクラスをサービスセッションキーCにセットする。\n\n    C	&StartOfMonth \n\n    例：作成日サービスセッションが月初の(1日)以降かを比較する\n\n    filter    "@作成日 >= &StartOfMonth"\n\n\n\n
StartOfNextMonth /// 評価時の翌月の(1日)のam00:00:00を表すjava.util.Dateを返す。\n\n書式：\n\n&StartOfNextMonth\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の翌月の(1日)かつam00:00:00を表すjava.util.Dateを返す。\n\n例：翌月の(1日)のDateクラスをサービスセッションキーCにセットする。\n\nC	&StartOfNextMonth\n\n作成日サービスセッションが翌月の(1日)以降かを比較する\n\nfilter    "@作成日 >= &StartOfNextMonth"\n\n
Sub:{ s1 }{ s2 } /// 引数を二つとり、最初の引数の結果 - 二つ目の引数の結果を返す。\n\n書式：\n\n&Sub:{ s1 }{ s2 }\n\n引数：\n\n    s1引数：java.lang.Numberのサブクラス\n    s2引数：Numberもしくは文字列（数値を表すもののみ）\n\n返値：\n\n    s1引数と同じNumberのクラスでs1引数とs2引数の引き算の結果を返す。\n    s1引数がnullの場合は、nullを返す。\n\n例：A／BサービスセッションキーのNumberを引き算して,サービスセッションキーCにセットする。\n\nC	&Sub:{ @A } {@ B }\n\n
Substring:{ sourceString }{ startPos }{ endPos } /// 最初の引数の文字列の指定位置部分文字列を返す。\n\n書式：\n\n&Substring:{ sourceString }{ startPos }{ endPos }\n\n引数：\n\n    sourceString引数：文字列、ObjectクラスのtoString()できるもの\n    startPos引数：開始位置を表すNumberオブジェクト\n    endPos引数：終了位置を表すNumberオブジェクト。省略化\n\n返値：\n\n    最初の引数の文字列の指定位置部分文字列を返す。\n    引数が、nullの場合は、nullを返す。\n\n例：Aサービスセッションキーの文字列の2文字目以降をサービスセッションキーCにセットする。\n\nC	&Substring:{ @A }{ 2 }\n\n
Sum:{ target } /// 引数を一つとり、リストの要素の和を返す。\n\n書式：\n\n&Sum:{ target }\n\n引数：\n\n    target引数：和をとる要素を格納したCollection,配列\n\n返値：\n\n    target引数のオブジェクトに格納されている要素の合計を返す。\n    Collection,配列の要素はNumber系オブジェクトである必要がある。\n    target引数がnullの場合は、nullを返す。\n\n例：Aサービスセッションキーリストの要素を合計しその結果をサービスセッションキーCにセットする。\n\nC	&Sum:{ @A }\n\n
ThisYearMonth /// 評価時の年月を表すpexa.share.util.cont.YearMonthを返す。\n\n書式：\n\n&ThisYearMonth\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の年月を表すpexa.share.util.cont.YearMonthを返す。\n\n例：今月を表すのYearMonthオブジェクトをサービスセッションキーCにセットする。\n\nC	&ThisYearMonth\n\n例：作成年月というセッション値が今月以降かを判定する\n\n(before_condition\n    filter   "@作成年月 >= &ThisYearMonth"\n    error    &Ski\np)\n\n
ThisYear /// 評価時の年月を表すpexa.share.util.cont.Yearを返す。\n\n書式：\n\n&ThisYear\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の年を表すpexa.share.util.cont.Yearを返す。\n\n例：今年を表すのYearオブジェクトをサービスセッションキーCにセットする。\n\nC	&ThisYear\n\n例：作成年というセッション値が今年以降かを判定する\n\n(before_condition\n    filter   "@作成年 >= &ThisYear"\n    error    &Ski\np)\n\n
Time:{ date }{ position } /// 日時の特定値をDateクラスで返す。\n\n書式：\n\n&Time:{ date }{ position }\n\n引数：\n\n    date引数：取得対象の時刻値オブジェクト(Dateクラス)\n    position引数：取得位置を表すの値オブジェクト(Stringクラス)引数は省略可、省略時は時刻部分すべてを返します。位置の名称を",/-"で連結すると複数の位置の値が返されます。\n        HOUR:時ををDateで返す。\n        MINUTE:分をDateで返す。\n        MIN:分をDateで返す。\n        SECOND:秒をDateで返す。\n        SEC:秒をDateで返す。\n        MILLISECOND:ミリ秒をDateで返す。\n        MSEC:ミリ秒をDateで返す。\n\n返値：\n\n    日付の所定の位置をDateクラスで返す。\n\n例：DATEサービスセッションキーの内容の分をサービスセッションキーDにセットする。\n\nD		&Time:{ @DATE }{ MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがMINUTEの場合\n取得結果="1990/01/01:00:22:00.000"となる。\n\nD		&Time:{ @DATE }{ HOUR/MINUTE }\n\n例：DATE="2012/10/01:11:22:33.567",PositionがHOUR/MINUTEの場合\n取得結果="1990/01/01:11:22:00.000"となる。\n\nD		&Time:{ @DATE }\n\n例：DATE="2012/10/01:11:22:33.567",Positionが省略されたの場合\n取得結果="1990/01/01:11:22:33.567"となる。 \n
Today /// 評価時の日付かつam00:00:00を表すjava.util.Dateを返す。\n\n書式：\n\n&Today\n\n引数：\n\n    無し\n\n返値：\n\n    評価時の日付のam00:00:00を表すjava.util.Dateを返す。\n\n例：評価時日付のDateクラスをサービスセッションキーCにセットする。\n\nC	&Today\n\n作成年月サービスセッションが評価時日付以降かを比較する\n\nfilter    "@作成年月 >= &Today"\n\n
Translate:{ target }{ translator } /// 値オブジェクトをtranslatorで別の型(大抵はjava.lang.String)に変換して返す。\n\n書式：\n\n&Translate:{ target }{ translator }\n\n引数：\n\n    target引数　：　translatorによって変換を行いたい値オブジェクトやデータモデルオブジェクト\n    translator引数　：　使用するtranslatorの名前\n\nこのディレクティブは、主にデータモデルを別の形式に変換する場合に使用します。\ntranslator引数でModelTranslatorを指定することで、データモデルに変換テンプレートを掛け合わせて文字列形式の何か(HTMLデータやXMLデータなど)に変換することが出来ます。\n\nその場合、target引数には単体のデータモデルオブジェクトを指定してください。\nデータモデルを格納したリストや配列はtarget引数には指定できません。\nリストや配列に格納されているデータモデルを変換する場合は、foreachプロセスで件数分ループしながら処理してください。\n\n返値：\n\n    translatorによって別の型に変換されたオブジェクト\n    target引数がnullの場合は、nullを返す。\n    translator引数がnullの場合は、エラーを返す。\n\n例：データモデルを"Model2HTMLTranslator"というtranslatorでHTML文字列に変換して返す\n\n　　データHTML　　"&Translate:{@TargetDataModel}{ModelToHTMLTranslator}"\n\n
Trim:{ source } /// 引数を一つとり、集合に含まれるnull要素を削除した結果を返す。\n\n書式：\n\n&Trim:{ source }\n\n引数：\n\n    source引数　：　トリム対象の文字列, 配列, Map, List, Set\n\nこのディレクティブは、文字列もしくは集合に対しての余分な要素の切り落としを行います。\n\nsource引数で文字列が渡された場合は、両端のホワイトスペースを切り落とした結果を返します。\n\nsource引数でMapやList,Set,配列が指定された場合は、その内部にnull要素(null値もしくはNullValue.NULL)が 含まれていないかチェックし、含まれてたらそれを切り落とした結果(内部要素の件数が減る方向になる)の新しいsourceオブジェクトを返します。\n\n返値：\n\n    source引数が文字列の場合は、両端のホワイトスペースを削除した結果の文字列を返す。\n    source引数が配列の場合は、nullもしくはNullValueオブジェクトを排除した結果の配列を返す。\n    source引数がMapの場合は、valueがnullもしくはNullValueオブジェクトのキーを排除した結果のMapを返す。\n    source引数がListの場合は、nullもしくはNullValueオブジェクトを排除した結果のListを返す。\n    source引数がSetの場合は、nullもしくはNullValueオブジェクトを排除した結果のSetを返す。\n    source引数がnullの場合は、nullを返す。\n\n例：&Distinctで取得した結果のSetからnull要素を排除した結果の件数を取得する\n\n　　null要素を排除した結果の件数　　"&Size:{&Trim:{&Distinct:{@TargetDataModel}}}"\n\n
TrimUniq:{ source } /// 引数を一つとり、集合に含まれるnull要素・重複要素を削除した結果を返す。\n\n書式：\n\n&TrimUniq:{ source }\n\n引数：\n\n    source引数　：　トリム対象の 配列, List, Set\n\nこのディレクティブは、集合に対しての余分な要素及び重複要素の切り落としを行います。\n同一要素とは、集合の各要素を文字列化(.toString())で比較して重複化をチェックします。(ユニーク化）)\n\nsource引数List,Set,配列が指定された場合は、その内部にnull要素(null値もしくはNullValue.NULL)が 含まれていないかチェックし、含まれてたらそれを切り落としたます。さらに要素を文字列化し既に存在している要素を削除し結果(内部要素の件数が減る方向になる)の新しいsourceオブジェクトを返します。\n\n返値：\n\n    source引数が配列の場合は、nullもしくはNullValueオブジェクトを排除し、ユニーク化した結果の配列を返す。\n    source引数がListの場合は、nullもしくはNullValueオブジェクトを排除し、ユニーク化した結果のListを返す。\n    source引数がSetの場合は、nullもしくはNullValueオブジェクトを排除し、ユニーク化した結果のSetを返す。\n    source引数がnullの場合は、nullを返す。\n\n例：Collectionから&TrimUniqでnull要素を排除し、ユニーク化した結果を取得する\n\n　　C　　"&TrimUniq:{@MasterList/MasterNo}"\n\n
Write:{ file }{ output }{ encoding } /// \nファイル出力して結果のjava.io.Fileを返す。\n出力内容はjava.lang.Stringもしくはpexa.share.util.cont.Binaryで渡すことが出来る。\n\n書式：\n\n&Write:{ file }{ output }{ encoding }\n\n引数：\n\n    file引数：書き込み対象のファイルを表す文字列(絶対パス指定)もしくはjava.io.File\n    output引数：書き込み内容を表すjava.lang.Stringもしくはpexa.share.util.cont.Binary\n    encoding引数:output引数がStringの場合に出力エンコーディングを指定する。(省略可)\n\nencoding引数の省略時はプラットフォームのデフォルトエンコーディングで書き込まれる。\n\n返値：\n\n    出力ファイルを表すjava.io.File\n\n例：AファイルにBの内容をUTF-8エンコーディングで書き込んで、対象ファイルのjava.io.FileをCに返す\n\nC	&Write:{ @A }{ @B }{ UTF-8 }\n\n
WriteBinaryForWeb:{ output }{ source file name }{ outside path]{web doc root path} /// アプリケーションサーバーに自動保存するためにファイル名を自動生成し、ファイルのパス名をjava.lang.Stringで返す。\n出力内容はjava.lang.String（DataURI形式(Base64)）もしくはpexa.share.util.cont.Binaryで渡すことが出来る。\n出力内容をコード変換等を実施せず、バイナリとしてファイルを生成する。\nファイル名はソースフィル名（ハッシュ値）・書き込み日時（ミリ秒単位）・シーケンス番号を組み合わせて作成する。\n格納フォルダは、パラメータまたは、JNDI設定のWebルート及びパラメータoutsidepathの合成、及び書き込み年数値＋年日数の2段ディレクトリを合成して自動的に生成する。\n本ディレクティブはサーバーサイドのサービスでのみ実行する。 基本的にアップロードされたファイル内容をWebで表示できるようにするために使用する。\n\n書式：\n\n&WriteBinaryForWeb:{ output }{ source file name }{ outside path]{web doc root path}\n\n引数：\n\n    output引数：書き込み内容を表すjava.lang.String（DataURI形式(Base64)）もしくはpexa.share.util.cont.Binary（必須）\n    source file name引数：書き込み対象のソースファイル名を表す文字列、ファイル拡張子は必須（必須）\n    outside path引数：ファイルを格納するディレクトリ名を表す文字列（非必須）\n    web doc root path引数：アプリケーションサーバーのWebルートを表す文字列（非必須）基本的にはJNDI設定を使用すること\n\noutside path引数の省略時はJNDIの設定local_jndi_saveのwebserver.file.document.outside.pathを使用。\nweb doc root path引数の省略時はJNDIの設定local_jndi_saveのwebserver.file.document.webbase.pathを使用。\n\n返値：\n\n    出力ファイルパス名を表すjava.lang.String\n\n例：Bファイル名にBの内容をwebルート+'filesave/'+自動生成ファイル名で書き込んで、対象自動生成ファイルパス名のjava.lang.StringをCに返す\n\nC	&WriteBinaryForWeb:{ @A }{ @B }{ filesave }\n\n
AsYearNum:{ date } /// 指定日が西暦何年かをjava.lang.Integerで取得する\n\npexa4.7-dev33から追加になりました。\nリターン値がYearクラスのものは&AsYearを使用してください。\n\n書式：\n\n&AsYearNum:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すDate,YearMonth,Yearオブジェクト。\n\n返値：\n\n    dateが西暦何年であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日が西暦何年かを取得する場合\n\n今日が西暦何年か　　"&AsYearNum:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"2008"が取得できる。 \n
WeekOfMonth:{ date } /// 指定日がその月の第何週目かをjava.lang.Integerで取得する\n\n書式：\n\n&WeekOfMonth:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその月の第何週目であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその月の第何週目かを取得する場合\n\n今日がその月の何週名か　　"&WeekOfMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"2"が取得できる。\n
WeekOfYear:{ date } /// 指定日がその年の第何週目かをjava.lang.Integerで取得する\n\n書式：\n\n&WeekOfYear:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すjava.util.Dateオブジェクト。\n\n返値：\n\n    dateがその年の第何週目であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日がその年の第何週目かを取得する場合\n\n今日がその年の何週名か　　"&WeekOfMonth:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"11"が取得できる。 \n
Year:{ date } /// 指定日が西暦何年かをjava.lang.Integerで取得する\n\n書式：\n\n&Year:{ date }\n\n引数：\n\n    date引数：判定したい日付を表すDateオブジェクト。\n\n返値：\n\n    dateが西暦何年であるかを表すjava.lang.Integerオブジェクト。\n    dateがnullの場合は、nullを返す。\n    dateがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：今日が西暦何年かを取得する場合\n\n今日が西暦何年か　　"&Year:{&Today}"\n\nもしその日が2008/03/07の場合は、java.lang.Integerで"2008"が取得できる。 \n
YearOfFromTo:{ from }{ to }指定の２つの年が何年間かをjava.lang.Integerで取得する\n\n書式：\n\n&YearOfFromTo:{ from }{ to }\n\n引数：\n\n    from引数：年数を取得したい日付のfrom側をあらわすpexa.share.util.cont.Yearオブジェクト。\n    to引数：年数を取得したい日付のto側をあらわすpexa.share.util.cont.Yearオブジェクト。\n\n返値：\n\n    fromとtoの間が何年間あるかを表すjava.lang.Integer値\n    from, toがnullの場合は、nullを返す。\n    from, toがjava.util.Date以外のオブジェクトの場合はエラーを返す。\n\n例：発注年から今年までに経過した年数を取得する\n\n発注後経過年数　　"&YearOfFromTo:{@発注年}{@今年}"\n\n@発注年が2014で今年が2025場合はjava.lang.Integerで"11"を返す。 