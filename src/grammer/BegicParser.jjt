/** オプション */
options
{
  /* parserをfor文などで繰り返し使うならfalseにする */
  STATIC = false;
  MULTI = true;
  VISITOR = true;
  UNICODE_INPUT = true;
}

/** Parserクラスの定義 */
PARSER_BEGIN(BegicParser)
package jp.begic.interpreter.parser;
import java.util.ArrayList;
import jp.begic.interpreter.values.*;
import jp.begic.interpreter.values.base.*;

public class BegicParser
{
}

PARSER_END(BegicParser)

/** ここまでがParserクラスの定義 */
/** 以下は文法の定義 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* OPERATORS */

TOKEN :
{
  < EQ : "==" >
| < NEQ : "!=" >
| < ASSIGN : "=" >
| < CONSTANT_ASSIGN : ":=" >
| < EXCHANGE : "<->" >
| < GT : ">" >
| < LT : "<" >
| < LE : "<=" >
| < GE : ">=" >
| < PUSH : "<<" >
| < NOT : "not" >
| < QUESTION : "?" >
| < OR : "or" >
| < AND : "and" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < POWER : "^" >
| < MOD : "mod" >
}

/* ----- COMMAND ----- */

TOKEN :
{
  < BCOMMAND :
    "line"
  | "puts"
  | "circle"
  | "box"
  | "print"
  | "write"
  | "window"
  | "have"
  | "point" 
  >
}

/* ----- STATEMENTS ----- */
TOKEN :
{
  < IF : "if" >
| < ELSIF : "elsif" >
| < ELSE : "else" >
| < WHILE : "while" >
| < LOOP : "loop" >
| < FOR : "for" >
| < BREAK : "break" >
| < NEXT : "next" >
| < TO : "to" >
| < STEP : "step" >
| < DO : "do" >
| < END : "end" >
| < CALL : "call" >
}

/* FUNCTION */

TOKEN :
{
  < BFUNCTION :
    //  "gets"
    "sin"
  | "cos"
  | "tan"
  | "log"
  | "sinh"
  | "cosh"
  | "tanh"
  | "sqrt"
  | "exp" >
}

/* ----- COMMENTS ----- */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| 
  < "/**" ~[ "/" ] > : IN_FORMAL_COMMENT
| 
  "/*" : IN_MULTI_LINE_COMMENT
}

< IN_SINGLE_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_FORMAL_COMMENT >
SPECIAL_TOKEN :
{
  < FORMAL_COMMENT : "*/" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

/* ----- VALUES ----- */

TOKEN :
{
  < STRING :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\" 
        ([ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        )
      )
    )*
    "\"" 
  >
| < FLOAT :
    ([ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    )* >
| < COLOR :
    (
      "#" ([ "0"-"9", "A"-"F" ])
      {
        6
      }
    | "red"
    | "blue"
    | "yellow"
    | "green"
    | "white"
    | "black"
    ) 
  >
| < BOOLEAN :
    "true"
  | "false" >
| < EMPTY : "empty" >
| < IDENTIFIER : ([ "a"-"z", "A"-"Z", "_", "." ])+ ([ "0"-"9" ])* >
}

SimpleNode Program() :
{
  Token prog = null;
}
{
  (
    (
      Command()
    | LOOKAHEAD(2)
      Assignment()
    | LOOKAHEAD(2)
      Exchange()
    | Call()
    | IfStatement()
    | LoopStatement()
    | WhileStatement()
    | ForStatement()
    )
    (";")?
  )*
  < EOF >
  {
    return jjtThis;
  }
}

// いまのところふつうの引数の形式にする。括弧の省略は可能。
void Command() :
{
  Token t = null;
}
{
  LOOKAHEAD(2)
  t = < BCOMMAND > Args()
  {
    jjtThis.jjtSetValue(t);
  }
| t = < BCOMMAND >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Args() :
{}
{
  LOOKAHEAD(2)
  "("
  (
    Operation()
    (
      "," Operation()
    )*
  )*
  ")"
  (
    "," "("
    (
      Operation()
      (
        "," Operation()
      )*
    )*
    ")"
  )*
| Operation()
  (
    "," Operation()
  )*
}

void Call() :
{}
{
  < CALL > Operation()
}

void IfStatement() :
{}
{
  < IF > Operation() Block()
  (
    < ELSIF > Operation() Block()
  )*
  (
    < ELSE > Block()
  )?
}

void LoopStatement() :
{}
{
  < LOOP > Block()
}

void WhileStatement() :
{}
{
  < WHILE > Operation() Block()
}

void ForStatement() :
{
  Token t = null;
}
{
  < FOR > t = < IDENTIFIER > < ASSIGN > Operation() < TO > Operation() < STEP > Operation() Block()
  {
    jjtThis.jjtSetValue(t);
  }
}

void Block() :
{}
{
  (
    "{"
  | "do"
  )
  (
    (
      Command()
    | LOOKAHEAD(2)
      Assignment()
    | LOOKAHEAD(2)
      Exchange()
    | Call()
    | Break()
    | Next()
    | IfStatement()
    | LoopStatement()
    | WhileStatement()
    | ForStatement()
    )
    (";")?
  )*
  (
    "}"
  | "end"
  )
}

void Break() :
{
  Token t = null;
}
{
  t = < BREAK >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Next() :
{
  Token t = null;
}
{
  t = < NEXT >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Assignment() :
{}
{
  Identifier()
  (
    "[" Operation() "]"
  )*
  < ASSIGN > Operation()
}

void ConstantAssignment() :
{}
{
  Identifier() < CONSTANT_ASSIGN > Operation()
}

void Exchange() :
{}
{
  Identifier() < EXCHANGE > Identifier()
}

void Operation() :
{}
{
  OrOp()
}

void OrOp() #OrOp(>1) :
{}
{
  AndOp()
  (
    < OR >
    AndOp()
  )*
}

void AndOp() #AndOp(>1) :
{}
{
  NotOp()
  (
    < AND >
    NotOp()
  )*
}

void NotOp() #NotOp(>1) :
{
  Token t = null;
}
{
  (
    Not()
  )*
  CompOp()
}

void Not() :
{
  Token t = null;
}
{
  t = < NOT >
  {
    jjtThis.jjtSetValue(t);
  }
}

void CompOp() #CompOp(>1) :
{}
{
  AddMnsOp()
  (
    Comp() AddMnsOp()
  )?
}

void Comp() :
{
  Token t = null;
}
{
  t = < EQ >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < LT >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < GT >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < LE >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < GE >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < NEQ >
  {
    jjtThis.jjtSetValue(t);
  }
}

void AddMnsOp() #AddMnsOp(>1) :
{}
{
  MulDivOp()
  (
    AddMns() MulDivOp()
  )*
}

void AddMns() :
{
  Token t = null;
}
{
  t = < PLUS >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < MINUS >
  {
    jjtThis.jjtSetValue(t);
  }
}

void MulDivOp() #MulDivOp(>1) :
{}
{
  ModPowOp()
  (
    MulDiv() ModPowOp()
  )*
}

void MulDiv() :
{
  Token t = null;
}
{
  t = < STAR >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < SLASH >
  {
    jjtThis.jjtSetValue(t);
  }
}

void ModPowOp() #ModPowOp(>1) :
{}
{
  Expression()
  (
    ModPow() Expression()
  )*
}

void ModPow() :
{
  Token t = null;
}
{
  t = < MOD >
  {
    jjtThis.jjtSetValue(t);
  }
| t = < POWER >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Expression() :
{}
{
  (
    < PLUS >
  | < MINUS >
  )?
  (
    LOOKAHEAD(2)
    ListHashFactor()
  | LOOKAHEAD(3)
    Block()
  | LOOKAHEAD(2)
    Identifier()
  | Float()
  | String()
  | Color()
  | Boolean()
  | Empty()
  | List()
  | Hash()
  | Function()
  | "(" Operation() ")"
  )
}

void Function() :
{
  Token t = null;
}
{
  t = < BFUNCTION > "("
  (
    Operation()
    (
      "," Operation()
    )*
  )?
  ")"
  {
    jjtThis.jjtSetValue(t);
  }
}

void List() :
{}
{
  "["
  (
    Operation()
    (
      "," Operation()
    )*
  )?
  "]"
}

void Hash() :
{}
{
  "{"
  (
    Operation() ":" Operation()
    (
      "," Operation() ":" Operation()
    )*
  )?
  "}"
}

void ListHashFactor() :
{}
{
  Identifier()
  (
    "[" Operation() "]"
  )+
}

void Identifier() :
{
  Token t = null;
}
{
  t = < IDENTIFIER >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Boolean() :
{
  Token t = null;
}
{
  t = < BOOLEAN >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Empty() :
{
  Token t = null;
}
{
  t = < EMPTY >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Float() :
{
  Token t = null;
}
{
  t = < FLOAT >
  {
    jjtThis.jjtSetValue(t);
  }
}

void String() :
{
  Token t = null;
}
{
  t = < STRING >
  {
    jjtThis.jjtSetValue(t);
  }
}

void Color() :
{
  Token t = null;
}
{
  t = < COLOR >
  {
    jjtThis.jjtSetValue(t);
  }
}
