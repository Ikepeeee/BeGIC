/** オプション */
options
{
  /* parserをfor文などで繰り返し使うならfalseにする */
  STATIC = false;
  MULTI = true;
  VISITOR = true;
  UNICODE_INPUT = true;
}

/** Parserクラスの定義 */
PARSER_BEGIN(BegicParser)
package jp.tolz.begic.prototype.interpreter.parser;

public class BegicParser
{
  /* ここに，普通のJavaクラスのようにメソッドを定義できるっぽい */
}

PARSER_END(BegicParser)

/** ここまでがParserクラスの定義 */
/** 以下は文法の定義 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* OPERATORS */

TOKEN :
{
  < EQ : "=" >
| < NEQ : "=/" >
| < RIGHT_ASSIGN : "=>" >
| < LEFT_ASSIGN : "<=" >
| < EXCHANGE : "<->" >
| < GT : ">" >
| < LT : "<" >
| < NOT : "not" >
| < QUESTION : "?" >
| < OR : "or" >
| < AND : "and" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < POWER : "^" >
| < MOD : "mod" >
}

/* LETTER */

TOKEN :
{
  < LETTER :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < NUMBER : [ "0"-"9" ] >
}

/* COMMAND_IDENTIFIER */

TOKEN :
{
  < BCOMMAND :
    "line"
  | "circle"
  | "print"
  | "input" >
}

/* ----- COMMENTS ----- */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* ----- VALUES ----- */

TOKEN :
{
  < IDENTIFIER : (< LETTER >)+ (< NUMBER >)* >
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < INTEGER : ("+"|"-")*(["0"-"9"])+ >
| < FROAT :  ("+"|"-")*(["0"-"9"])+"."(["0"-"9"])+ >
| < COLOR : "#" >
}


void Program() :
{}
{
    ( Command() )*
}

void Command() :
{}
{
  < BCOMMAND > "(" ((",")* Expression()) ")"
}

void Expression() :
{}
{
  < IDENTIFIER > 
}

