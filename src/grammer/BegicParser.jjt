/** オプション */
options
{
  /* parserをfor文などで繰り返し使うならfalseにする */
  STATIC = false;
  MULTI = true;
  VISITOR = true;
  UNICODE_INPUT = true;
}

/** Parserクラスの定義 */
PARSER_BEGIN(BegicParser)
package jp.tolz.begic.prototype.interpreter.parser;

import java.util.ArrayList;

import jp.tolz.begic.prototype.interpreter.values.*;
import jp.tolz.begic.prototype.interpreter.values.base.*;

public class BegicParser{
	private void log(String info) {
		System.out.println("[BegicParser]" + info);
	}
}

PARSER_END(BegicParser)

/** ここまでがParserクラスの定義 */
/** 以下は文法の定義 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* OPERATORS */

TOKEN :
{
  < EQ : "==" >
| < NEQ : "!=" >
| < ASSIGN : "=" >
| < EXCHANGE : "<->" >
| < GT : ">" >
| < LT : "<" >
| < LE: "<=" >
| < GE: ">=" >
| < NOT : "not" >
| < QUESTION : "?" >
| < OR : "or" >
| < AND : "and" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < POWER : "^" >
| < MOD : "mod" >
}


/* ----- COMMAND ----- */

TOKEN :
{
  < BCOMMAND :
    "line"
  | "circle"
  | "print"
  | "input" >
}

/* ----- STATEMENTS ----- */
TOKEN :
{
  < IF : "if" >
| < WHILE : "while" >
| < LOOP : "loop" >
| < FOR : "for" >
| < BREAK : "break" >
| < NEXT : "next" >
| < TO : "to" >
| < STEP : "step" >
| < DO : "do" >
| < END : "end" >
}

/* FUNCTION */

TOKEN :
{
  < BFUNCTION :
  "sin"
| "cos"
| "tan"
| "log"
| "sinh"
| "cosh"
| "tanh"
| "sqrt"
| "exp" >
}


/* ----- COMMENTS ----- */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* ----- VALUES ----- */

TOKEN :
{
  < IDENTIFIER : (["a"-"z","A"-"Z"])+ (["0"-"9"])* >
| < STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < FLOAT :  ("+"|"-")*(["0"-"9"])+("."(["0"-"9"])+)* >
| < COLOR : "#"(["0"-"9"]) {6} >
| < BOOLEAN : "true" | "false" >
}


SimpleNode Program() :
{ Token prog = null; }
{
  (       Command()
    |  Block()
    |  IfStatement()
    |  LoopStatement()
    |  WhileStatement()
    |  ForStatement()
  )*
  {
	return jjtThis;
  }
}

// いまのところふつうの引数の形式にする。
void Command() :
{}
{
  LOOKAHEAD(2) < BCOMMAND > "(" Expression() ("," Expression())* ")"
| LOOKAHEAD(2) < BCOMMAND > Expression() ("," Expression())*
| < BCOMMAND >
}

void IfStatement() :
{}
{
  < IF > Expression() Block()
}

void LoopStatement() :
{}
{
  < LOOP > Block()
}

void WhileStatement() :
{}
{
  < WHILE > Expression() Block()
}

void ForStatement() :
{ Token t = null; }
{
  < FOR > t = < IDENTIFIER > < ASSIGN > Expression() < TO > Expression() < STEP > Expression() Block()
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void Block() :
{}
{
  "{" Program() "}"
| < DO > Program() < END >
}

void Assingment() :
{ Token t = null; }
{
  t = < IDENTIFIER > < ASSIGN > Expression()
  {
    jjtThis.jjtSetValue(t.image);
  }
}

void Expression() :
{}
{
  LOOKAHEAD(2) Identigier()
| Float()
| String()
| Color()
| Boolean()
| Abs()
| List()
| Hash()
| ListHashFactor()
| "(" Operation() ")"
}

void Operation() :
{}
{
  addOp()
}

void addOp() :
{}
{
  Expression() < PLUS > Expression()
}

void mnsOp() :
{}
{
  Expression() < MINUS > Expression()
}

void mulOp() :
{}
{
  Expression() < STAR > Expression()
}

void divOp() :
{}
{
  Expression() < SLASH > Expression()
}

void modOp() :
{}
{
  Expression() < MOD > Expression()
}

void powOp() :
{}
{
  Expression() < POWER > Expression()
}

void Abs() :
{}
{
  "|" Float() "|"
}

void List() :
{}
{
  "[" ( Expression() ("," Expression())*)* "]"
}

void Hash() :
{}
{
  "{" Expression() ":" Expression() (","  Expression() ":" Expression() )* "}"
}

void ListHashFactor() :
{}
{
  Identigier() "[" Expression() "]"
}

void Identigier() :
{ Token t = null; }
{
  t = < IDENTIFIER > { jjtThis.jjtSetValue(t.image); }
}

void Boolean() :
{ Token t = null; }
{
  t = < BOOLEAN > { jjtThis.jjtSetValue(t.image); }
}

void Float() :
{ Token t = null; }
{
  t = < FLOAT > { jjtThis.jjtSetValue(t.image); }  
}

void String() :
{ Token t = null; }
{
  t = < STRING > { jjtThis.jjtSetValue(t.image); }
}

void Color() :
{ Token t = null; }
{
  t = < COLOR > { jjtThis.jjtSetValue(t.image); }  
}