/* BegicParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. BegicParserTokenManager.java */
package jp.begic.interpreter.parser;
import java.util.ArrayList;
import jp.begic.interpreter.values.*;
import jp.begic.interpreter.values.base.*;

/** Token Manager. */
@SuppressWarnings("unused")public class BegicParserTokenManager implements BegicParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 45;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 128;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 121;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 84;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 110;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 78;
         }
         if ((active0 & 0xa0000800000L) != 0L)
            return 14;
         if ((active0 & 0x10004030000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 5;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 94;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 10;
         }
         if ((active0 & 0x2402050000L) != 0L)
         {
            jjmatchedKind = 53;
            return 144;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 53;
            return 56;
         }
         return -1;
      case 1:
         if ((active0 & 0x80000000000L) != 0L)
            return 12;
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
            return 118;
         }
         if ((active0 & 0x2808040000L) != 0L)
            return 144;
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
            return 145;
         }
         if ((active0 & 0x1000d732090000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
            return 144;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
            return 117;
         }
         if ((active0 & 0x100096b0000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
            return 144;
         }
         if ((active0 & 0x4102090000L) != 0L)
            return 144;
         return -1;
      case 3:
         if ((active0 & 0x10000250000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
            return 144;
         }
         if ((active0 & 0x94a0000000L) != 0L)
            return 144;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 40:
         return jjStopAtPos(0, 55);
      case 41:
         return jjStopAtPos(0, 57);
      case 42:
         return jjStopAtPos(0, 22);
      case 43:
         return jjStopAtPos(0, 20);
      case 44:
         return jjStopAtPos(0, 56);
      case 45:
         return jjStopAtPos(0, 21);
      case 47:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0xa0000000000L);
      case 58:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 59:
         return jjStopAtPos(0, 54);
      case 60:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0xa400L);
      case 61:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 62:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 63:
         return jjStopAtPos(0, 17);
      case 91:
         return jjStopAtPos(0, 60);
      case 93:
         return jjStopAtPos(0, 61);
      case 94:
         return jjStopAtPos(0, 24);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10004030000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400010000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 123:
         return jjStopAtPos(0, 58);
      case 125:
         return jjStopAtPos(0, 59);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 12);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 47:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 60:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 61:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 144);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000080000L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 144);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 144);
         return jjMoveStringLiteralDfa2_0(active0, 0x182010000L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 144);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         break;
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 144);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 144);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 144);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 144);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 144);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 144);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 144);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 144);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 144);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 144);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 144);
         break;
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 144);
         break;
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 144);
         break;
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 144);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 144;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     { jjCheckNAddTwoStates(21, 22); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  break;
               case 12:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 14:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 20:
                  if (curChar == 34 && kind > 48)
                     kind = 48;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 22:
                  if (curChar == 46)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 24:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 47:
                  if (curChar != 46)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(48); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 98)
                     { jjAddStates(3, 6); }
                  else if (curChar == 116)
                     { jjAddStates(7, 9); }
                  else if (curChar == 119)
                     { jjAddStates(10, 12); }
                  else if (curChar == 114)
                     { jjAddStates(13, 14); }
                  else if (curChar == 115)
                     { jjAddStates(15, 18); }
                  else if (curChar == 99)
                     { jjAddStates(19, 21); }
                  else if (curChar == 108)
                     { jjAddStates(22, 23); }
                  else if (curChar == 112)
                     { jjAddStates(24, 26); }
                  else if (curChar == 97)
                     { jjAddStates(27, 28); }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 118:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 144:
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 121:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 124;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 122;
                  if (curChar == 97)
                     { jjCheckNAdd(95); }
                  break;
               case 110:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 118;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 114;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 111)
                     { jjCheckNAdd(50); }
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 116)
                     { jjCheckNAdd(116); }
                  break;
               case 128:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 142;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 127;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 99;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 97;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 93;
                  if (curChar == 105)
                     { jjCheckNAdd(95); }
                  break;
               case 145:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     { jjCheckNAddTwoStates(47, 48); }
                  }
                  if (curChar == 103)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 0:
                  if (curChar == 101 && kind > 26)
                     kind = 26;
                  break;
               case 1:
                  if (curChar == 118)
                     { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 112 && kind > 40)
                     kind = 40;
                  break;
               case 6:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116 && kind > 40)
                     kind = 40;
                  break;
               case 8:
                  if (curChar == 117)
                     { jjCheckNAdd(7); }
                  break;
               case 9:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (kind > 42)
                     kind = 42;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 31:
                  if (curChar == 119 && kind > 50)
                     kind = 50;
                  break;
               case 32:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 110 && kind > 50)
                     kind = 50;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 101 && kind > 51)
                     kind = 51;
                  break;
               case 43:
                  if (curChar == 115)
                     { jjCheckNAdd(42); }
                  break;
               case 44:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if (curChar == 97)
                     { jjAddStates(27, 28); }
                  break;
               case 50:
                  if (curChar == 103 && kind > 40)
                     kind = 40;
                  break;
               case 51:
                  if (curChar == 110)
                     { jjCheckNAdd(50); }
                  break;
               case 52:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 108 && kind > 40)
                     kind = 40;
                  break;
               case 58:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 112)
                     { jjAddStates(24, 26); }
                  break;
               case 66:
                  if (curChar == 115 && kind > 26)
                     kind = 26;
                  break;
               case 67:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 116 && kind > 26)
                     kind = 26;
                  break;
               case 70:
               case 73:
                  if (curChar == 110)
                     { jjCheckNAdd(69); }
                  break;
               case 71:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 108)
                     { jjAddStates(22, 23); }
                  break;
               case 77:
                  if (curChar == 110)
                     { jjCheckNAdd(0); }
                  break;
               case 79:
                  if (curChar == 111)
                     { jjCheckNAdd(50); }
                  break;
               case 80:
                  if (curChar == 99)
                     { jjAddStates(19, 21); }
                  break;
               case 81:
                  if (curChar == 108)
                     { jjCheckNAdd(0); }
                  break;
               case 82:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 85:
                  if (curChar == 115 && kind > 40)
                     kind = 40;
                  break;
               case 86:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 104 && kind > 40)
                     kind = 40;
                  break;
               case 88:
                  if (curChar == 115)
                     { jjCheckNAdd(87); }
                  break;
               case 89:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 115)
                     { jjAddStates(15, 18); }
                  break;
               case 91:
                  if (curChar == 112 && kind > 26)
                     kind = 26;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 110 && kind > 40)
                     kind = 40;
                  break;
               case 96:
                  if (curChar == 105)
                     { jjCheckNAdd(95); }
                  break;
               case 97:
               case 122:
                  if (curChar == 110)
                     { jjCheckNAdd(87); }
                  break;
               case 98:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 114)
                     { jjCheckNAdd(7); }
                  break;
               case 100:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 114)
                     { jjAddStates(13, 14); }
                  break;
               case 102:
                  if (curChar == 100 && kind > 40)
                     kind = 40;
                  break;
               case 103:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 100 && kind > 50)
                     kind = 50;
                  break;
               case 106:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 119)
                     { jjAddStates(10, 12); }
                  break;
               case 108:
                  if (curChar == 116)
                     { jjCheckNAdd(0); }
                  break;
               case 109:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 111:
                  if (curChar == 119 && kind > 26)
                     kind = 26;
                  break;
               case 112:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 119:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 116)
                     { jjAddStates(7, 9); }
                  break;
               case 123:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 117)
                     { jjCheckNAdd(42); }
                  break;
               case 125:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 98)
                     { jjAddStates(3, 6); }
                  break;
               case 127:
                  if (curChar == 120 && kind > 26)
                     kind = 26;
                  break;
               case 129:
                  if (curChar == 100 && kind > 26)
                     kind = 26;
                  break;
               case 130:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 117)
                     { jjCheckNAdd(116); }
                  break;
               case 139:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 107 && kind > 50)
                     kind = 50;
                  break;
               case 141:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 42)
                     kind = 42;
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 144 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x400000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 44)
                     kind = 44;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   17, 18, 20, 128, 137, 139, 143, 121, 123, 125, 110, 115, 119, 104, 106, 94, 
   96, 98, 100, 84, 86, 89, 78, 79, 68, 72, 75, 56, 64, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\75\75", "\41\75", "\75", "\72\75", 
"\74\55\76", "\76", "\74", "\74\75", "\76\75", "\74\74", "\156\157\164", "\77", "\157\162", 
"\141\156\144", "\53", "\55", "\52", "\57", "\136", "\155\157\144", null, "\151\146", 
"\145\154\163\151\146", "\145\154\163\145", "\167\150\151\154\145", "\154\157\157\160", 
"\146\157\162", "\142\162\145\141\153", "\156\145\170\164", "\164\157", "\163\164\145\160", 
"\144\157", "\145\156\144", "\143\141\154\154", null, null, null, null, null, null, null, 
null, null, null, null, null, "\145\155\160\164\171", null, "\73", "\50", "\54", 
"\51", "\173", "\175", "\133", "\135", "\72", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 47)
         {
            jjmatchedKind = 47;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 47)
         {
            jjmatchedKind = 47;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 47)
         {
            jjmatchedKind = 47;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public BegicParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public BegicParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 144; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7fff01ffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x70000000003eL, 
};
static final long[] jjtoSpecial = {
   0x700000000000L, 
};
static final long[] jjtoMore = {
   0x8e0000000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[144];
    private final int[] jjstateSet = new int[2 * 144];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
