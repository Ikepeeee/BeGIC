/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BegicParser.jj */
/*@egen*//** \u30aa\u30d7\u30b7\u30e7\u30f3 */
options
{
  /* parser\u3092for\u6587\u306a\u3069\u3067\u7e70\u308a\u8fd4\u3057\u4f7f\u3046\u306a\u3089false\u306b\u3059\u308b */
  STATIC = false;
               
                 
  UNICODE_INPUT = true;
}

/** Parser\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9 */
PARSER_BEGIN(BegicParser)
package jp.tolz.begic.prototype.interpreter.parser;

public class BegicParser/*@bgen(jjtree)*/implements BegicParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTBegicParserState jjtree = new JJTBegicParserState();

/*@egen*/
  /* \u3053\u3053\u306b\uff0c\u666e\u901a\u306eJava\u30af\u30e9\u30b9\u306e\u3088\u3046\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3063\u307d\u3044 */
}

PARSER_END(BegicParser)

/** \u3053\u3053\u307e\u3067\u304cParser\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9 */
/** \u4ee5\u4e0b\u306f\u6587\u6cd5\u306e\u5b9a\u7fa9 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* OPERATORS */

TOKEN :
{
  < EQ : "=" >
| < GT : ">" >
| < LT : "<" >
| < NOT : "not" >
| < QUESTION : "?" >
| < OR : "or" >
| < AND : "and" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < POWER : "^" >
| < MOD : "mod" >
| < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
| < REMASSIGN : "%=" >
}

/* LETTER */

TOKEN :
{
  < LETTER :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < NUMBER : [ "0"-"9" ] >
}

/* COMMAND_IDENTIFIER */

TOKEN :
{
  < BCOMMAND :
    "line"
  | "circle"
  | "print"
  | "input" >
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| 
  "/*" : IN_MULTI_LINE_COMMENT
}

< IN_SINGLE_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_FORMAL_COMMENT >
SPECIAL_TOKEN :
{
  < FORMAL_COMMENT : "*/" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
/* VALUABLE */

TOKEN :
{
  < VALUABLE : (< LETTER >)+ (< NUMBER >)* >
}

void Program() :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    (
      < BCOMMAND >
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}